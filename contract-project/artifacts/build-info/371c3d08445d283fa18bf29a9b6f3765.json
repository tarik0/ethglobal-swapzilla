{"id":"371c3d08445d283fa18bf29a9b6f3765","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/interfaces/IERC7683.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title CrossChainOrder type\n/// @notice Standard order struct to be signed by swappers, disseminated to fillers, and submitted to settlement contracts\nstruct CrossChainOrder {\n\t/// @dev The contract address that the order is meant to be settled by.\n\t/// Fillers send this order to this contract address on the origin chain\n\taddress settlementContract;\n\t/// @dev The address of the user who is initiating the swap,\n\t/// whose input tokens will be taken and escrowed\n\taddress swapper;\n\t/// @dev Nonce to be used as replay protection for the order\n\tuint256 nonce;\n\t/// @dev The chainId of the origin chain\n\tuint32 originChainId;\n\t/// @dev The timestamp by which the order must be initiated\n\tuint32 initiateDeadline;\n\t/// @dev The timestamp by which the order must be filled on the destination chain\n\tuint32 fillDeadline;\n\t/// @dev Arbitrary implementation-specific data\n\t/// Can be used to define tokens, amounts, destination chains, fees, settlement parameters,\n\t/// or any other order-type specific information\n\tbytes orderData;\n}\n\n/// @title ResolvedCrossChainOrder type\n/// @notice An implementation-generic representation of an order\n/// @dev Defines all requirements for filling an order by unbundling the implementation-specific orderData.\n/// @dev Intended to improve integration generalization by allowing fillers to compute the exact input and output information of any order\nstruct ResolvedCrossChainOrder {\n\t/// @dev The contract address that the order is meant to be settled by.\n\taddress settlementContract;\n\t/// @dev The address of the user who is initiating the swap\n\taddress swapper;\n\t/// @dev Nonce to be used as replay protection for the order\n\tuint256 nonce;\n\t/// @dev The chainId of the origin chain\n\tuint32 originChainId;\n\t/// @dev The timestamp by which the order must be initiated\n\tuint32 initiateDeadline;\n\t/// @dev The timestamp by which the order must be filled on the destination chain(s)\n\tuint32 fillDeadline;\n\n\t/// @dev The inputs to be taken from the swapper as part of order initiation\n\tInput[] swapperInputs;\n\t/// @dev The outputs to be given to the swapper as part of order fulfillment\n\tOutput[] swapperOutputs;\n\t/// @dev The outputs to be given to the filler as part of order settlement\n\tOutput[] fillerOutputs;\n}\n\n/// @notice Tokens sent by the swapper as inputs to the order\nstruct Input {\n\t/// @dev The address of the ERC20 token on the origin chain\n\taddress token;\n\t/// @dev The amount of the token to be sent\n\tuint256 amount;\n}\n\n/// @notice Tokens that must be receive for a valid order fulfillment\nstruct Output {\n\t/// @dev The address of the ERC20 token on the destination chain\n\t/// @dev address(0) used as a sentinel for the native token\n\taddress token;\n\t/// @dev The amount of the token to be sent\n\tuint256 amount;\n\t/// @dev The address to receive the output tokens\n\taddress recipient;\n\t/// @dev The destination chain for this output\n\tuint32 chainId;\n}\n\n\n/// @title ISettlementContract\n/// @notice Standard interface for settlement contracts\ninterface ISettlementContract {\n    function initiate(CrossChainOrder calldata order, bytes calldata signature, bytes calldata fillerData) external payable;\n\n    function resolve(CrossChainOrder calldata order, bytes calldata fillerData) external view returns (ResolvedCrossChainOrder memory);\n}\n"},"contracts/SettlementContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ISettlementContract, CrossChainOrder, ResolvedCrossChainOrder} from \"./interfaces/IERC7683.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract SettlementContract is\n    ISettlementContract,\n    Context,\n    Ownable,\n    ReentrancyGuard\n{\n    using ECDSA for bytes32;\n    using MessageHashUtils for bytes32;\n    using Address for address;\n\n    ///\n    /// Constructor\n    ///\n\n    constructor() Ownable(_msgSender()) {}\n\n    ///\n    /// Order Hashing\n    ///\n\n    function computeOrderHash(CrossChainOrder calldata order) external pure returns (bytes32) {\n        return _hashOrder(order);\n    }\n\n    function _hashOrder(CrossChainOrder memory order) internal pure returns (bytes32) {\n        return keccak256(abi.encode(order));\n    }\n\n    function _verifySignature(CrossChainOrder memory order, bytes memory signature) internal view returns (bool) {\n        return _hashOrder(order)\n        .toEthSignedMessageHash()\n        .recover(signature) == _msgSender();\n    }\n\n    ///\n    /// Whitelisted Settlement Contracts\n    ///\n\n    mapping(address => bool) internal _isSettlementSupported;\n    mapping(address => uint) internal _settlementToChainId;\n\n    function whitelistSettlementContract(address settlementContract, uint chainId) external onlyOwner {\n        _isSettlementSupported[settlementContract] = true;\n        _settlementToChainId[settlementContract] = chainId;\n    }\n\n    ///\n    /// Order Registration\n    ///\n\n    mapping(bytes32 => CrossChainOrder) internal _orders;\n    mapping(bytes32 => uint256) internal _destChains;\n    mapping(address => uint256) internal _nonceOf;\n\n    event OrderCreated(bytes32 indexed orderHash, CrossChainOrder order);\n    event OrderDeleted(bytes32 indexed orderHash);\n\n    function _broadcastOrder(CrossChainOrder calldata order, uint256 destChainId) internal {\n        // todo: Implement LayerZero sending logic\n    }\n\n    function _broadcastOrderDelete(bytes32 hash, uint256 destChainId) internal {\n        // todo: Implement LayerZero sending logic\n    }\n\n    function _initiateLzOrder(CrossChainOrder memory order) internal {\n        bytes32 orderHash = _hashOrder(order);\n        _orders[orderHash] = order;\n        _destChains[orderHash] = block.chainid;\n        emit OrderCreated(orderHash, order);\n    }\n\n    function _deleteLzOrder(bytes32 hash) internal {\n        delete _orders[hash];\n        delete _destChains[hash];\n        delete _matchTimestamps[hash];\n        emit OrderDeleted(hash);\n    }\n\n    function initiate(CrossChainOrder calldata order, bytes calldata signature, bytes calldata fillerData) external payable nonReentrant {\n        require(_verifySignature(order, signature), \"invalid signature\");\n        require(_isSettlementSupported[order.settlementContract], \"settlement not supported\");\n        require(order.fillDeadline > block.timestamp, \"invalid fillDeadline\");\n        require(order.initiateDeadline > block.timestamp, \"invalid initiateDeadline\");\n        require(order.nonce == _nonceOf[_msgSender()], \"invalid nonce\");\n        require(order.originChainId == block.chainid, \"invalid originChainId\");\n        require(order.swapper == _msgSender(), \"invalid swapper\");\n\n        (uint256 inputAmount) = abi.decode(order.orderData, (uint256));\n        require(inputAmount > 0, \"insufficient input amount\");\n        require(msg.value == inputAmount, \"insufficient msg.value\");\n\n        (uint256 destChainId) = abi.decode(fillerData, (uint256));\n        require(destChainId != block.chainid, \"dest chain id must be different\");\n        require(_settlementToChainId[order.settlementContract] == destChainId, \"invalid dest chain id\");\n\n        bytes32 orderHash = _hashOrder(order);\n        _orders[orderHash] = order;\n        _destChains[orderHash] = destChainId;\n\n        _nonceOf[_msgSender()] += 1;\n\n        _broadcastOrder(order, destChainId);\n        emit OrderCreated(orderHash, order);\n    }\n\n    function deleteOrder(bytes32 hash) external nonReentrant {\n        CrossChainOrder memory order = _orders[hash];\n        require(order.swapper == _msgSender(), \"invalid swapper\");\n        require(order.originChainId == block.chainid, \"invalid origin chain\");\n        require(_matchTimestamps[hash] == 0, \"order is matched\");\n\n        (uint256 inputAmount) = abi.decode(order.orderData, (uint256));\n        payable(order.swapper).transfer(inputAmount);\n\n        uint256 destChainId = _destChains[hash];\n        delete _orders[hash];\n        delete _destChains[hash];\n\n        _broadcastOrderDelete(hash, destChainId);\n        emit OrderDeleted(hash);\n    }\n\n    function nonceOf(address user) external view returns (uint256) {\n        return _nonceOf[user];\n    }\n\n    ///\n    /// Order Matching\n    ///\n\n    mapping(bytes32 => uint256) internal _matchTimestamps;\n    mapping(bytes32 => bytes32) internal _matchedOrders;\n\n    event OrdersMatched(bytes32 indexed orderHashA, bytes32 indexed orderHashB, uint256 timestamp);\n    event MatchDestroyed(bytes32 indexed orderHashA, bytes32 indexed orderHashB);\n\n    function _broadcastMatch(bytes32 orderHashA, bytes32 orderHashB, uint256 matchTimestamp) internal {\n        // todo: Implement LayerZero sending logic\n    }\n\n    function _broadcastUnmatch(bytes32 orderHashA, bytes32 orderHashB) internal {\n        // todo: Implement LayerZero sending logic\n    }\n\n    function _matchOrdersLz(bytes32 orderHashA, bytes32 orderHashB, uint256 matchTimestamp) internal {\n        _matchTimestamps[orderHashA] = matchTimestamp;\n        _matchTimestamps[orderHashB] = matchTimestamp;\n        _matchedOrders[orderHashA] = orderHashB;\n        _matchedOrders[orderHashB] = orderHashA;\n        emit OrdersMatched(orderHashA, orderHashB, matchTimestamp);\n    }\n\n    function _unmatchOrdersLz(bytes32 orderHashA, bytes32 orderHashB) internal {\n        delete _matchTimestamps[orderHashA];\n        delete _matchTimestamps[orderHashB];\n        delete _matchedOrders[orderHashA];\n        delete _matchedOrders[orderHashB];\n        emit MatchDestroyed(orderHashA, orderHashB);\n    }\n\n    function matchOrders(bytes32 orderHashA, bytes32 orderHashB) external {\n        CrossChainOrder memory orderA = _orders[orderHashA];\n        require(orderA.swapper != address(0), \"order A doesn't exist\");\n        CrossChainOrder memory orderB = _orders[orderHashB];\n        require(orderB.swapper != address(0), \"order B doesn't exist\");\n\n        require(orderA.fillDeadline > block.timestamp, \"invalid fillDeadline A\");\n        require(orderB.fillDeadline > block.timestamp, \"invalid fillDeadline B\");\n        require(orderA.initiateDeadline > block.timestamp, \"invalid initiateDeadline A\");\n        require(orderB.initiateDeadline > block.timestamp, \"invalid initiateDeadline B\");\n\n        (uint256 inputAmountA) = abi.decode(orderA.orderData, (uint256));\n        (uint256 inputAmountB) = abi.decode(orderB.orderData, (uint256));\n        require(inputAmountA == inputAmountB, \"input amounts mismatch\");\n\n        require(\n            _destChains[orderHashA] == orderB.originChainId &&\n            _destChains[orderHashB] == orderA.originChainId,\n            \"destination chains mismatch\"\n        );\n\n        uint256 matchTimestamp = block.timestamp;\n        _matchTimestamps[orderHashA] = matchTimestamp;\n        _matchTimestamps[orderHashB] = matchTimestamp;\n        _matchedOrders[orderHashA] = orderHashB;\n        _matchedOrders[orderHashB] = orderHashA;\n\n        _broadcastMatch(orderHashA, orderHashB, matchTimestamp);\n        emit OrdersMatched(orderHashA, orderHashB, matchTimestamp);\n    }\n\n    function destroyExpiredMatch(bytes32 orderHash) external {\n        bytes32 matchedOrderHash = _matchedOrders[orderHash];\n        require(matchedOrderHash != bytes32(0), \"order not matched\");\n\n        uint256 matchTimestamp = _matchTimestamps[orderHash];\n        require(block.timestamp > matchTimestamp + 5 minutes, \"match not expired\");\n\n        delete _matchTimestamps[orderHash];\n        delete _matchTimestamps[matchedOrderHash];\n        delete _matchedOrders[orderHash];\n        delete _matchedOrders[matchedOrderHash];\n\n        _broadcastUnmatch(orderHash, matchedOrderHash);\n\n        emit MatchDestroyed(orderHash, matchedOrderHash);\n    }\n\n    ///\n    /// Order Resolving\n    ///\n\n    function resolve(CrossChainOrder calldata order, bytes calldata fillerData) external view returns (ResolvedCrossChainOrder memory) {\n\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[430],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":431,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":430,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,430],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[400]},"id":401,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"127:67:1","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":400,"linearizedBaseContracts":[400],"name":"Address","nameLocation":"203:7:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"217:94:1","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cd786059","id":155,"name":"AddressInsufficientBalance","nameLocation":"322:26:1","nodeType":"ErrorDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"account","nameLocation":"357:7:1","nodeType":"VariableDeclaration","scope":155,"src":"349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:17:1"},"src":"316:50:1"},{"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"372:75:1","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":160,"name":"AddressEmptyCode","nameLocation":"458:16:1","nodeType":"ErrorDefinition","parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"target","nameLocation":"483:6:1","nodeType":"VariableDeclaration","scope":160,"src":"475:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":157,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:1"},"src":"452:39:1"},{"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"497:89:1","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"1425ea42","id":163,"name":"FailedInnerCall","nameLocation":"597:15:1","nodeType":"ErrorDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[],"src":"612:2:1"},"src":"591:24:1"},{"body":{"id":203,"nodeType":"Block","src":"1602:260:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":173,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1624:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}],"id":172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":171,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:1","typeDescriptions":{}}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:7:1","memberName":"balance","nodeType":"MemberAccess","src":"1616:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":176,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"1640:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1616:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"IfStatement","src":"1612:109:1","trueBody":{"id":185,"nodeType":"Block","src":"1648:73:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":181,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1704:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}],"id":180,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1696:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":179,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:1","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":178,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"1669:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"RevertStatement","src":"1662:48:1"}]}},{"assignments":[188,null],"declarations":[{"constant":false,"id":188,"mutability":"mutable","name":"success","nameLocation":"1737:7:1","nodeType":"VariableDeclaration","scope":203,"src":"1732:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":187,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":195,"initialValue":{"arguments":[{"hexValue":"","id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":189,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1750:9:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1760:4:1","memberName":"call","nodeType":"MemberAccess","src":"1750:14:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":191,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"1772:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1750:29:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1731:52:1"},{"condition":{"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:8:1","subExpression":{"id":196,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"1798:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":202,"nodeType":"IfStatement","src":"1793:63:1","trueBody":{"id":201,"nodeType":"Block","src":"1807:49:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":198,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1828:15:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":200,"nodeType":"RevertStatement","src":"1821:24:1"}]}}]},"documentation":{"id":164,"nodeType":"StructuredDocumentation","src":"621:905:1","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":204,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1540:9:1","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"recipient","nameLocation":"1566:9:1","nodeType":"VariableDeclaration","scope":204,"src":"1550:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"1550:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"amount","nameLocation":"1585:6:1","nodeType":"VariableDeclaration","scope":204,"src":"1577:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:43:1"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"1602:0:1"},"scope":400,"src":"1531:331:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":220,"nodeType":"Block","src":"2794:62:1","statements":[{"expression":{"arguments":[{"id":215,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"2833:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":216,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2841:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2847:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":214,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"2811:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2811:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":213,"id":219,"nodeType":"Return","src":"2804:45:1"}]},"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"1868:832:1","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":221,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2714:12:1","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"target","nameLocation":"2735:6:1","nodeType":"VariableDeclaration","scope":221,"src":"2727:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":209,"mutability":"mutable","name":"data","nameLocation":"2756:4:1","nodeType":"VariableDeclaration","scope":221,"src":"2743:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":208,"name":"bytes","nodeType":"ElementaryTypeName","src":"2743:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2726:35:1"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":221,"src":"2780:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":211,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2779:14:1"},"scope":400,"src":"2705:151:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":266,"nodeType":"Block","src":"3293:279:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":235,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3315:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}],"id":234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:1","typeDescriptions":{}}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:1","memberName":"balance","nodeType":"MemberAccess","src":"3307:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"3331:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3307:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":248,"nodeType":"IfStatement","src":"3303:108:1","trueBody":{"id":247,"nodeType":"Block","src":"3338:73:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":243,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3394:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$400","typeString":"library Address"}],"id":242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3386:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":241,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:1","typeDescriptions":{}}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":240,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3359:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":246,"nodeType":"RevertStatement","src":"3352:48:1"}]}},{"assignments":[250,252],"declarations":[{"constant":false,"id":250,"mutability":"mutable","name":"success","nameLocation":"3426:7:1","nodeType":"VariableDeclaration","scope":266,"src":"3421:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":249,"name":"bool","nodeType":"ElementaryTypeName","src":"3421:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"returndata","nameLocation":"3448:10:1","nodeType":"VariableDeclaration","scope":266,"src":"3435:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":251,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":259,"initialValue":{"arguments":[{"id":257,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"3488:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":253,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"3462:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:4:1","memberName":"call","nodeType":"MemberAccess","src":"3462:11:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"3481:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3462:25:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3420:73:1"},{"expression":{"arguments":[{"id":261,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"3537:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":262,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"3545:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":263,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"3554:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":260,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"3510:26:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":232,"id":265,"nodeType":"Return","src":"3503:62:1"}]},"documentation":{"id":222,"nodeType":"StructuredDocumentation","src":"2862:313:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":267,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"3189:21:1","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":224,"mutability":"mutable","name":"target","nameLocation":"3219:6:1","nodeType":"VariableDeclaration","scope":267,"src":"3211:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":223,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":226,"mutability":"mutable","name":"data","nameLocation":"3240:4:1","nodeType":"VariableDeclaration","scope":267,"src":"3227:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":225,"name":"bytes","nodeType":"ElementaryTypeName","src":"3227:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"value","nameLocation":"3254:5:1","nodeType":"VariableDeclaration","scope":267,"src":"3246:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":227,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3210:50:1"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":267,"src":"3279:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":230,"name":"bytes","nodeType":"ElementaryTypeName","src":"3279:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3278:14:1"},"scope":400,"src":"3180:392:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":292,"nodeType":"Block","src":"3811:154:1","statements":[{"assignments":[278,280],"declarations":[{"constant":false,"id":278,"mutability":"mutable","name":"success","nameLocation":"3827:7:1","nodeType":"VariableDeclaration","scope":292,"src":"3822:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":277,"name":"bool","nodeType":"ElementaryTypeName","src":"3822:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"returndata","nameLocation":"3849:10:1","nodeType":"VariableDeclaration","scope":292,"src":"3836:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":279,"name":"bytes","nodeType":"ElementaryTypeName","src":"3836:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":285,"initialValue":{"arguments":[{"id":283,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"3881:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":281,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"3863:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:10:1","memberName":"staticcall","nodeType":"MemberAccess","src":"3863:17:1","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3821:65:1"},{"expression":{"arguments":[{"id":287,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"3930:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":288,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"3938:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":289,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"3947:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":286,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"3903:26:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":276,"id":291,"nodeType":"Return","src":"3896:62:1"}]},"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"3578:128:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":293,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3720:18:1","nodeType":"FunctionDefinition","parameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"target","nameLocation":"3747:6:1","nodeType":"VariableDeclaration","scope":293,"src":"3739:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":272,"mutability":"mutable","name":"data","nameLocation":"3768:4:1","nodeType":"VariableDeclaration","scope":293,"src":"3755:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":271,"name":"bytes","nodeType":"ElementaryTypeName","src":"3755:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:35:1"},"returnParameters":{"id":276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"3797:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":274,"name":"bytes","nodeType":"ElementaryTypeName","src":"3797:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3796:14:1"},"scope":400,"src":"3711:254:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":318,"nodeType":"Block","src":"4203:156:1","statements":[{"assignments":[304,306],"declarations":[{"constant":false,"id":304,"mutability":"mutable","name":"success","nameLocation":"4219:7:1","nodeType":"VariableDeclaration","scope":318,"src":"4214:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":303,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"returndata","nameLocation":"4241:10:1","nodeType":"VariableDeclaration","scope":318,"src":"4228:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":305,"name":"bytes","nodeType":"ElementaryTypeName","src":"4228:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":311,"initialValue":{"arguments":[{"id":309,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"4275:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":307,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"4255:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:12:1","memberName":"delegatecall","nodeType":"MemberAccess","src":"4255:19:1","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4213:67:1"},{"expression":{"arguments":[{"id":313,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"4324:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":314,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"4332:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":315,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"4341:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":312,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"4297:26:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":302,"id":317,"nodeType":"Return","src":"4290:62:1"}]},"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"3971:130:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":319,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"4115:20:1","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"target","nameLocation":"4144:6:1","nodeType":"VariableDeclaration","scope":319,"src":"4136:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"4136:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":298,"mutability":"mutable","name":"data","nameLocation":"4165:4:1","nodeType":"VariableDeclaration","scope":319,"src":"4152:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":297,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4135:35:1"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"4189:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":300,"name":"bytes","nodeType":"ElementaryTypeName","src":"4189:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4188:14:1"},"scope":400,"src":"4106:253:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":358,"nodeType":"Block","src":"4783:424:1","statements":[{"condition":{"id":332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4797:8:1","subExpression":{"id":331,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"4798:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":356,"nodeType":"Block","src":"4857:344:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":338,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"5045:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:6:1","memberName":"length","nodeType":"MemberAccess","src":"5045:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5045:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":342,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":322,"src":"5071:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:4:1","memberName":"code","nodeType":"MemberAccess","src":"5071:11:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:1","memberName":"length","nodeType":"MemberAccess","src":"5071:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5071:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5045:49:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":353,"nodeType":"IfStatement","src":"5041:119:1","trueBody":{"id":352,"nodeType":"Block","src":"5096:64:1","statements":[{"errorCall":{"arguments":[{"id":349,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":322,"src":"5138:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":348,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"5121:16:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":351,"nodeType":"RevertStatement","src":"5114:31:1"}]}},{"expression":{"id":354,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"5180:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":330,"id":355,"nodeType":"Return","src":"5173:17:1"}]},"id":357,"nodeType":"IfStatement","src":"4793:408:1","trueBody":{"id":337,"nodeType":"Block","src":"4807:44:1","statements":[{"expression":{"arguments":[{"id":334,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"4829:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":333,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"4821:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4821:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":336,"nodeType":"ExpressionStatement","src":"4821:19:1"}]}}]},"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"4365:255:1","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."},"id":359,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4634:26:1","nodeType":"FunctionDefinition","parameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"target","nameLocation":"4678:6:1","nodeType":"VariableDeclaration","scope":359,"src":"4670:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"4670:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":324,"mutability":"mutable","name":"success","nameLocation":"4699:7:1","nodeType":"VariableDeclaration","scope":359,"src":"4694:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":323,"name":"bool","nodeType":"ElementaryTypeName","src":"4694:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":326,"mutability":"mutable","name":"returndata","nameLocation":"4729:10:1","nodeType":"VariableDeclaration","scope":359,"src":"4716:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":325,"name":"bytes","nodeType":"ElementaryTypeName","src":"4716:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4660:85:1"},"returnParameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":359,"src":"4769:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":328,"name":"bytes","nodeType":"ElementaryTypeName","src":"4769:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4768:14:1"},"scope":400,"src":"4625:582:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":380,"nodeType":"Block","src":"5509:122:1","statements":[{"condition":{"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5523:8:1","subExpression":{"id":369,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"5524:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":378,"nodeType":"Block","src":"5583:42:1","statements":[{"expression":{"id":376,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5604:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":368,"id":377,"nodeType":"Return","src":"5597:17:1"}]},"id":379,"nodeType":"IfStatement","src":"5519:106:1","trueBody":{"id":375,"nodeType":"Block","src":"5533:44:1","statements":[{"expression":{"arguments":[{"id":372,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5555:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":371,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"5547:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":374,"nodeType":"ExpressionStatement","src":"5547:19:1"}]}}]},"documentation":{"id":360,"nodeType":"StructuredDocumentation","src":"5213:189:1","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."},"id":381,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5416:16:1","nodeType":"FunctionDefinition","parameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":362,"mutability":"mutable","name":"success","nameLocation":"5438:7:1","nodeType":"VariableDeclaration","scope":381,"src":"5433:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":361,"name":"bool","nodeType":"ElementaryTypeName","src":"5433:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":364,"mutability":"mutable","name":"returndata","nameLocation":"5460:10:1","nodeType":"VariableDeclaration","scope":381,"src":"5447:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":363,"name":"bytes","nodeType":"ElementaryTypeName","src":"5447:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5432:39:1"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":381,"src":"5495:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":366,"name":"bytes","nodeType":"ElementaryTypeName","src":"5495:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5494:14:1"},"scope":400,"src":"5407:224:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":398,"nodeType":"Block","src":"5798:461:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":387,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"5874:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5885:6:1","memberName":"length","nodeType":"MemberAccess","src":"5874:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5874:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":396,"nodeType":"Block","src":"6204:49:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":393,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"6225:15:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":395,"nodeType":"RevertStatement","src":"6218:24:1"}]},"id":397,"nodeType":"IfStatement","src":"5870:383:1","trueBody":{"id":392,"nodeType":"Block","src":"5897:301:1","statements":[{"AST":{"nativeSrc":"6055:133:1","nodeType":"YulBlock","src":"6055:133:1","statements":[{"nativeSrc":"6073:40:1","nodeType":"YulVariableDeclaration","src":"6073:40:1","value":{"arguments":[{"name":"returndata","nativeSrc":"6102:10:1","nodeType":"YulIdentifier","src":"6102:10:1"}],"functionName":{"name":"mload","nativeSrc":"6096:5:1","nodeType":"YulIdentifier","src":"6096:5:1"},"nativeSrc":"6096:17:1","nodeType":"YulFunctionCall","src":"6096:17:1"},"variables":[{"name":"returndata_size","nativeSrc":"6077:15:1","nodeType":"YulTypedName","src":"6077:15:1","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6141:2:1","nodeType":"YulLiteral","src":"6141:2:1","type":"","value":"32"},{"name":"returndata","nativeSrc":"6145:10:1","nodeType":"YulIdentifier","src":"6145:10:1"}],"functionName":{"name":"add","nativeSrc":"6137:3:1","nodeType":"YulIdentifier","src":"6137:3:1"},"nativeSrc":"6137:19:1","nodeType":"YulFunctionCall","src":"6137:19:1"},{"name":"returndata_size","nativeSrc":"6158:15:1","nodeType":"YulIdentifier","src":"6158:15:1"}],"functionName":{"name":"revert","nativeSrc":"6130:6:1","nodeType":"YulIdentifier","src":"6130:6:1"},"nativeSrc":"6130:44:1","nodeType":"YulFunctionCall","src":"6130:44:1"},"nativeSrc":"6130:44:1","nodeType":"YulExpressionStatement","src":"6130:44:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":384,"isOffset":false,"isSlot":false,"src":"6102:10:1","valueSize":1},{"declaration":384,"isOffset":false,"isSlot":false,"src":"6145:10:1","valueSize":1}],"id":391,"nodeType":"InlineAssembly","src":"6046:142:1"}]}}]},"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"5637:101:1","text":" @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."},"id":399,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5752:7:1","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"returndata","nameLocation":"5773:10:1","nodeType":"VariableDeclaration","scope":399,"src":"5760:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":383,"name":"bytes","nodeType":"ElementaryTypeName","src":"5760:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5759:25:1"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"5798:0:1"},"scope":400,"src":"5743:516:1","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":401,"src":"195:6066:1","usedErrors":[155,160,163],"usedEvents":[]}],"src":"101:6161:1"},"id":1},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[430]},"id":431,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":402,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:2"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"127:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":430,"linearizedBaseContracts":[430],"name":"Context","nameLocation":"642:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":411,"nodeType":"Block","src":"718:34:2","statements":[{"expression":{"expression":{"id":408,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:2","memberName":"sender","nodeType":"MemberAccess","src":"735:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":407,"id":410,"nodeType":"Return","src":"728:17:2"}]},"id":412,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:2","nodeType":"FunctionDefinition","parameters":{"id":404,"nodeType":"ParameterList","parameters":[],"src":"675:2:2"},"returnParameters":{"id":407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":412,"src":"709:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":405,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:2"},"scope":430,"src":"656:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":420,"nodeType":"Block","src":"825:32:2","statements":[{"expression":{"expression":{"id":417,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:2","memberName":"data","nodeType":"MemberAccess","src":"842:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":416,"id":419,"nodeType":"Return","src":"835:15:2"}]},"id":421,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:2","nodeType":"FunctionDefinition","parameters":{"id":413,"nodeType":"ParameterList","parameters":[],"src":"775:2:2"},"returnParameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":421,"src":"809:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":414,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:2"},"scope":430,"src":"758:99:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":428,"nodeType":"Block","src":"935:25:2","statements":[{"expression":{"hexValue":"30","id":426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":425,"id":427,"nodeType":"Return","src":"945:8:2"}]},"id":429,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:2","nodeType":"FunctionDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[],"src":"892:2:2"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":429,"src":"926:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":423,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:2"},"scope":430,"src":"863:97:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":431,"src":"624:338:2","usedErrors":[],"usedEvents":[]}],"src":"101:862:2"},"id":2},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[499]},"id":500,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":432,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:3"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"135:750:3","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":499,"linearizedBaseContracts":[499],"name":"ReentrancyGuard","nameLocation":"904:15:3","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":436,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1699:11:3","nodeType":"VariableDeclaration","scope":499,"src":"1674:40:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":439,"mutability":"constant","name":"ENTERED","nameLocation":"1745:7:3","nodeType":"VariableDeclaration","scope":499,"src":"1720:36:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":437,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":441,"mutability":"mutable","name":"_status","nameLocation":"1779:7:3","nodeType":"VariableDeclaration","scope":499,"src":"1763:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":440,"name":"uint256","nodeType":"ElementaryTypeName","src":"1763:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":442,"nodeType":"StructuredDocumentation","src":"1793:52:3","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":444,"name":"ReentrancyGuardReentrantCall","nameLocation":"1856:28:3","nodeType":"ErrorDefinition","parameters":{"id":443,"nodeType":"ParameterList","parameters":[],"src":"1884:2:3"},"src":"1850:37:3"},{"body":{"id":451,"nodeType":"Block","src":"1907:38:3","statements":[{"expression":{"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":447,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"1917:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":448,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"1927:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":450,"nodeType":"ExpressionStatement","src":"1917:21:3"}]},"id":452,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":445,"nodeType":"ParameterList","parameters":[],"src":"1904:2:3"},"returnParameters":{"id":446,"nodeType":"ParameterList","parameters":[],"src":"1907:0:3"},"scope":499,"src":"1893:52:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":462,"nodeType":"Block","src":"2346:79:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":455,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"2356:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"2356:21:3"},{"id":458,"nodeType":"PlaceholderStatement","src":"2387:1:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":459,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"2398:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2398:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":461,"nodeType":"ExpressionStatement","src":"2398:20:3"}]},"documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"1951:366:3","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":463,"name":"nonReentrant","nameLocation":"2331:12:3","nodeType":"ModifierDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[],"src":"2343:2:3"},"src":"2322:103:3","virtual":false,"visibility":"internal"},{"body":{"id":478,"nodeType":"Block","src":"2470:268:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":466,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2558:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":467,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2569:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2558:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":473,"nodeType":"IfStatement","src":"2554:86:3","trueBody":{"id":472,"nodeType":"Block","src":"2578:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":469,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"2599:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":471,"nodeType":"RevertStatement","src":"2592:37:3"}]}},{"expression":{"id":476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":474,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2714:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":475,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2724:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":477,"nodeType":"ExpressionStatement","src":"2714:17:3"}]},"id":479,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2440:19:3","nodeType":"FunctionDefinition","parameters":{"id":464,"nodeType":"ParameterList","parameters":[],"src":"2459:2:3"},"returnParameters":{"id":465,"nodeType":"ParameterList","parameters":[],"src":"2470:0:3"},"scope":499,"src":"2431:307:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":486,"nodeType":"Block","src":"2782:170:3","statements":[{"expression":{"id":484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":482,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2924:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":483,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"2934:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2924:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":485,"nodeType":"ExpressionStatement","src":"2924:21:3"}]},"id":487,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2753:18:3","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[],"src":"2771:2:3"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[],"src":"2782:0:3"},"scope":499,"src":"2744:208:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":497,"nodeType":"Block","src":"3195:42:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":493,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"3212:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":494,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3223:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3212:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":492,"id":496,"nodeType":"Return","src":"3205:25:3"}]},"documentation":{"id":488,"nodeType":"StructuredDocumentation","src":"2958:168:3","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":498,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3140:23:3","nodeType":"FunctionDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[],"src":"3163:2:3"},"returnParameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":498,"src":"3189:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":490,"name":"bool","nodeType":"ElementaryTypeName","src":"3189:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3188:6:3"},"scope":499,"src":"3131:106:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":500,"src":"886:2353:3","usedErrors":[444],"usedEvents":[]}],"src":"109:3131:3"},"id":3},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2230],"SignedMath":[2335],"Strings":[754]},"id":755,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":501,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":755,"sourceUnit":2231,"src":"127:37:4","symbolAliases":[{"foreign":{"id":502,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"135:4:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":505,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":755,"sourceUnit":2336,"src":"165:49:4","symbolAliases":[{"foreign":{"id":504,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"173:10:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":506,"nodeType":"StructuredDocumentation","src":"216:34:4","text":" @dev String operations."},"fullyImplemented":true,"id":754,"linearizedBaseContracts":[754],"name":"Strings","nameLocation":"259:7:4","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":509,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:4","nodeType":"VariableDeclaration","scope":754,"src":"273:56:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":507,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:4","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":512,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:4","nodeType":"VariableDeclaration","scope":754,"src":"335:42:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":510,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:4","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":513,"nodeType":"StructuredDocumentation","src":"384:81:4","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":519,"name":"StringsInsufficientHexLength","nameLocation":"476:28:4","nodeType":"ErrorDefinition","parameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"value","nameLocation":"513:5:4","nodeType":"VariableDeclaration","scope":519,"src":"505:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":517,"mutability":"mutable","name":"length","nameLocation":"528:6:4","nodeType":"VariableDeclaration","scope":519,"src":"520:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:4"},"src":"470:66:4"},{"body":{"id":566,"nodeType":"Block","src":"708:627:4","statements":[{"id":565,"nodeType":"UncheckedBlock","src":"718:611:4","statements":[{"assignments":[528],"declarations":[{"constant":false,"id":528,"mutability":"mutable","name":"length","nameLocation":"750:6:4","nodeType":"VariableDeclaration","scope":565,"src":"742:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":527,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":535,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":531,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"770:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":529,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"759:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2230_$","typeString":"type(library Math)"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:4","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2050,"src":"759:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:4"},{"assignments":[537],"declarations":[{"constant":false,"id":537,"mutability":"mutable","name":"buffer","nameLocation":"808:6:4","nodeType":"VariableDeclaration","scope":565,"src":"794:20:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":536,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":542,"initialValue":{"arguments":[{"id":540,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"828:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":538,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:4"},{"assignments":[544],"declarations":[{"constant":false,"id":544,"mutability":"mutable","name":"ptr","nameLocation":"857:3:4","nodeType":"VariableDeclaration","scope":565,"src":"849:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":543,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":545,"nodeType":"VariableDeclarationStatement","src":"849:11:4"},{"AST":{"nativeSrc":"930:67:4","nodeType":"YulBlock","src":"930:67:4","statements":[{"nativeSrc":"948:35:4","nodeType":"YulAssignment","src":"948:35:4","value":{"arguments":[{"name":"buffer","nativeSrc":"959:6:4","nodeType":"YulIdentifier","src":"959:6:4"},{"arguments":[{"kind":"number","nativeSrc":"971:2:4","nodeType":"YulLiteral","src":"971:2:4","type":"","value":"32"},{"name":"length","nativeSrc":"975:6:4","nodeType":"YulIdentifier","src":"975:6:4"}],"functionName":{"name":"add","nativeSrc":"967:3:4","nodeType":"YulIdentifier","src":"967:3:4"},"nativeSrc":"967:15:4","nodeType":"YulFunctionCall","src":"967:15:4"}],"functionName":{"name":"add","nativeSrc":"955:3:4","nodeType":"YulIdentifier","src":"955:3:4"},"nativeSrc":"955:28:4","nodeType":"YulFunctionCall","src":"955:28:4"},"variableNames":[{"name":"ptr","nativeSrc":"948:3:4","nodeType":"YulIdentifier","src":"948:3:4"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":537,"isOffset":false,"isSlot":false,"src":"959:6:4","valueSize":1},{"declaration":528,"isOffset":false,"isSlot":false,"src":"975:6:4","valueSize":1},{"declaration":544,"isOffset":false,"isSlot":false,"src":"948:3:4","valueSize":1}],"id":546,"nodeType":"InlineAssembly","src":"921:76:4"},{"body":{"id":561,"nodeType":"Block","src":"1023:269:4","statements":[{"expression":{"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:4","subExpression":{"id":548,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"1041:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":550,"nodeType":"ExpressionStatement","src":"1041:5:4"},{"AST":{"nativeSrc":"1124:86:4","nodeType":"YulBlock","src":"1124:86:4","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1154:3:4","nodeType":"YulIdentifier","src":"1154:3:4"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:4","nodeType":"YulIdentifier","src":"1168:5:4"},{"kind":"number","nativeSrc":"1175:2:4","nodeType":"YulLiteral","src":"1175:2:4","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1164:3:4","nodeType":"YulIdentifier","src":"1164:3:4"},"nativeSrc":"1164:14:4","nodeType":"YulFunctionCall","src":"1164:14:4"},{"name":"HEX_DIGITS","nativeSrc":"1180:10:4","nodeType":"YulIdentifier","src":"1180:10:4"}],"functionName":{"name":"byte","nativeSrc":"1159:4:4","nodeType":"YulIdentifier","src":"1159:4:4"},"nativeSrc":"1159:32:4","nodeType":"YulFunctionCall","src":"1159:32:4"}],"functionName":{"name":"mstore8","nativeSrc":"1146:7:4","nodeType":"YulIdentifier","src":"1146:7:4"},"nativeSrc":"1146:46:4","nodeType":"YulFunctionCall","src":"1146:46:4"},"nativeSrc":"1146:46:4","nodeType":"YulExpressionStatement","src":"1146:46:4"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":509,"isOffset":false,"isSlot":false,"src":"1180:10:4","valueSize":1},{"declaration":544,"isOffset":false,"isSlot":false,"src":"1154:3:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"1168:5:4","valueSize":1}],"id":551,"nodeType":"InlineAssembly","src":"1115:95:4"},{"expression":{"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":552,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1227:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":555,"nodeType":"ExpressionStatement","src":"1227:11:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1260:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":560,"nodeType":"IfStatement","src":"1256:21:4","trueBody":{"id":559,"nodeType":"Break","src":"1272:5:4"}}]},"condition":{"hexValue":"74727565","id":547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":562,"nodeType":"WhileStatement","src":"1010:282:4"},{"expression":{"id":563,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1312:6:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":526,"id":564,"nodeType":"Return","src":"1305:13:4"}]}]},"documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"542:90:4","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":567,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:4","nodeType":"FunctionDefinition","parameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"value","nameLocation":"663:5:4","nodeType":"VariableDeclaration","scope":567,"src":"655:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:4"},"returnParameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":567,"src":"693:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":524,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:4"},"scope":754,"src":"637:698:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":592,"nodeType":"Block","src":"1511:92:4","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"1542:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:4","trueExpression":{"hexValue":"2d","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"1588:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":585,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"1573:10:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$2335_$","typeString":"type(library SignedMath)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:4","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2334,"src":"1573:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":584,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"1564:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":575,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:4","typeDescriptions":{}}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:4","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:4","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":574,"id":591,"nodeType":"Return","src":"1521:75:4"}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"1341:89:4","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":593,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:4","nodeType":"FunctionDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"value","nameLocation":"1466:5:4","nodeType":"VariableDeclaration","scope":593,"src":"1459:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":569,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:4"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":593,"src":"1496:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":572,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:4"},"scope":754,"src":"1435:168:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":612,"nodeType":"Block","src":"1782:100:4","statements":[{"id":611,"nodeType":"UncheckedBlock","src":"1792:84:4","statements":[{"expression":{"arguments":[{"id":602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"1835:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"1854:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":603,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"1842:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2230_$","typeString":"type(library Math)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:4","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2172,"src":"1842:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":601,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[613,696,716],"referencedDeclaration":696,"src":"1823:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":600,"id":610,"nodeType":"Return","src":"1816:49:4"}]}]},"documentation":{"id":594,"nodeType":"StructuredDocumentation","src":"1609:94:4","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":613,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:4","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"value","nameLocation":"1737:5:4","nodeType":"VariableDeclaration","scope":613,"src":"1729:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":595,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:4"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":613,"src":"1767:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":598,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:4"},"scope":754,"src":"1708:174:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":695,"nodeType":"Block","src":"2095:435:4","statements":[{"assignments":[624],"declarations":[{"constant":false,"id":624,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:4","nodeType":"VariableDeclaration","scope":695,"src":"2105:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":623,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":626,"initialValue":{"id":625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"2126:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:4"},{"assignments":[628],"declarations":[{"constant":false,"id":628,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:4","nodeType":"VariableDeclaration","scope":695,"src":"2141:19:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":627,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":637,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":632,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"2177:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":629,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:4"},{"expression":{"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":638,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"2198:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":640,"indexExpression":{"hexValue":"30","id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":643,"nodeType":"ExpressionStatement","src":"2198:15:4"},{"expression":{"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":644,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"2223:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":646,"indexExpression":{"hexValue":"31","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":649,"nodeType":"ExpressionStatement","src":"2223:15:4"},{"body":{"id":678,"nodeType":"Block","src":"2293:95:4","statements":[{"expression":{"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":664,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"2307:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":666,"indexExpression":{"id":665,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2314:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":667,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"2319:10:4","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":671,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":668,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"2330:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:4","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":673,"nodeType":"ExpressionStatement","src":"2307:40:4"},{"expression":{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":674,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"2361:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":677,"nodeType":"ExpressionStatement","src":"2361:16:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":658,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2281:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":679,"initializationExpression":{"assignments":[651],"declarations":[{"constant":false,"id":651,"mutability":"mutable","name":"i","nameLocation":"2261:1:4","nodeType":"VariableDeclaration","scope":679,"src":"2253:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":650,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":657,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":653,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"2269:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:4"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:4","subExpression":{"id":661,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2290:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":663,"nodeType":"ExpressionStatement","src":"2288:3:4"},"nodeType":"ForStatement","src":"2248:140:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":680,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"2401:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":689,"nodeType":"IfStatement","src":"2397:96:4","trueBody":{"id":688,"nodeType":"Block","src":"2418:75:4","statements":[{"errorCall":{"arguments":[{"id":684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"2468:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":685,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"2475:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":683,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"2439:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":687,"nodeType":"RevertStatement","src":"2432:50:4"}]}},{"expression":{"arguments":[{"id":692,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"2516:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":690,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:4","typeDescriptions":{}}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":622,"id":694,"nodeType":"Return","src":"2502:21:4"}]},"documentation":{"id":614,"nodeType":"StructuredDocumentation","src":"1888:112:4","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":696,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:4","nodeType":"FunctionDefinition","parameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"value","nameLocation":"2034:5:4","nodeType":"VariableDeclaration","scope":696,"src":"2026:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":615,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":618,"mutability":"mutable","name":"length","nameLocation":"2049:6:4","nodeType":"VariableDeclaration","scope":696,"src":"2041:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":617,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:4"},"returnParameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":696,"src":"2080:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":620,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:4"},"scope":754,"src":"2005:525:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":715,"nodeType":"Block","src":"2762:75:4","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":709,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"2807:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":707,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:4","typeDescriptions":{}}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:4","typeDescriptions":{}}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":712,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"2815:14:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":704,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[613,696,716],"referencedDeclaration":696,"src":"2779:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":703,"id":714,"nodeType":"Return","src":"2772:58:4"}]},"documentation":{"id":697,"nodeType":"StructuredDocumentation","src":"2536:148:4","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":716,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:4","nodeType":"FunctionDefinition","parameters":{"id":700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"addr","nameLocation":"2718:4:4","nodeType":"VariableDeclaration","scope":716,"src":"2710:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":698,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:4"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":716,"src":"2747:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":701,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:4"},"scope":754,"src":"2689:148:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":752,"nodeType":"Block","src":"2992:104:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":728,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"3015:1:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":726,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:4","typeDescriptions":{}}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:4","memberName":"length","nodeType":"MemberAccess","src":"3009:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":733,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3034:1:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":731,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:4","typeDescriptions":{}}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:4","memberName":"length","nodeType":"MemberAccess","src":"3028:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":740,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"3063:1:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":738,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:4","typeDescriptions":{}}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":737,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":746,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3086:1:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":744,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:4","typeDescriptions":{}}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":743,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":725,"id":751,"nodeType":"Return","src":"3002:87:4"}]},"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"2843:66:4","text":" @dev Returns true if the two strings are equal."},"id":753,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:4","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"a","nameLocation":"2943:1:4","nodeType":"VariableDeclaration","scope":753,"src":"2929:15:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":718,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"b","nameLocation":"2960:1:4","nodeType":"VariableDeclaration","scope":753,"src":"2946:15:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":720,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:4"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"2986:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:4"},"scope":754,"src":"2914:182:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":755,"src":"251:2847:4","usedErrors":[519],"usedEvents":[]}],"src":"101:2998:4"},"id":4},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[1102]},"id":1103,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":756,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"138:205:5","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1102,"linearizedBaseContracts":[1102],"name":"ECDSA","nameLocation":"352:5:5","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":762,"members":[{"id":758,"name":"NoError","nameLocation":"392:7:5","nodeType":"EnumValue","src":"392:7:5"},{"id":759,"name":"InvalidSignature","nameLocation":"409:16:5","nodeType":"EnumValue","src":"409:16:5"},{"id":760,"name":"InvalidSignatureLength","nameLocation":"435:22:5","nodeType":"EnumValue","src":"435:22:5"},{"id":761,"name":"InvalidSignatureS","nameLocation":"467:17:5","nodeType":"EnumValue","src":"467:17:5"}],"name":"RecoverError","nameLocation":"369:12:5","nodeType":"EnumDefinition","src":"364:126:5"},{"documentation":{"id":763,"nodeType":"StructuredDocumentation","src":"496:63:5","text":" @dev The signature derives the `address(0)`."},"errorSelector":"f645eedf","id":765,"name":"ECDSAInvalidSignature","nameLocation":"570:21:5","nodeType":"ErrorDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[],"src":"591:2:5"},"src":"564:30:5"},{"documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"600:60:5","text":" @dev The signature has an invalid length."},"errorSelector":"fce698f7","id":770,"name":"ECDSAInvalidSignatureLength","nameLocation":"671:27:5","nodeType":"ErrorDefinition","parameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"mutability":"mutable","name":"length","nameLocation":"707:6:5","nodeType":"VariableDeclaration","scope":770,"src":"699:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:16:5"},"src":"665:50:5"},{"documentation":{"id":771,"nodeType":"StructuredDocumentation","src":"721:85:5","text":" @dev The signature has an S value that is in the upper half order."},"errorSelector":"d78bce0c","id":775,"name":"ECDSAInvalidSignatureS","nameLocation":"817:22:5","nodeType":"ErrorDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"s","nameLocation":"848:1:5","nodeType":"VariableDeclaration","scope":775,"src":"840:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"840:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"839:11:5"},"src":"811:40:5"},{"body":{"id":827,"nodeType":"Block","src":"2242:653:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":790,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2256:9:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2266:6:5","memberName":"length","nodeType":"MemberAccess","src":"2256:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2276:2:5","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2256:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":825,"nodeType":"Block","src":"2781:108:5","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2811:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2803:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":812,"name":"address","nodeType":"ElementaryTypeName","src":"2803:7:5","typeDescriptions":{}}},"id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2803:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":816,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"2815:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2828:22:5","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":760,"src":"2815:35:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"expression":{"id":820,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2860:9:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2870:6:5","memberName":"length","nodeType":"MemberAccess","src":"2860:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2852:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":818,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2852:7:5","typeDescriptions":{}}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":823,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2802:76:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":789,"id":824,"nodeType":"Return","src":"2795:83:5"}]},"id":826,"nodeType":"IfStatement","src":"2252:637:5","trueBody":{"id":811,"nodeType":"Block","src":"2280:495:5","statements":[{"assignments":[795],"declarations":[{"constant":false,"id":795,"mutability":"mutable","name":"r","nameLocation":"2302:1:5","nodeType":"VariableDeclaration","scope":811,"src":"2294:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2294:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":796,"nodeType":"VariableDeclarationStatement","src":"2294:9:5"},{"assignments":[798],"declarations":[{"constant":false,"id":798,"mutability":"mutable","name":"s","nameLocation":"2325:1:5","nodeType":"VariableDeclaration","scope":811,"src":"2317:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2317:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":799,"nodeType":"VariableDeclarationStatement","src":"2317:9:5"},{"assignments":[801],"declarations":[{"constant":false,"id":801,"mutability":"mutable","name":"v","nameLocation":"2346:1:5","nodeType":"VariableDeclaration","scope":811,"src":"2340:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":800,"name":"uint8","nodeType":"ElementaryTypeName","src":"2340:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":802,"nodeType":"VariableDeclarationStatement","src":"2340:7:5"},{"AST":{"nativeSrc":"2548:171:5","nodeType":"YulBlock","src":"2548:171:5","statements":[{"nativeSrc":"2566:32:5","nodeType":"YulAssignment","src":"2566:32:5","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2581:9:5","nodeType":"YulIdentifier","src":"2581:9:5"},{"kind":"number","nativeSrc":"2592:4:5","nodeType":"YulLiteral","src":"2592:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2577:3:5","nodeType":"YulIdentifier","src":"2577:3:5"},"nativeSrc":"2577:20:5","nodeType":"YulFunctionCall","src":"2577:20:5"}],"functionName":{"name":"mload","nativeSrc":"2571:5:5","nodeType":"YulIdentifier","src":"2571:5:5"},"nativeSrc":"2571:27:5","nodeType":"YulFunctionCall","src":"2571:27:5"},"variableNames":[{"name":"r","nativeSrc":"2566:1:5","nodeType":"YulIdentifier","src":"2566:1:5"}]},{"nativeSrc":"2615:32:5","nodeType":"YulAssignment","src":"2615:32:5","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2630:9:5","nodeType":"YulIdentifier","src":"2630:9:5"},{"kind":"number","nativeSrc":"2641:4:5","nodeType":"YulLiteral","src":"2641:4:5","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2626:3:5","nodeType":"YulIdentifier","src":"2626:3:5"},"nativeSrc":"2626:20:5","nodeType":"YulFunctionCall","src":"2626:20:5"}],"functionName":{"name":"mload","nativeSrc":"2620:5:5","nodeType":"YulIdentifier","src":"2620:5:5"},"nativeSrc":"2620:27:5","nodeType":"YulFunctionCall","src":"2620:27:5"},"variableNames":[{"name":"s","nativeSrc":"2615:1:5","nodeType":"YulIdentifier","src":"2615:1:5"}]},{"nativeSrc":"2664:41:5","nodeType":"YulAssignment","src":"2664:41:5","value":{"arguments":[{"kind":"number","nativeSrc":"2674:1:5","nodeType":"YulLiteral","src":"2674:1:5","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2687:9:5","nodeType":"YulIdentifier","src":"2687:9:5"},{"kind":"number","nativeSrc":"2698:4:5","nodeType":"YulLiteral","src":"2698:4:5","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2683:3:5","nodeType":"YulIdentifier","src":"2683:3:5"},"nativeSrc":"2683:20:5","nodeType":"YulFunctionCall","src":"2683:20:5"}],"functionName":{"name":"mload","nativeSrc":"2677:5:5","nodeType":"YulIdentifier","src":"2677:5:5"},"nativeSrc":"2677:27:5","nodeType":"YulFunctionCall","src":"2677:27:5"}],"functionName":{"name":"byte","nativeSrc":"2669:4:5","nodeType":"YulIdentifier","src":"2669:4:5"},"nativeSrc":"2669:36:5","nodeType":"YulFunctionCall","src":"2669:36:5"},"variableNames":[{"name":"v","nativeSrc":"2664:1:5","nodeType":"YulIdentifier","src":"2664:1:5"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":795,"isOffset":false,"isSlot":false,"src":"2566:1:5","valueSize":1},{"declaration":798,"isOffset":false,"isSlot":false,"src":"2615:1:5","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"2581:9:5","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"2630:9:5","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"2687:9:5","valueSize":1},{"declaration":801,"isOffset":false,"isSlot":false,"src":"2664:1:5","valueSize":1}],"id":803,"nodeType":"InlineAssembly","src":"2539:180:5"},{"expression":{"arguments":[{"id":805,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"2750:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":806,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"2756:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":807,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"2759:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":808,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"2762:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":804,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[828,908,1016],"referencedDeclaration":1016,"src":"2739:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":789,"id":810,"nodeType":"Return","src":"2732:32:5"}]}}]},"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"857:1267:5","text":" @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":828,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2138:10:5","nodeType":"FunctionDefinition","parameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"hash","nameLocation":"2157:4:5","nodeType":"VariableDeclaration","scope":828,"src":"2149:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":777,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2149:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"signature","nameLocation":"2176:9:5","nodeType":"VariableDeclaration","scope":828,"src":"2163:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":779,"name":"bytes","nodeType":"ElementaryTypeName","src":"2163:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2148:38:5"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":828,"src":"2210:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":828,"src":"2219:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":785,"nodeType":"UserDefinedTypeName","pathNode":{"id":784,"name":"RecoverError","nameLocations":["2219:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"2219:12:5"},"referencedDeclaration":762,"src":"2219:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":828,"src":"2233:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2233:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2209:32:5"},"scope":1102,"src":"2129:766:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":857,"nodeType":"Block","src":"3789:168:5","statements":[{"assignments":[839,842,844],"declarations":[{"constant":false,"id":839,"mutability":"mutable","name":"recovered","nameLocation":"3808:9:5","nodeType":"VariableDeclaration","scope":857,"src":"3800:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"3800:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":842,"mutability":"mutable","name":"error","nameLocation":"3832:5:5","nodeType":"VariableDeclaration","scope":857,"src":"3819:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":841,"nodeType":"UserDefinedTypeName","pathNode":{"id":840,"name":"RecoverError","nameLocations":["3819:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"3819:12:5"},"referencedDeclaration":762,"src":"3819:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":844,"mutability":"mutable","name":"errorArg","nameLocation":"3847:8:5","nodeType":"VariableDeclaration","scope":857,"src":"3839:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":843,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3839:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":849,"initialValue":{"arguments":[{"id":846,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"3870:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":847,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3876:9:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":845,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[828,908,1016],"referencedDeclaration":828,"src":"3859:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3799:87:5"},{"expression":{"arguments":[{"id":851,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"3908:5:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},{"id":852,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"3915:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":850,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"3896:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$762_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3896:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":854,"nodeType":"ExpressionStatement","src":"3896:28:5"},{"expression":{"id":855,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"3941:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":837,"id":856,"nodeType":"Return","src":"3934:16:5"}]},"documentation":{"id":829,"nodeType":"StructuredDocumentation","src":"2901:796:5","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."},"id":858,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3711:7:5","nodeType":"FunctionDefinition","parameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"hash","nameLocation":"3727:4:5","nodeType":"VariableDeclaration","scope":858,"src":"3719:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3719:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"signature","nameLocation":"3746:9:5","nodeType":"VariableDeclaration","scope":858,"src":"3733:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":832,"name":"bytes","nodeType":"ElementaryTypeName","src":"3733:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3718:38:5"},"returnParameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":858,"src":"3780:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":835,"name":"address","nodeType":"ElementaryTypeName","src":"3780:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3779:9:5"},"scope":1102,"src":"3702:255:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":907,"nodeType":"Block","src":"4285:342:5","statements":[{"id":906,"nodeType":"UncheckedBlock","src":"4295:326:5","statements":[{"assignments":[876],"declarations":[{"constant":false,"id":876,"mutability":"mutable","name":"s","nameLocation":"4327:1:5","nodeType":"VariableDeclaration","scope":906,"src":"4319:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4319:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":883,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":877,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4331:2:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4344:66:5","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4336:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":878,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4336:7:5","typeDescriptions":{}}},"id":881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4336:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4331:80:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4319:92:5"},{"assignments":[885],"declarations":[{"constant":false,"id":885,"mutability":"mutable","name":"v","nameLocation":"4528:1:5","nodeType":"VariableDeclaration","scope":906,"src":"4522:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":884,"name":"uint8","nodeType":"ElementaryTypeName","src":"4522:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":898,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":890,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4547:2:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4539:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"4539:7:5","typeDescriptions":{}}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4539:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4554:3:5","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4539:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":894,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4538:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4561:2:5","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4538:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4532:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":886,"name":"uint8","nodeType":"ElementaryTypeName","src":"4532:5:5","typeDescriptions":{}}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4532:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4522:42:5"},{"expression":{"arguments":[{"id":900,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4596:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":901,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"4602:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":902,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"4605:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":903,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"4608:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":899,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[828,908,1016],"referencedDeclaration":1016,"src":"4585:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4585:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":874,"id":905,"nodeType":"Return","src":"4578:32:5"}]}]},"documentation":{"id":859,"nodeType":"StructuredDocumentation","src":"3963:205:5","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"},"id":908,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4182:10:5","nodeType":"FunctionDefinition","parameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":861,"mutability":"mutable","name":"hash","nameLocation":"4201:4:5","nodeType":"VariableDeclaration","scope":908,"src":"4193:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":863,"mutability":"mutable","name":"r","nameLocation":"4215:1:5","nodeType":"VariableDeclaration","scope":908,"src":"4207:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4207:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":865,"mutability":"mutable","name":"vs","nameLocation":"4226:2:5","nodeType":"VariableDeclaration","scope":908,"src":"4218:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4218:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4192:37:5"},"returnParameters":{"id":874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":908,"src":"4253:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"4253:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":908,"src":"4262:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":870,"nodeType":"UserDefinedTypeName","pathNode":{"id":869,"name":"RecoverError","nameLocations":["4262:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"4262:12:5"},"referencedDeclaration":762,"src":"4262:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":908,"src":"4276:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4276:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4252:32:5"},"scope":1102,"src":"4173:454:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":940,"nodeType":"Block","src":"4840:164:5","statements":[{"assignments":[921,924,926],"declarations":[{"constant":false,"id":921,"mutability":"mutable","name":"recovered","nameLocation":"4859:9:5","nodeType":"VariableDeclaration","scope":940,"src":"4851:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":920,"name":"address","nodeType":"ElementaryTypeName","src":"4851:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"error","nameLocation":"4883:5:5","nodeType":"VariableDeclaration","scope":940,"src":"4870:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":923,"nodeType":"UserDefinedTypeName","pathNode":{"id":922,"name":"RecoverError","nameLocations":["4870:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"4870:12:5"},"referencedDeclaration":762,"src":"4870:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"errorArg","nameLocation":"4898:8:5","nodeType":"VariableDeclaration","scope":940,"src":"4890:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4890:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":932,"initialValue":{"arguments":[{"id":928,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"4921:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":929,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"4927:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":930,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"4930:2:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":927,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[828,908,1016],"referencedDeclaration":908,"src":"4910:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4910:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4850:83:5"},{"expression":{"arguments":[{"id":934,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"4955:5:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},{"id":935,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"4962:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":933,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"4943:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$762_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4943:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":937,"nodeType":"ExpressionStatement","src":"4943:28:5"},{"expression":{"id":938,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"4988:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":919,"id":939,"nodeType":"Return","src":"4981:16:5"}]},"documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"4633:116:5","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."},"id":941,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4763:7:5","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"hash","nameLocation":"4779:4:5","nodeType":"VariableDeclaration","scope":941,"src":"4771:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":910,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4771:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"r","nameLocation":"4793:1:5","nodeType":"VariableDeclaration","scope":941,"src":"4785:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4785:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"vs","nameLocation":"4804:2:5","nodeType":"VariableDeclaration","scope":941,"src":"4796:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":914,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4796:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4770:37:5"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":941,"src":"4831:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":917,"name":"address","nodeType":"ElementaryTypeName","src":"4831:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4830:9:5"},"scope":1102,"src":"4754:250:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1015,"nodeType":"Block","src":"5298:1372:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":962,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"6194:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6186:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":960,"name":"uint256","nodeType":"ElementaryTypeName","src":"6186:7:5","typeDescriptions":{}}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6199:66:5","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6186:79:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"IfStatement","src":"6182:164:5","trueBody":{"id":975,"nodeType":"Block","src":"6267:79:5","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6297:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6289:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"6289:7:5","typeDescriptions":{}}},"id":969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6289:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":970,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6301:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6314:17:5","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":761,"src":"6301:30:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},{"id":972,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"6333:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6288:47:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":959,"id":974,"nodeType":"Return","src":"6281:54:5"}]}},{"assignments":[978],"declarations":[{"constant":false,"id":978,"mutability":"mutable","name":"signer","nameLocation":"6448:6:5","nodeType":"VariableDeclaration","scope":1015,"src":"6440:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":977,"name":"address","nodeType":"ElementaryTypeName","src":"6440:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":985,"initialValue":{"arguments":[{"id":980,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"6467:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":981,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"6473:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":982,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"6476:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":983,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"6479:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":979,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6457:9:5","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6457:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6440:41:5"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":986,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"6495:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6513:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6505:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":987,"name":"address","nodeType":"ElementaryTypeName","src":"6505:7:5","typeDescriptions":{}}},"id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6505:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6495:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1005,"nodeType":"IfStatement","src":"6491:113:5","trueBody":{"id":1004,"nodeType":"Block","src":"6517:87:5","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6547:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6539:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":992,"name":"address","nodeType":"ElementaryTypeName","src":"6539:7:5","typeDescriptions":{}}},"id":995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6539:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":996,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6551:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6564:16:5","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":759,"src":"6551:29:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6590:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6582:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6582:7:5","typeDescriptions":{}}},"id":1001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6582:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1002,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6538:55:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":959,"id":1003,"nodeType":"Return","src":"6531:62:5"}]}},{"expression":{"components":[{"id":1006,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"6622:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1007,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6630:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6643:7:5","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":758,"src":"6630:20:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6660:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6652:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1009,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6652:7:5","typeDescriptions":{}}},"id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6652:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1013,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6621:42:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":959,"id":1014,"nodeType":"Return","src":"6614:49:5"}]},"documentation":{"id":942,"nodeType":"StructuredDocumentation","src":"5010:125:5","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1016,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5149:10:5","nodeType":"FunctionDefinition","parameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"mutability":"mutable","name":"hash","nameLocation":"5177:4:5","nodeType":"VariableDeclaration","scope":1016,"src":"5169:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":943,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5169:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":946,"mutability":"mutable","name":"v","nameLocation":"5197:1:5","nodeType":"VariableDeclaration","scope":1016,"src":"5191:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":945,"name":"uint8","nodeType":"ElementaryTypeName","src":"5191:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"r","nameLocation":"5216:1:5","nodeType":"VariableDeclaration","scope":1016,"src":"5208:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5208:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":950,"mutability":"mutable","name":"s","nameLocation":"5235:1:5","nodeType":"VariableDeclaration","scope":1016,"src":"5227:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":949,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5227:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5159:83:5"},"returnParameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1016,"src":"5266:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":952,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1016,"src":"5275:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":955,"nodeType":"UserDefinedTypeName","pathNode":{"id":954,"name":"RecoverError","nameLocations":["5275:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"5275:12:5"},"referencedDeclaration":762,"src":"5275:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1016,"src":"5289:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5289:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5265:32:5"},"scope":1102,"src":"5140:1530:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1051,"nodeType":"Block","src":"6897:166:5","statements":[{"assignments":[1031,1034,1036],"declarations":[{"constant":false,"id":1031,"mutability":"mutable","name":"recovered","nameLocation":"6916:9:5","nodeType":"VariableDeclaration","scope":1051,"src":"6908:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1030,"name":"address","nodeType":"ElementaryTypeName","src":"6908:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"error","nameLocation":"6940:5:5","nodeType":"VariableDeclaration","scope":1051,"src":"6927:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1033,"nodeType":"UserDefinedTypeName","pathNode":{"id":1032,"name":"RecoverError","nameLocations":["6927:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"6927:12:5"},"referencedDeclaration":762,"src":"6927:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1036,"mutability":"mutable","name":"errorArg","nameLocation":"6955:8:5","nodeType":"VariableDeclaration","scope":1051,"src":"6947:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1035,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6947:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1043,"initialValue":{"arguments":[{"id":1038,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"6978:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1039,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"6984:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1040,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"6987:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1041,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"6990:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1037,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[828,908,1016],"referencedDeclaration":1016,"src":"6967:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6967:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$762_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"6907:85:5"},{"expression":{"arguments":[{"id":1045,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"7014:5:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},{"id":1046,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7021:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1044,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"7002:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$762_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7002:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1048,"nodeType":"ExpressionStatement","src":"7002:28:5"},{"expression":{"id":1049,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"7047:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1029,"id":1050,"nodeType":"Return","src":"7040:16:5"}]},"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"6676:122:5","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1052,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6812:7:5","nodeType":"FunctionDefinition","parameters":{"id":1026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"hash","nameLocation":"6828:4:5","nodeType":"VariableDeclaration","scope":1052,"src":"6820:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6820:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1021,"mutability":"mutable","name":"v","nameLocation":"6840:1:5","nodeType":"VariableDeclaration","scope":1052,"src":"6834:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1020,"name":"uint8","nodeType":"ElementaryTypeName","src":"6834:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"r","nameLocation":"6851:1:5","nodeType":"VariableDeclaration","scope":1052,"src":"6843:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6843:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1025,"mutability":"mutable","name":"s","nameLocation":"6862:1:5","nodeType":"VariableDeclaration","scope":1052,"src":"6854:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6854:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6819:45:5"},"returnParameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1052,"src":"6888:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1027,"name":"address","nodeType":"ElementaryTypeName","src":"6888:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6887:9:5"},"scope":1102,"src":"6803:260:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1100,"nodeType":"Block","src":"7268:460:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1061,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"7282:5:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1062,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"7291:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7304:7:5","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":758,"src":"7291:20:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"src":"7282:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1067,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"7378:5:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1068,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"7387:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7400:16:5","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":759,"src":"7387:29:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"src":"7378:38:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1075,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"7483:5:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1076,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"7492:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7505:22:5","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":760,"src":"7492:35:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"src":"7483:44:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1087,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"7617:5:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1088,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"7626:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$762_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7639:17:5","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":761,"src":"7626:30:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"src":"7617:39:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1096,"nodeType":"IfStatement","src":"7613:109:5","trueBody":{"id":1095,"nodeType":"Block","src":"7658:64:5","statements":[{"errorCall":{"arguments":[{"id":1092,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"7702:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1091,"name":"ECDSAInvalidSignatureS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"7679:22:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7679:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1094,"nodeType":"RevertStatement","src":"7672:39:5"}]}},"id":1097,"nodeType":"IfStatement","src":"7479:243:5","trueBody":{"id":1086,"nodeType":"Block","src":"7529:78:5","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1082,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"7586:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7578:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:5","typeDescriptions":{}}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7578:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1079,"name":"ECDSAInvalidSignatureLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"7550:27:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7550:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1085,"nodeType":"RevertStatement","src":"7543:53:5"}]}},"id":1098,"nodeType":"IfStatement","src":"7374:348:5","trueBody":{"id":1074,"nodeType":"Block","src":"7418:55:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1071,"name":"ECDSAInvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"7439:21:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7439:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1073,"nodeType":"RevertStatement","src":"7432:30:5"}]}},"id":1099,"nodeType":"IfStatement","src":"7278:444:5","trueBody":{"id":1066,"nodeType":"Block","src":"7313:55:5","statements":[{"functionReturnParameters":1060,"id":1065,"nodeType":"Return","src":"7327:7:5"}]}}]},"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"7069:122:5","text":" @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."},"id":1101,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"7205:11:5","nodeType":"FunctionDefinition","parameters":{"id":1059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"error","nameLocation":"7230:5:5","nodeType":"VariableDeclaration","scope":1101,"src":"7217:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1055,"nodeType":"UserDefinedTypeName","pathNode":{"id":1054,"name":"RecoverError","nameLocations":["7217:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"7217:12:5"},"referencedDeclaration":762,"src":"7217:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$762","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1058,"mutability":"mutable","name":"errorArg","nameLocation":"7245:8:5","nodeType":"VariableDeclaration","scope":1101,"src":"7237:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1057,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7237:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7216:38:5"},"returnParameters":{"id":1060,"nodeType":"ParameterList","parameters":[],"src":"7268:0:5"},"scope":1102,"src":"7196:532:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1103,"src":"344:7386:5","usedErrors":[765,770,775],"usedEvents":[]}],"src":"112:7619:5"},"id":5},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","exportedSymbols":{"MessageHashUtils":[1176],"Strings":[754]},"id":1177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1104,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1106,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1177,"sourceUnit":755,"src":"149:39:6","symbolAliases":[{"foreign":{"id":1105,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"157:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"190:330:6","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"id":1176,"linearizedBaseContracts":[1176],"name":"MessageHashUtils","nameLocation":"529:16:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1116,"nodeType":"Block","src":"1314:368:6","statements":[{"AST":{"nativeSrc":"1376:300:6","nodeType":"YulBlock","src":"1376:300:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1397:4:6","nodeType":"YulLiteral","src":"1397:4:6","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1403:34:6","nodeType":"YulLiteral","src":"1403:34:6","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1390:6:6","nodeType":"YulIdentifier","src":"1390:6:6"},"nativeSrc":"1390:48:6","nodeType":"YulFunctionCall","src":"1390:48:6"},"nativeSrc":"1390:48:6","nodeType":"YulExpressionStatement","src":"1390:48:6"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1499:4:6","nodeType":"YulLiteral","src":"1499:4:6","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1505:11:6","nodeType":"YulIdentifier","src":"1505:11:6"}],"functionName":{"name":"mstore","nativeSrc":"1492:6:6","nodeType":"YulIdentifier","src":"1492:6:6"},"nativeSrc":"1492:25:6","nodeType":"YulFunctionCall","src":"1492:25:6"},"nativeSrc":"1492:25:6","nodeType":"YulExpressionStatement","src":"1492:25:6"},{"nativeSrc":"1571:31:6","nodeType":"YulAssignment","src":"1571:31:6","value":{"arguments":[{"kind":"number","nativeSrc":"1591:4:6","nodeType":"YulLiteral","src":"1591:4:6","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1597:4:6","nodeType":"YulLiteral","src":"1597:4:6","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1581:9:6","nodeType":"YulIdentifier","src":"1581:9:6"},"nativeSrc":"1581:21:6","nodeType":"YulFunctionCall","src":"1581:21:6"},"variableNames":[{"name":"digest","nativeSrc":"1571:6:6","nodeType":"YulIdentifier","src":"1571:6:6"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1113,"isOffset":false,"isSlot":false,"src":"1571:6:6","valueSize":1},{"declaration":1110,"isOffset":false,"isSlot":false,"src":"1505:11:6","valueSize":1}],"id":1115,"nodeType":"InlineAssembly","src":"1367:309:6"}]},"documentation":{"id":1108,"nodeType":"StructuredDocumentation","src":"552:665:6","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"id":1117,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1231:22:6","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"messageHash","nameLocation":"1262:11:6","nodeType":"VariableDeclaration","scope":1117,"src":"1254:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1253:21:6"},"returnParameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"mutability":"mutable","name":"digest","nameLocation":"1306:6:6","nodeType":"VariableDeclaration","scope":1117,"src":"1298:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1298:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1297:16:6"},"scope":1176,"src":"1222:460:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1142,"nodeType":"Block","src":"2234:143:6","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2286:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":1134,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"2343:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2351:6:6","memberName":"length","nodeType":"MemberAccess","src":"2343:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1132,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"2326:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$754_$","typeString":"type(library Strings)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2334:8:6","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":567,"src":"2326:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2326:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2320:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1130,"name":"bytes","nodeType":"ElementaryTypeName","src":"2320:5:6","typeDescriptions":{}}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1138,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"2361:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2273:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1126,"name":"bytes","nodeType":"ElementaryTypeName","src":"2273:5:6","typeDescriptions":{}}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2279:6:6","memberName":"concat","nodeType":"MemberAccess","src":"2273:12:6","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2273:96:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1125,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2263:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:107:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1124,"id":1141,"nodeType":"Return","src":"2244:126:6"}]},"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"1688:455:6","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"id":1143,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2157:22:6","nodeType":"FunctionDefinition","parameters":{"id":1121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"mutability":"mutable","name":"message","nameLocation":"2193:7:6","nodeType":"VariableDeclaration","scope":1143,"src":"2180:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1119,"name":"bytes","nodeType":"ElementaryTypeName","src":"2180:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2179:22:6"},"returnParameters":{"id":1124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1143,"src":"2225:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1122,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:9:6"},"scope":1176,"src":"2148:229:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1162,"nodeType":"Block","src":"2831:80:6","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2875:10:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1157,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"2887:9:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1158,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"2898:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1154,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2858:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2862:12:6","memberName":"encodePacked","nodeType":"MemberAccess","src":"2858:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1153,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2848:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2848:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1152,"id":1161,"nodeType":"Return","src":"2841:63:6"}]},"documentation":{"id":1144,"nodeType":"StructuredDocumentation","src":"2383:332:6","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"id":1163,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2729:31:6","nodeType":"FunctionDefinition","parameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"validator","nameLocation":"2769:9:6","nodeType":"VariableDeclaration","scope":1163,"src":"2761:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1145,"name":"address","nodeType":"ElementaryTypeName","src":"2761:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1148,"mutability":"mutable","name":"data","nameLocation":"2793:4:6","nodeType":"VariableDeclaration","scope":1163,"src":"2780:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1147,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2760:38:6"},"returnParameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"2822:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2822:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2821:9:6"},"scope":1176,"src":"2720:191:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1174,"nodeType":"Block","src":"3462:292:6","statements":[{"AST":{"nativeSrc":"3524:224:6","nodeType":"YulBlock","src":"3524:224:6","statements":[{"nativeSrc":"3538:22:6","nodeType":"YulVariableDeclaration","src":"3538:22:6","value":{"arguments":[{"kind":"number","nativeSrc":"3555:4:6","nodeType":"YulLiteral","src":"3555:4:6","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3549:5:6","nodeType":"YulIdentifier","src":"3549:5:6"},"nativeSrc":"3549:11:6","nodeType":"YulFunctionCall","src":"3549:11:6"},"variables":[{"name":"ptr","nativeSrc":"3542:3:6","nodeType":"YulTypedName","src":"3542:3:6","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"3580:3:6","nodeType":"YulIdentifier","src":"3580:3:6"},{"hexValue":"1901","kind":"string","nativeSrc":"3585:10:6","nodeType":"YulLiteral","src":"3585:10:6","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"3573:6:6","nodeType":"YulIdentifier","src":"3573:6:6"},"nativeSrc":"3573:23:6","nodeType":"YulFunctionCall","src":"3573:23:6"},"nativeSrc":"3573:23:6","nodeType":"YulExpressionStatement","src":"3573:23:6"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3620:3:6","nodeType":"YulIdentifier","src":"3620:3:6"},{"kind":"number","nativeSrc":"3625:4:6","nodeType":"YulLiteral","src":"3625:4:6","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"3616:3:6","nodeType":"YulIdentifier","src":"3616:3:6"},"nativeSrc":"3616:14:6","nodeType":"YulFunctionCall","src":"3616:14:6"},{"name":"domainSeparator","nativeSrc":"3632:15:6","nodeType":"YulIdentifier","src":"3632:15:6"}],"functionName":{"name":"mstore","nativeSrc":"3609:6:6","nodeType":"YulIdentifier","src":"3609:6:6"},"nativeSrc":"3609:39:6","nodeType":"YulFunctionCall","src":"3609:39:6"},"nativeSrc":"3609:39:6","nodeType":"YulExpressionStatement","src":"3609:39:6"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3672:3:6","nodeType":"YulIdentifier","src":"3672:3:6"},{"kind":"number","nativeSrc":"3677:4:6","nodeType":"YulLiteral","src":"3677:4:6","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3668:3:6","nodeType":"YulIdentifier","src":"3668:3:6"},"nativeSrc":"3668:14:6","nodeType":"YulFunctionCall","src":"3668:14:6"},{"name":"structHash","nativeSrc":"3684:10:6","nodeType":"YulIdentifier","src":"3684:10:6"}],"functionName":{"name":"mstore","nativeSrc":"3661:6:6","nodeType":"YulIdentifier","src":"3661:6:6"},"nativeSrc":"3661:34:6","nodeType":"YulFunctionCall","src":"3661:34:6"},"nativeSrc":"3661:34:6","nodeType":"YulExpressionStatement","src":"3661:34:6"},{"nativeSrc":"3708:30:6","nodeType":"YulAssignment","src":"3708:30:6","value":{"arguments":[{"name":"ptr","nativeSrc":"3728:3:6","nodeType":"YulIdentifier","src":"3728:3:6"},{"kind":"number","nativeSrc":"3733:4:6","nodeType":"YulLiteral","src":"3733:4:6","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"3718:9:6","nodeType":"YulIdentifier","src":"3718:9:6"},"nativeSrc":"3718:20:6","nodeType":"YulFunctionCall","src":"3718:20:6"},"variableNames":[{"name":"digest","nativeSrc":"3708:6:6","nodeType":"YulIdentifier","src":"3708:6:6"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1171,"isOffset":false,"isSlot":false,"src":"3708:6:6","valueSize":1},{"declaration":1166,"isOffset":false,"isSlot":false,"src":"3632:15:6","valueSize":1},{"declaration":1168,"isOffset":false,"isSlot":false,"src":"3684:10:6","valueSize":1}],"id":1173,"nodeType":"InlineAssembly","src":"3515:233:6"}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"2917:431:6","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"id":1175,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3362:15:6","nodeType":"FunctionDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"domainSeparator","nameLocation":"3386:15:6","nodeType":"VariableDeclaration","scope":1175,"src":"3378:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3378:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"structHash","nameLocation":"3411:10:6","nodeType":"VariableDeclaration","scope":1175,"src":"3403:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3403:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3377:45:6"},"returnParameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"digest","nameLocation":"3454:6:6","nodeType":"VariableDeclaration","scope":1175,"src":"3446:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3446:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3445:16:6"},"scope":1176,"src":"3353:401:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1177,"src":"521:3235:6","usedErrors":[],"usedEvents":[]}],"src":"123:3634:6"},"id":6},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2230]},"id":2231,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1178,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"129:73:7","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2230,"linearizedBaseContracts":[2230],"name":"Math","nameLocation":"211:4:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"222:50:7","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":1182,"name":"MathOverflowedMulDiv","nameLocation":"283:20:7","nodeType":"ErrorDefinition","parameters":{"id":1181,"nodeType":"ParameterList","parameters":[],"src":"303:2:7"},"src":"277:29:7"},{"canonicalName":"Math.Rounding","id":1187,"members":[{"id":1183,"name":"Floor","nameLocation":"336:5:7","nodeType":"EnumValue","src":"336:5:7"},{"id":1184,"name":"Ceil","nameLocation":"379:4:7","nodeType":"EnumValue","src":"379:4:7"},{"id":1185,"name":"Trunc","nameLocation":"421:5:7","nodeType":"EnumValue","src":"421:5:7"},{"id":1186,"name":"Expand","nameLocation":"451:6:7","nodeType":"EnumValue","src":"451:6:7"}],"name":"Rounding","nameLocation":"317:8:7","nodeType":"EnumDefinition","src":"312:169:7"},{"body":{"id":1218,"nodeType":"Block","src":"661:140:7","statements":[{"id":1217,"nodeType":"UncheckedBlock","src":"671:124:7","statements":[{"assignments":[1200],"declarations":[{"constant":false,"id":1200,"mutability":"mutable","name":"c","nameLocation":"703:1:7","nodeType":"VariableDeclaration","scope":1217,"src":"695:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1204,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1201,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"707:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1202,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"711:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1205,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"730:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1206,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"734:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1212,"nodeType":"IfStatement","src":"726:28:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1210,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1198,"id":1211,"nodeType":"Return","src":"737:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1214,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"782:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1215,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1198,"id":1216,"nodeType":"Return","src":"768:16:7"}]}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"487:93:7","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":1219,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:7","nodeType":"FunctionDefinition","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"a","nameLocation":"609:1:7","nodeType":"VariableDeclaration","scope":1219,"src":"601:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1189,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"b","nameLocation":"620:1:7","nodeType":"VariableDeclaration","scope":1219,"src":"612:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:7"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1219,"src":"646:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1194,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1219,"src":"652:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1196,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:7"},"scope":2230,"src":"585:216:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1246,"nodeType":"Block","src":"984:113:7","statements":[{"id":1245,"nodeType":"UncheckedBlock","src":"994:97:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1022:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1232,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"1026:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1238,"nodeType":"IfStatement","src":"1018:28:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1230,"id":1237,"nodeType":"Return","src":"1029:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1240,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"1074:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1241,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1078:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1230,"id":1244,"nodeType":"Return","src":"1060:20:7"}]}]},"documentation":{"id":1220,"nodeType":"StructuredDocumentation","src":"807:96:7","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":1247,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:7","nodeType":"FunctionDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1222,"mutability":"mutable","name":"a","nameLocation":"932:1:7","nodeType":"VariableDeclaration","scope":1247,"src":"924:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1221,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1224,"mutability":"mutable","name":"b","nameLocation":"943:1:7","nodeType":"VariableDeclaration","scope":1247,"src":"935:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:7"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1247,"src":"969:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1226,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1247,"src":"975:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1228,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:7"},"scope":2230,"src":"908:189:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1288,"nodeType":"Block","src":"1283:417:7","statements":[{"id":1287,"nodeType":"UncheckedBlock","src":"1293:401:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1259,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"1551:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1266,"nodeType":"IfStatement","src":"1547:28:7","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1264,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1258,"id":1265,"nodeType":"Return","src":"1559:16:7"}},{"assignments":[1268],"declarations":[{"constant":false,"id":1268,"mutability":"mutable","name":"c","nameLocation":"1597:1:7","nodeType":"VariableDeclaration","scope":1287,"src":"1589:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1267,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1272,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"1601:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1270,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"1605:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1273,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"1624:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1274,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"1628:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1276,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"1633:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1282,"nodeType":"IfStatement","src":"1620:33:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1258,"id":1281,"nodeType":"Return","src":"1636:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1284,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"1681:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1285,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1258,"id":1286,"nodeType":"Return","src":"1667:16:7"}]}]},"documentation":{"id":1248,"nodeType":"StructuredDocumentation","src":"1103:99:7","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":1289,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:7","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"a","nameLocation":"1231:1:7","nodeType":"VariableDeclaration","scope":1289,"src":"1223:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1249,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1252,"mutability":"mutable","name":"b","nameLocation":"1242:1:7","nodeType":"VariableDeclaration","scope":1289,"src":"1234:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:7"},"returnParameters":{"id":1258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1289,"src":"1268:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1254,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1289,"src":"1274:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1256,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:7"},"scope":2230,"src":"1207:493:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1316,"nodeType":"Block","src":"1887:114:7","statements":[{"id":1315,"nodeType":"UncheckedBlock","src":"1897:98:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1301,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"1925:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1308,"nodeType":"IfStatement","src":"1921:29:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1306,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1300,"id":1307,"nodeType":"Return","src":"1933:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1310,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"1978:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1311,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"1982:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1300,"id":1314,"nodeType":"Return","src":"1964:20:7"}]}]},"documentation":{"id":1290,"nodeType":"StructuredDocumentation","src":"1706:100:7","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":1317,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:7","nodeType":"FunctionDefinition","parameters":{"id":1295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"a","nameLocation":"1835:1:7","nodeType":"VariableDeclaration","scope":1317,"src":"1827:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1291,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1294,"mutability":"mutable","name":"b","nameLocation":"1846:1:7","nodeType":"VariableDeclaration","scope":1317,"src":"1838:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:7"},"returnParameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1317,"src":"1872:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1296,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1317,"src":"1878:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:7"},"scope":2230,"src":"1811:190:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1344,"nodeType":"Block","src":"2198:114:7","statements":[{"id":1343,"nodeType":"UncheckedBlock","src":"2208:98:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1329,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"2236:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1336,"nodeType":"IfStatement","src":"2232:29:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1334,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1328,"id":1335,"nodeType":"Return","src":"2244:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1338,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"2289:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1339,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"2293:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1328,"id":1342,"nodeType":"Return","src":"2275:20:7"}]}]},"documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"2007:110:7","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:7","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"a","nameLocation":"2146:1:7","nodeType":"VariableDeclaration","scope":1345,"src":"2138:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"b","nameLocation":"2157:1:7","nodeType":"VariableDeclaration","scope":1345,"src":"2149:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1321,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:7"},"returnParameters":{"id":1328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1345,"src":"2183:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1324,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1345,"src":"2189:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1326,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:7"},"scope":2230,"src":"2122:190:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1362,"nodeType":"Block","src":"2449:37:7","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1355,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"2466:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1356,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"2470:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1359,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"2478:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:7","trueExpression":{"id":1358,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"2474:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1354,"id":1361,"nodeType":"Return","src":"2459:20:7"}]},"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"2318:59:7","text":" @dev Returns the largest of two numbers."},"id":1363,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:7","nodeType":"FunctionDefinition","parameters":{"id":1351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"a","nameLocation":"2403:1:7","nodeType":"VariableDeclaration","scope":1363,"src":"2395:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1350,"mutability":"mutable","name":"b","nameLocation":"2414:1:7","nodeType":"VariableDeclaration","scope":1363,"src":"2406:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1349,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:7"},"returnParameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1363,"src":"2440:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:7"},"scope":2230,"src":"2382:104:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1380,"nodeType":"Block","src":"2624:37:7","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1373,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"2641:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1374,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"2645:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1377,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"2653:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:7","trueExpression":{"id":1376,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"2649:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1372,"id":1379,"nodeType":"Return","src":"2634:20:7"}]},"documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"2492:60:7","text":" @dev Returns the smallest of two numbers."},"id":1381,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:7","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"a","nameLocation":"2578:1:7","nodeType":"VariableDeclaration","scope":1381,"src":"2570:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"b","nameLocation":"2589:1:7","nodeType":"VariableDeclaration","scope":1381,"src":"2581:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:7"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1381,"src":"2615:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:7"},"scope":2230,"src":"2557:104:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1403,"nodeType":"Block","src":"2845:82:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1391,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"2900:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1392,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"2904:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1394,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1395,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"2910:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1396,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"2914:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1390,"id":1402,"nodeType":"Return","src":"2892:28:7"}]},"documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"2667:102:7","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1404,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:7","nodeType":"FunctionDefinition","parameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"mutability":"mutable","name":"a","nameLocation":"2799:1:7","nodeType":"VariableDeclaration","scope":1404,"src":"2791:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1386,"mutability":"mutable","name":"b","nameLocation":"2810:1:7","nodeType":"VariableDeclaration","scope":1404,"src":"2802:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:7"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1404,"src":"2836:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:7"},"scope":2230,"src":"2774:153:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1437,"nodeType":"Block","src":"3219:260:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1414,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"3233:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1422,"nodeType":"IfStatement","src":"3229:127:7","trueBody":{"id":1421,"nodeType":"Block","src":"3241:115:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1417,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"3340:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1418,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"3344:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1413,"id":1420,"nodeType":"Return","src":"3333:12:7"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1423,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"3444:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1427,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"3458:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1430,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1431,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"3467:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:7","trueExpression":{"hexValue":"30","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1413,"id":1436,"nodeType":"Return","src":"3437:35:7"}]},"documentation":{"id":1405,"nodeType":"StructuredDocumentation","src":"2933:210:7","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":1438,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:7","nodeType":"FunctionDefinition","parameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"mutability":"mutable","name":"a","nameLocation":"3173:1:7","nodeType":"VariableDeclaration","scope":1438,"src":"3165:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1406,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1409,"mutability":"mutable","name":"b","nameLocation":"3184:1:7","nodeType":"VariableDeclaration","scope":1438,"src":"3176:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1408,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:7"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1438,"src":"3210:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:7"},"scope":2230,"src":"3148:331:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1563,"nodeType":"Block","src":"3901:4018:7","statements":[{"id":1562,"nodeType":"UncheckedBlock","src":"3911:4002:7","statements":[{"assignments":[1451],"declarations":[{"constant":false,"id":1451,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:7","nodeType":"VariableDeclaration","scope":1562,"src":"4232:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1450,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1455,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1452,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"4248:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1453,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"4252:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:7"},{"assignments":[1457],"declarations":[{"constant":false,"id":1457,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:7","nodeType":"VariableDeclaration","scope":1562,"src":"4312:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1456,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1458,"nodeType":"VariableDeclarationStatement","src":"4312:13:7"},{"AST":{"nativeSrc":"4392:122:7","nodeType":"YulBlock","src":"4392:122:7","statements":[{"nativeSrc":"4410:30:7","nodeType":"YulVariableDeclaration","src":"4410:30:7","value":{"arguments":[{"name":"x","nativeSrc":"4427:1:7","nodeType":"YulIdentifier","src":"4427:1:7"},{"name":"y","nativeSrc":"4430:1:7","nodeType":"YulIdentifier","src":"4430:1:7"},{"arguments":[{"kind":"number","nativeSrc":"4437:1:7","nodeType":"YulLiteral","src":"4437:1:7","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4433:3:7","nodeType":"YulIdentifier","src":"4433:3:7"},"nativeSrc":"4433:6:7","nodeType":"YulFunctionCall","src":"4433:6:7"}],"functionName":{"name":"mulmod","nativeSrc":"4420:6:7","nodeType":"YulIdentifier","src":"4420:6:7"},"nativeSrc":"4420:20:7","nodeType":"YulFunctionCall","src":"4420:20:7"},"variables":[{"name":"mm","nativeSrc":"4414:2:7","nodeType":"YulTypedName","src":"4414:2:7","type":""}]},{"nativeSrc":"4457:43:7","nodeType":"YulAssignment","src":"4457:43:7","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"4474:2:7","nodeType":"YulIdentifier","src":"4474:2:7"},{"name":"prod0","nativeSrc":"4478:5:7","nodeType":"YulIdentifier","src":"4478:5:7"}],"functionName":{"name":"sub","nativeSrc":"4470:3:7","nodeType":"YulIdentifier","src":"4470:3:7"},"nativeSrc":"4470:14:7","nodeType":"YulFunctionCall","src":"4470:14:7"},{"arguments":[{"name":"mm","nativeSrc":"4489:2:7","nodeType":"YulIdentifier","src":"4489:2:7"},{"name":"prod0","nativeSrc":"4493:5:7","nodeType":"YulIdentifier","src":"4493:5:7"}],"functionName":{"name":"lt","nativeSrc":"4486:2:7","nodeType":"YulIdentifier","src":"4486:2:7"},"nativeSrc":"4486:13:7","nodeType":"YulFunctionCall","src":"4486:13:7"}],"functionName":{"name":"sub","nativeSrc":"4466:3:7","nodeType":"YulIdentifier","src":"4466:3:7"},"nativeSrc":"4466:34:7","nodeType":"YulFunctionCall","src":"4466:34:7"},"variableNames":[{"name":"prod1","nativeSrc":"4457:5:7","nodeType":"YulIdentifier","src":"4457:5:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1451,"isOffset":false,"isSlot":false,"src":"4478:5:7","valueSize":1},{"declaration":1451,"isOffset":false,"isSlot":false,"src":"4493:5:7","valueSize":1},{"declaration":1457,"isOffset":false,"isSlot":false,"src":"4457:5:7","valueSize":1},{"declaration":1441,"isOffset":false,"isSlot":false,"src":"4427:1:7","valueSize":1},{"declaration":1443,"isOffset":false,"isSlot":false,"src":"4430:1:7","valueSize":1}],"id":1459,"nodeType":"InlineAssembly","src":"4383:131:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1460,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"4595:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1468,"nodeType":"IfStatement","src":"4591:368:7","trueBody":{"id":1467,"nodeType":"Block","src":"4607:352:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1463,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"4925:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1464,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"4933:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1449,"id":1466,"nodeType":"Return","src":"4918:26:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1469,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"5065:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1470,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"5080:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1476,"nodeType":"IfStatement","src":"5061:88:7","trueBody":{"id":1475,"nodeType":"Block","src":"5087:62:7","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1472,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"5112:20:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1474,"nodeType":"RevertStatement","src":"5105:29:7"}]}},{"assignments":[1478],"declarations":[{"constant":false,"id":1478,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:7","nodeType":"VariableDeclaration","scope":1562,"src":"5404:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1477,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1479,"nodeType":"VariableDeclarationStatement","src":"5404:17:7"},{"AST":{"nativeSrc":"5444:291:7","nodeType":"YulBlock","src":"5444:291:7","statements":[{"nativeSrc":"5513:38:7","nodeType":"YulAssignment","src":"5513:38:7","value":{"arguments":[{"name":"x","nativeSrc":"5533:1:7","nodeType":"YulIdentifier","src":"5533:1:7"},{"name":"y","nativeSrc":"5536:1:7","nodeType":"YulIdentifier","src":"5536:1:7"},{"name":"denominator","nativeSrc":"5539:11:7","nodeType":"YulIdentifier","src":"5539:11:7"}],"functionName":{"name":"mulmod","nativeSrc":"5526:6:7","nodeType":"YulIdentifier","src":"5526:6:7"},"nativeSrc":"5526:25:7","nodeType":"YulFunctionCall","src":"5526:25:7"},"variableNames":[{"name":"remainder","nativeSrc":"5513:9:7","nodeType":"YulIdentifier","src":"5513:9:7"}]},{"nativeSrc":"5633:41:7","nodeType":"YulAssignment","src":"5633:41:7","value":{"arguments":[{"name":"prod1","nativeSrc":"5646:5:7","nodeType":"YulIdentifier","src":"5646:5:7"},{"arguments":[{"name":"remainder","nativeSrc":"5656:9:7","nodeType":"YulIdentifier","src":"5656:9:7"},{"name":"prod0","nativeSrc":"5667:5:7","nodeType":"YulIdentifier","src":"5667:5:7"}],"functionName":{"name":"gt","nativeSrc":"5653:2:7","nodeType":"YulIdentifier","src":"5653:2:7"},"nativeSrc":"5653:20:7","nodeType":"YulFunctionCall","src":"5653:20:7"}],"functionName":{"name":"sub","nativeSrc":"5642:3:7","nodeType":"YulIdentifier","src":"5642:3:7"},"nativeSrc":"5642:32:7","nodeType":"YulFunctionCall","src":"5642:32:7"},"variableNames":[{"name":"prod1","nativeSrc":"5633:5:7","nodeType":"YulIdentifier","src":"5633:5:7"}]},{"nativeSrc":"5691:30:7","nodeType":"YulAssignment","src":"5691:30:7","value":{"arguments":[{"name":"prod0","nativeSrc":"5704:5:7","nodeType":"YulIdentifier","src":"5704:5:7"},{"name":"remainder","nativeSrc":"5711:9:7","nodeType":"YulIdentifier","src":"5711:9:7"}],"functionName":{"name":"sub","nativeSrc":"5700:3:7","nodeType":"YulIdentifier","src":"5700:3:7"},"nativeSrc":"5700:21:7","nodeType":"YulFunctionCall","src":"5700:21:7"},"variableNames":[{"name":"prod0","nativeSrc":"5691:5:7","nodeType":"YulIdentifier","src":"5691:5:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1445,"isOffset":false,"isSlot":false,"src":"5539:11:7","valueSize":1},{"declaration":1451,"isOffset":false,"isSlot":false,"src":"5667:5:7","valueSize":1},{"declaration":1451,"isOffset":false,"isSlot":false,"src":"5691:5:7","valueSize":1},{"declaration":1451,"isOffset":false,"isSlot":false,"src":"5704:5:7","valueSize":1},{"declaration":1457,"isOffset":false,"isSlot":false,"src":"5633:5:7","valueSize":1},{"declaration":1457,"isOffset":false,"isSlot":false,"src":"5646:5:7","valueSize":1},{"declaration":1478,"isOffset":false,"isSlot":false,"src":"5513:9:7","valueSize":1},{"declaration":1478,"isOffset":false,"isSlot":false,"src":"5656:9:7","valueSize":1},{"declaration":1478,"isOffset":false,"isSlot":false,"src":"5711:9:7","valueSize":1},{"declaration":1441,"isOffset":false,"isSlot":false,"src":"5533:1:7","valueSize":1},{"declaration":1443,"isOffset":false,"isSlot":false,"src":"5536:1:7","valueSize":1}],"id":1480,"nodeType":"InlineAssembly","src":"5435:300:7"},{"assignments":[1482],"declarations":[{"constant":false,"id":1482,"mutability":"mutable","name":"twos","nameLocation":"5947:4:7","nodeType":"VariableDeclaration","scope":1562,"src":"5939:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1489,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1483,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"5954:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1485,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"5973:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1487,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:7"},{"AST":{"nativeSrc":"6008:362:7","nodeType":"YulBlock","src":"6008:362:7","statements":[{"nativeSrc":"6073:37:7","nodeType":"YulAssignment","src":"6073:37:7","value":{"arguments":[{"name":"denominator","nativeSrc":"6092:11:7","nodeType":"YulIdentifier","src":"6092:11:7"},{"name":"twos","nativeSrc":"6105:4:7","nodeType":"YulIdentifier","src":"6105:4:7"}],"functionName":{"name":"div","nativeSrc":"6088:3:7","nodeType":"YulIdentifier","src":"6088:3:7"},"nativeSrc":"6088:22:7","nodeType":"YulFunctionCall","src":"6088:22:7"},"variableNames":[{"name":"denominator","nativeSrc":"6073:11:7","nodeType":"YulIdentifier","src":"6073:11:7"}]},{"nativeSrc":"6177:25:7","nodeType":"YulAssignment","src":"6177:25:7","value":{"arguments":[{"name":"prod0","nativeSrc":"6190:5:7","nodeType":"YulIdentifier","src":"6190:5:7"},{"name":"twos","nativeSrc":"6197:4:7","nodeType":"YulIdentifier","src":"6197:4:7"}],"functionName":{"name":"div","nativeSrc":"6186:3:7","nodeType":"YulIdentifier","src":"6186:3:7"},"nativeSrc":"6186:16:7","nodeType":"YulFunctionCall","src":"6186:16:7"},"variableNames":[{"name":"prod0","nativeSrc":"6177:5:7","nodeType":"YulIdentifier","src":"6177:5:7"}]},{"nativeSrc":"6317:39:7","nodeType":"YulAssignment","src":"6317:39:7","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6337:1:7","nodeType":"YulLiteral","src":"6337:1:7","type":"","value":"0"},{"name":"twos","nativeSrc":"6340:4:7","nodeType":"YulIdentifier","src":"6340:4:7"}],"functionName":{"name":"sub","nativeSrc":"6333:3:7","nodeType":"YulIdentifier","src":"6333:3:7"},"nativeSrc":"6333:12:7","nodeType":"YulFunctionCall","src":"6333:12:7"},{"name":"twos","nativeSrc":"6347:4:7","nodeType":"YulIdentifier","src":"6347:4:7"}],"functionName":{"name":"div","nativeSrc":"6329:3:7","nodeType":"YulIdentifier","src":"6329:3:7"},"nativeSrc":"6329:23:7","nodeType":"YulFunctionCall","src":"6329:23:7"},{"kind":"number","nativeSrc":"6354:1:7","nodeType":"YulLiteral","src":"6354:1:7","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6325:3:7","nodeType":"YulIdentifier","src":"6325:3:7"},"nativeSrc":"6325:31:7","nodeType":"YulFunctionCall","src":"6325:31:7"},"variableNames":[{"name":"twos","nativeSrc":"6317:4:7","nodeType":"YulIdentifier","src":"6317:4:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1445,"isOffset":false,"isSlot":false,"src":"6073:11:7","valueSize":1},{"declaration":1445,"isOffset":false,"isSlot":false,"src":"6092:11:7","valueSize":1},{"declaration":1451,"isOffset":false,"isSlot":false,"src":"6177:5:7","valueSize":1},{"declaration":1451,"isOffset":false,"isSlot":false,"src":"6190:5:7","valueSize":1},{"declaration":1482,"isOffset":false,"isSlot":false,"src":"6105:4:7","valueSize":1},{"declaration":1482,"isOffset":false,"isSlot":false,"src":"6197:4:7","valueSize":1},{"declaration":1482,"isOffset":false,"isSlot":false,"src":"6317:4:7","valueSize":1},{"declaration":1482,"isOffset":false,"isSlot":false,"src":"6340:4:7","valueSize":1},{"declaration":1482,"isOffset":false,"isSlot":false,"src":"6347:4:7","valueSize":1}],"id":1490,"nodeType":"InlineAssembly","src":"5999:371:7"},{"expression":{"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1491,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"6436:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1492,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"6445:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1493,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"6453:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1496,"nodeType":"ExpressionStatement","src":"6436:21:7"},{"assignments":[1498],"declarations":[{"constant":false,"id":1498,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:7","nodeType":"VariableDeclaration","scope":1562,"src":"6775:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1505,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1500,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6798:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1502,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:7"},{"expression":{"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1506,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7031:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1508,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7046:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1509,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7060:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1513,"nodeType":"ExpressionStatement","src":"7031:36:7"},{"expression":{"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1514,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7100:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1516,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7115:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1517,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7129:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1521,"nodeType":"ExpressionStatement","src":"7100:36:7"},{"expression":{"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1522,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7170:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1524,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7185:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1525,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7199:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1529,"nodeType":"ExpressionStatement","src":"7170:36:7"},{"expression":{"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1530,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7240:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1532,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7255:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1533,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7269:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1537,"nodeType":"ExpressionStatement","src":"7240:36:7"},{"expression":{"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1538,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7310:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1540,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7325:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1541,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7339:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1545,"nodeType":"ExpressionStatement","src":"7310:36:7"},{"expression":{"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1546,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7381:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1548,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7396:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1549,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7410:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1553,"nodeType":"ExpressionStatement","src":"7381:36:7"},{"expression":{"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1554,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"7851:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1555,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"7860:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1556,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"7868:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1559,"nodeType":"ExpressionStatement","src":"7851:24:7"},{"expression":{"id":1560,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"7896:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1449,"id":1561,"nodeType":"Return","src":"7889:13:7"}]}]},"documentation":{"id":1439,"nodeType":"StructuredDocumentation","src":"3485:313:7","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":1564,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:7","nodeType":"FunctionDefinition","parameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1441,"mutability":"mutable","name":"x","nameLocation":"3827:1:7","nodeType":"VariableDeclaration","scope":1564,"src":"3819:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1440,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1443,"mutability":"mutable","name":"y","nameLocation":"3838:1:7","nodeType":"VariableDeclaration","scope":1564,"src":"3830:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1442,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1445,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:7","nodeType":"VariableDeclaration","scope":1564,"src":"3841:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1444,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:7"},"returnParameters":{"id":1449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1448,"mutability":"mutable","name":"result","nameLocation":"3893:6:7","nodeType":"VariableDeclaration","scope":1564,"src":"3885:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1447,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:7"},"scope":2230,"src":"3803:4116:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1606,"nodeType":"Block","src":"8161:192:7","statements":[{"assignments":[1580],"declarations":[{"constant":false,"id":1580,"mutability":"mutable","name":"result","nameLocation":"8179:6:7","nodeType":"VariableDeclaration","scope":1606,"src":"8171:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1579,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1586,"initialValue":{"arguments":[{"id":1582,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"8195:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1583,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"8198:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1584,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"8201:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1581,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1564,1607],"referencedDeclaration":1564,"src":"8188:6:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:7"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1588,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"8244:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}],"id":1587,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"8227:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1187_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1591,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"8264:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1592,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"8267:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1593,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"8270:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1590,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:7","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1603,"nodeType":"IfStatement","src":"8223:101:7","trueBody":{"id":1602,"nodeType":"Block","src":"8288:36:7","statements":[{"expression":{"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1598,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"8302:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1601,"nodeType":"ExpressionStatement","src":"8302:11:7"}]}},{"expression":{"id":1604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"8340:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1578,"id":1605,"nodeType":"Return","src":"8333:13:7"}]},"documentation":{"id":1565,"nodeType":"StructuredDocumentation","src":"7925:121:7","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1607,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:7","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"mutability":"mutable","name":"x","nameLocation":"8075:1:7","nodeType":"VariableDeclaration","scope":1607,"src":"8067:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1566,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1569,"mutability":"mutable","name":"y","nameLocation":"8086:1:7","nodeType":"VariableDeclaration","scope":1607,"src":"8078:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1568,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1571,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:7","nodeType":"VariableDeclaration","scope":1607,"src":"8089:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1570,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1574,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:7","nodeType":"VariableDeclaration","scope":1607,"src":"8110:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"},"typeName":{"id":1573,"nodeType":"UserDefinedTypeName","pathNode":{"id":1572,"name":"Rounding","nameLocations":["8110:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1187,"src":"8110:8:7"},"referencedDeclaration":1187,"src":"8110:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:7"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1607,"src":"8152:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1576,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:7"},"scope":2230,"src":"8051:302:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1718,"nodeType":"Block","src":"8644:1585:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1615,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"8658:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1621,"nodeType":"IfStatement","src":"8654:45:7","trueBody":{"id":1620,"nodeType":"Block","src":"8666:33:7","statements":[{"expression":{"hexValue":"30","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1614,"id":1619,"nodeType":"Return","src":"8680:8:7"}]}},{"assignments":[1623],"declarations":[{"constant":false,"id":1623,"mutability":"mutable","name":"result","nameLocation":"9386:6:7","nodeType":"VariableDeclaration","scope":1718,"src":"9378:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1632,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1626,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"9406:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1625,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1886,1921],"referencedDeclaration":1886,"src":"9401:4:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1630,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:7"},{"id":1717,"nodeType":"UncheckedBlock","src":"9815:408:7","statements":[{"expression":{"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1633,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9839:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9849:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1635,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"9858:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1636,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9862:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1639,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1643,"nodeType":"ExpressionStatement","src":"9839:35:7"},{"expression":{"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9888:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9898:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1646,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"9907:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1647,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9911:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1650,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1654,"nodeType":"ExpressionStatement","src":"9888:35:7"},{"expression":{"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1655,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9937:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1656,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9947:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1657,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"9956:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1658,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9960:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1661,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1665,"nodeType":"ExpressionStatement","src":"9937:35:7"},{"expression":{"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1666,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9986:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1667,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"9996:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1668,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"10005:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1669,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10009:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1672,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1676,"nodeType":"ExpressionStatement","src":"9986:35:7"},{"expression":{"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1677,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10035:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10045:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1679,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"10054:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1680,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10058:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1683,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1687,"nodeType":"ExpressionStatement","src":"10035:35:7"},{"expression":{"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10084:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1689,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10094:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1690,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"10103:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1691,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10107:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1694,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1698,"nodeType":"ExpressionStatement","src":"10084:35:7"},{"expression":{"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10133:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1700,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10143:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1701,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"10152:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10156:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1705,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1709,"nodeType":"ExpressionStatement","src":"10133:35:7"},{"expression":{"arguments":[{"id":1711,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10193:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1712,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"10201:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10205:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1710,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"10189:3:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1614,"id":1716,"nodeType":"Return","src":"10182:30:7"}]}]},"documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"8359:223:7","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1719,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:7","nodeType":"FunctionDefinition","parameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"a","nameLocation":"8609:1:7","nodeType":"VariableDeclaration","scope":1719,"src":"8601:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1609,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:7"},"returnParameters":{"id":1614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1719,"src":"8635:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:7"},"scope":2230,"src":"8587:1642:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1753,"nodeType":"Block","src":"10405:164:7","statements":[{"id":1752,"nodeType":"UncheckedBlock","src":"10415:148:7","statements":[{"assignments":[1731],"declarations":[{"constant":false,"id":1731,"mutability":"mutable","name":"result","nameLocation":"10447:6:7","nodeType":"VariableDeclaration","scope":1752,"src":"10439:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1730,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1735,"initialValue":{"arguments":[{"id":1733,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"10461:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1732,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1719,1754],"referencedDeclaration":1719,"src":"10456:4:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1736,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"10484:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1738,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"10511:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}],"id":1737,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"10494:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1187_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1740,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"10524:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1741,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"10533:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1743,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"10542:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:7","trueExpression":{"hexValue":"31","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1749,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1729,"id":1751,"nodeType":"Return","src":"10477:75:7"}]}]},"documentation":{"id":1720,"nodeType":"StructuredDocumentation","src":"10235:89:7","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1754,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:7","nodeType":"FunctionDefinition","parameters":{"id":1726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"a","nameLocation":"10351:1:7","nodeType":"VariableDeclaration","scope":1754,"src":"10343:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1725,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:7","nodeType":"VariableDeclaration","scope":1754,"src":"10354:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"},"typeName":{"id":1724,"nodeType":"UserDefinedTypeName","pathNode":{"id":1723,"name":"Rounding","nameLocations":["10354:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1187,"src":"10354:8:7"},"referencedDeclaration":1187,"src":"10354:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:7"},"returnParameters":{"id":1729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1754,"src":"10396:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1727,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:7"},"scope":2230,"src":"10329:240:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1885,"nodeType":"Block","src":"10760:922:7","statements":[{"assignments":[1763],"declarations":[{"constant":false,"id":1763,"mutability":"mutable","name":"result","nameLocation":"10778:6:7","nodeType":"VariableDeclaration","scope":1885,"src":"10770:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1765,"initialValue":{"hexValue":"30","id":1764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:7"},{"id":1882,"nodeType":"UncheckedBlock","src":"10798:855:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"10826:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1780,"nodeType":"IfStatement","src":"10822:99:7","trueBody":{"id":1779,"nodeType":"Block","src":"10844:77:7","statements":[{"expression":{"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1771,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"10862:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1774,"nodeType":"ExpressionStatement","src":"10862:13:7"},{"expression":{"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1775,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"10893:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1778,"nodeType":"ExpressionStatement","src":"10893:13:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"10938:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1795,"nodeType":"IfStatement","src":"10934:96:7","trueBody":{"id":1794,"nodeType":"Block","src":"10955:75:7","statements":[{"expression":{"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"10973:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1789,"nodeType":"ExpressionStatement","src":"10973:12:7"},{"expression":{"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1790,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11003:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1793,"nodeType":"ExpressionStatement","src":"11003:12:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11047:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1810,"nodeType":"IfStatement","src":"11043:96:7","trueBody":{"id":1809,"nodeType":"Block","src":"11064:75:7","statements":[{"expression":{"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11082:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1804,"nodeType":"ExpressionStatement","src":"11082:12:7"},{"expression":{"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1805,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11112:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1808,"nodeType":"ExpressionStatement","src":"11112:12:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11156:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1825,"nodeType":"IfStatement","src":"11152:96:7","trueBody":{"id":1824,"nodeType":"Block","src":"11173:75:7","statements":[{"expression":{"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11191:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1819,"nodeType":"ExpressionStatement","src":"11191:12:7"},{"expression":{"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1820,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11221:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1823,"nodeType":"ExpressionStatement","src":"11221:12:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11265:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1840,"nodeType":"IfStatement","src":"11261:93:7","trueBody":{"id":1839,"nodeType":"Block","src":"11281:73:7","statements":[{"expression":{"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1831,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11299:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1834,"nodeType":"ExpressionStatement","src":"11299:11:7"},{"expression":{"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1835,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11328:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1838,"nodeType":"ExpressionStatement","src":"11328:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11371:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1855,"nodeType":"IfStatement","src":"11367:93:7","trueBody":{"id":1854,"nodeType":"Block","src":"11387:73:7","statements":[{"expression":{"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1846,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11405:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1849,"nodeType":"ExpressionStatement","src":"11405:11:7"},{"expression":{"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1850,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11434:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1853,"nodeType":"ExpressionStatement","src":"11434:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11477:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1870,"nodeType":"IfStatement","src":"11473:93:7","trueBody":{"id":1869,"nodeType":"Block","src":"11493:73:7","statements":[{"expression":{"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11511:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1864,"nodeType":"ExpressionStatement","src":"11511:11:7"},{"expression":{"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1865,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11540:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1868,"nodeType":"ExpressionStatement","src":"11540:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1871,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"11583:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1881,"nodeType":"IfStatement","src":"11579:64:7","trueBody":{"id":1880,"nodeType":"Block","src":"11599:44:7","statements":[{"expression":{"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11617:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1879,"nodeType":"ExpressionStatement","src":"11617:11:7"}]}}]},{"expression":{"id":1883,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11669:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1761,"id":1884,"nodeType":"Return","src":"11662:13:7"}]},"documentation":{"id":1755,"nodeType":"StructuredDocumentation","src":"10575:119:7","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":1886,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:7","nodeType":"FunctionDefinition","parameters":{"id":1758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1757,"mutability":"mutable","name":"value","nameLocation":"10721:5:7","nodeType":"VariableDeclaration","scope":1886,"src":"10713:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1756,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:7"},"returnParameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1886,"src":"10751:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1759,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:7"},"scope":2230,"src":"10699:983:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1920,"nodeType":"Block","src":"11915:168:7","statements":[{"id":1919,"nodeType":"UncheckedBlock","src":"11925:152:7","statements":[{"assignments":[1898],"declarations":[{"constant":false,"id":1898,"mutability":"mutable","name":"result","nameLocation":"11957:6:7","nodeType":"VariableDeclaration","scope":1919,"src":"11949:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1897,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1902,"initialValue":{"arguments":[{"id":1900,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"11971:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1899,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1886,1921],"referencedDeclaration":1886,"src":"11966:4:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1903,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"11998:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1905,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"12025:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}],"id":1904,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"12008:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1187_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"12043:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"12052:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:7","trueExpression":{"hexValue":"31","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1916,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1896,"id":1918,"nodeType":"Return","src":"11991:75:7"}]}]},"documentation":{"id":1887,"nodeType":"StructuredDocumentation","src":"11688:142:7","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1921,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:7","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"value","nameLocation":"11857:5:7","nodeType":"VariableDeclaration","scope":1921,"src":"11849:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:7","nodeType":"VariableDeclaration","scope":1921,"src":"11864:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"},"typeName":{"id":1891,"nodeType":"UserDefinedTypeName","pathNode":{"id":1890,"name":"Rounding","nameLocations":["11864:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1187,"src":"11864:8:7"},"referencedDeclaration":1187,"src":"11864:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:7"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1921,"src":"11906:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1894,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:7"},"scope":2230,"src":"11835:248:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2049,"nodeType":"Block","src":"12276:854:7","statements":[{"assignments":[1930],"declarations":[{"constant":false,"id":1930,"mutability":"mutable","name":"result","nameLocation":"12294:6:7","nodeType":"VariableDeclaration","scope":2049,"src":"12286:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1929,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1932,"initialValue":{"hexValue":"30","id":1931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:7"},{"id":2046,"nodeType":"UncheckedBlock","src":"12314:787:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12342:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:7","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1949,"nodeType":"IfStatement","src":"12338:103:7","trueBody":{"id":1948,"nodeType":"Block","src":"12361:80:7","statements":[{"expression":{"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12379:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:7","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1943,"nodeType":"ExpressionStatement","src":"12379:17:7"},{"expression":{"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1944,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"12414:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1947,"nodeType":"ExpressionStatement","src":"12414:12:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12458:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:7","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1966,"nodeType":"IfStatement","src":"12454:103:7","trueBody":{"id":1965,"nodeType":"Block","src":"12477:80:7","statements":[{"expression":{"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1955,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12495:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1958,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:7","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1960,"nodeType":"ExpressionStatement","src":"12495:17:7"},{"expression":{"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"12530:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1964,"nodeType":"ExpressionStatement","src":"12530:12:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1967,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12574:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:7","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1983,"nodeType":"IfStatement","src":"12570:103:7","trueBody":{"id":1982,"nodeType":"Block","src":"12593:80:7","statements":[{"expression":{"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1972,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12611:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:7","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1977,"nodeType":"ExpressionStatement","src":"12611:17:7"},{"expression":{"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1978,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"12646:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1981,"nodeType":"ExpressionStatement","src":"12646:12:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12690:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:7","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2000,"nodeType":"IfStatement","src":"12686:100:7","trueBody":{"id":1999,"nodeType":"Block","src":"12708:78:7","statements":[{"expression":{"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12726:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:7","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1994,"nodeType":"ExpressionStatement","src":"12726:16:7"},{"expression":{"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1995,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"12760:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1998,"nodeType":"ExpressionStatement","src":"12760:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12803:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:7","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2017,"nodeType":"IfStatement","src":"12799:100:7","trueBody":{"id":2016,"nodeType":"Block","src":"12821:78:7","statements":[{"expression":{"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12839:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:7","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2011,"nodeType":"ExpressionStatement","src":"12839:16:7"},{"expression":{"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2012,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"12873:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2015,"nodeType":"ExpressionStatement","src":"12873:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12916:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:7","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2034,"nodeType":"IfStatement","src":"12912:100:7","trueBody":{"id":2033,"nodeType":"Block","src":"12934:78:7","statements":[{"expression":{"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2023,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"12952:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:7","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2028,"nodeType":"ExpressionStatement","src":"12952:16:7"},{"expression":{"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2029,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"12986:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2032,"nodeType":"ExpressionStatement","src":"12986:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"13029:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2045,"nodeType":"IfStatement","src":"13025:66:7","trueBody":{"id":2044,"nodeType":"Block","src":"13047:44:7","statements":[{"expression":{"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2040,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"13065:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2043,"nodeType":"ExpressionStatement","src":"13065:11:7"}]}}]},{"expression":{"id":2047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"13117:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1928,"id":2048,"nodeType":"Return","src":"13110:13:7"}]},"documentation":{"id":1922,"nodeType":"StructuredDocumentation","src":"12089:120:7","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2050,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:7","nodeType":"FunctionDefinition","parameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1924,"mutability":"mutable","name":"value","nameLocation":"12237:5:7","nodeType":"VariableDeclaration","scope":2050,"src":"12229:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:7"},"returnParameters":{"id":1928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2050,"src":"12267:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1926,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:7"},"scope":2230,"src":"12214:916:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2084,"nodeType":"Block","src":"13365:170:7","statements":[{"id":2083,"nodeType":"UncheckedBlock","src":"13375:154:7","statements":[{"assignments":[2062],"declarations":[{"constant":false,"id":2062,"mutability":"mutable","name":"result","nameLocation":"13407:6:7","nodeType":"VariableDeclaration","scope":2083,"src":"13399:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2066,"initialValue":{"arguments":[{"id":2064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"13422:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2063,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2050,2085],"referencedDeclaration":2050,"src":"13416:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2067,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"13449:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2069,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"13476:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}],"id":2068,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"13459:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1187_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2072,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"13495:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"13504:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:7","trueExpression":{"hexValue":"31","id":2077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2080,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2060,"id":2082,"nodeType":"Return","src":"13442:76:7"}]}]},"documentation":{"id":2051,"nodeType":"StructuredDocumentation","src":"13136:143:7","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2085,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:7","nodeType":"FunctionDefinition","parameters":{"id":2057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"value","nameLocation":"13307:5:7","nodeType":"VariableDeclaration","scope":2085,"src":"13299:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2052,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2056,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:7","nodeType":"VariableDeclaration","scope":2085,"src":"13314:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"},"typeName":{"id":2055,"nodeType":"UserDefinedTypeName","pathNode":{"id":2054,"name":"Rounding","nameLocations":["13314:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1187,"src":"13314:8:7"},"referencedDeclaration":1187,"src":"13314:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:7"},"returnParameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2085,"src":"13356:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2058,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:7"},"scope":2230,"src":"13284:251:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2171,"nodeType":"Block","src":"13855:600:7","statements":[{"assignments":[2094],"declarations":[{"constant":false,"id":2094,"mutability":"mutable","name":"result","nameLocation":"13873:6:7","nodeType":"VariableDeclaration","scope":2171,"src":"13865:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2096,"initialValue":{"hexValue":"30","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:7"},{"id":2168,"nodeType":"UncheckedBlock","src":"13893:533:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"13921:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2111,"nodeType":"IfStatement","src":"13917:98:7","trueBody":{"id":2110,"nodeType":"Block","src":"13939:76:7","statements":[{"expression":{"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"13957:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2105,"nodeType":"ExpressionStatement","src":"13957:13:7"},{"expression":{"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2106,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"13988:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2109,"nodeType":"ExpressionStatement","src":"13988:12:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2112,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"14032:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2126,"nodeType":"IfStatement","src":"14028:95:7","trueBody":{"id":2125,"nodeType":"Block","src":"14049:74:7","statements":[{"expression":{"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"14067:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2120,"nodeType":"ExpressionStatement","src":"14067:12:7"},{"expression":{"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2121,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"14097:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2124,"nodeType":"ExpressionStatement","src":"14097:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"14140:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2141,"nodeType":"IfStatement","src":"14136:95:7","trueBody":{"id":2140,"nodeType":"Block","src":"14157:74:7","statements":[{"expression":{"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2132,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"14175:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2135,"nodeType":"ExpressionStatement","src":"14175:12:7"},{"expression":{"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"14205:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2139,"nodeType":"ExpressionStatement","src":"14205:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"14248:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2156,"nodeType":"IfStatement","src":"14244:95:7","trueBody":{"id":2155,"nodeType":"Block","src":"14265:74:7","statements":[{"expression":{"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"14283:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2150,"nodeType":"ExpressionStatement","src":"14283:12:7"},{"expression":{"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2151,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"14313:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2154,"nodeType":"ExpressionStatement","src":"14313:11:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"14356:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2167,"nodeType":"IfStatement","src":"14352:64:7","trueBody":{"id":2166,"nodeType":"Block","src":"14372:44:7","statements":[{"expression":{"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2162,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"14390:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2165,"nodeType":"ExpressionStatement","src":"14390:11:7"}]}}]},{"expression":{"id":2169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"14442:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2092,"id":2170,"nodeType":"Return","src":"14435:13:7"}]},"documentation":{"id":2086,"nodeType":"StructuredDocumentation","src":"13541:246:7","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2172,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:7","nodeType":"FunctionDefinition","parameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"value","nameLocation":"13816:5:7","nodeType":"VariableDeclaration","scope":2172,"src":"13808:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:7"},"returnParameters":{"id":2092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2172,"src":"13846:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2090,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:7"},"scope":2230,"src":"13792:663:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2209,"nodeType":"Block","src":"14692:177:7","statements":[{"id":2208,"nodeType":"UncheckedBlock","src":"14702:161:7","statements":[{"assignments":[2184],"declarations":[{"constant":false,"id":2184,"mutability":"mutable","name":"result","nameLocation":"14734:6:7","nodeType":"VariableDeclaration","scope":2208,"src":"14726:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2183,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2188,"initialValue":{"arguments":[{"id":2186,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"14750:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2185,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2172,2210],"referencedDeclaration":2172,"src":"14743:6:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"14777:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2191,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"14804:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}],"id":2190,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"14787:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1187_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"14823:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2199,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"14838:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:7","trueExpression":{"hexValue":"31","id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2182,"id":2207,"nodeType":"Return","src":"14770:82:7"}]}]},"documentation":{"id":2173,"nodeType":"StructuredDocumentation","src":"14461:144:7","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2210,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:7","nodeType":"FunctionDefinition","parameters":{"id":2179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2175,"mutability":"mutable","name":"value","nameLocation":"14634:5:7","nodeType":"VariableDeclaration","scope":2210,"src":"14626:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2174,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2178,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:7","nodeType":"VariableDeclaration","scope":2210,"src":"14641:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"},"typeName":{"id":2177,"nodeType":"UserDefinedTypeName","pathNode":{"id":2176,"name":"Rounding","nameLocations":["14641:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1187,"src":"14641:8:7"},"referencedDeclaration":1187,"src":"14641:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:7"},"returnParameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2210,"src":"14683:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2180,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:7"},"scope":2230,"src":"14610:259:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2228,"nodeType":"Block","src":"15067:48:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2221,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"15090:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}],"id":2220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2219,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:7","typeDescriptions":{}}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2218,"id":2227,"nodeType":"Return","src":"15077:31:7"}]},"documentation":{"id":2211,"nodeType":"StructuredDocumentation","src":"14875:113:7","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":2229,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:7","nodeType":"FunctionDefinition","parameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:7","nodeType":"VariableDeclaration","scope":2229,"src":"15019:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"},"typeName":{"id":2213,"nodeType":"UserDefinedTypeName","pathNode":{"id":2212,"name":"Rounding","nameLocations":["15019:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1187,"src":"15019:8:7"},"referencedDeclaration":1187,"src":"15019:8:7","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1187","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:7"},"returnParameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2229,"src":"15061:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2216,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:7"},"scope":2230,"src":"14993:122:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2231,"src":"203:14914:7","usedErrors":[1182],"usedEvents":[]}],"src":"103:15015:7"},"id":7},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[2335]},"id":2336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2232,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2233,"nodeType":"StructuredDocumentation","src":"135:80:8","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2335,"linearizedBaseContracts":[2335],"name":"SignedMath","nameLocation":"224:10:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":2250,"nodeType":"Block","src":"376:37:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2243,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"393:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2244,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"397:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2247,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"405:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:8","trueExpression":{"id":2246,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"401:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2242,"id":2249,"nodeType":"Return","src":"386:20:8"}]},"documentation":{"id":2234,"nodeType":"StructuredDocumentation","src":"241:66:8","text":" @dev Returns the largest of two signed numbers."},"id":2251,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:8","nodeType":"FunctionDefinition","parameters":{"id":2239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2236,"mutability":"mutable","name":"a","nameLocation":"332:1:8","nodeType":"VariableDeclaration","scope":2251,"src":"325:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2235,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2238,"mutability":"mutable","name":"b","nameLocation":"342:1:8","nodeType":"VariableDeclaration","scope":2251,"src":"335:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2237,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:8"},"returnParameters":{"id":2242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2251,"src":"368:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2240,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:8"},"scope":2335,"src":"312:101:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2268,"nodeType":"Block","src":"555:37:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2261,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"572:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2262,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"576:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2265,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"584:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:8","trueExpression":{"id":2264,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"580:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2260,"id":2267,"nodeType":"Return","src":"565:20:8"}]},"documentation":{"id":2252,"nodeType":"StructuredDocumentation","src":"419:67:8","text":" @dev Returns the smallest of two signed numbers."},"id":2269,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:8","nodeType":"FunctionDefinition","parameters":{"id":2257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"a","nameLocation":"511:1:8","nodeType":"VariableDeclaration","scope":2269,"src":"504:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2253,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2256,"mutability":"mutable","name":"b","nameLocation":"521:1:8","nodeType":"VariableDeclaration","scope":2269,"src":"514:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2255,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:8"},"returnParameters":{"id":2260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2269,"src":"547:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2258,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:8"},"scope":2335,"src":"491:101:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2312,"nodeType":"Block","src":"797:162:8","statements":[{"assignments":[2280],"declarations":[{"constant":false,"id":2280,"mutability":"mutable","name":"x","nameLocation":"866:1:8","nodeType":"VariableDeclaration","scope":2312,"src":"859:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2279,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2293,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2281,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"871:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2282,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"875:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2285,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"882:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2286,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"886:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2288,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2291,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:8"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2294,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"911:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2299,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"931:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2297,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:8","typeDescriptions":{}}},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2295,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:8","typeDescriptions":{}}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2304,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"945:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2305,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"949:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2278,"id":2311,"nodeType":"Return","src":"904:48:8"}]},"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"598:126:8","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2313,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:8","nodeType":"FunctionDefinition","parameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"a","nameLocation":"753:1:8","nodeType":"VariableDeclaration","scope":2313,"src":"746:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2271,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2274,"mutability":"mutable","name":"b","nameLocation":"763:1:8","nodeType":"VariableDeclaration","scope":2313,"src":"756:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2273,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:8"},"returnParameters":{"id":2278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2313,"src":"789:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2276,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:8"},"scope":2335,"src":"729:230:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2333,"nodeType":"Block","src":"1103:158:8","statements":[{"id":2332,"nodeType":"UncheckedBlock","src":"1113:142:8","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2323,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2316,"src":"1228:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:8","subExpression":{"id":2327,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2316,"src":"1242:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:8","trueExpression":{"id":2326,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2316,"src":"1237:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2321,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:8","typeDescriptions":{}}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2320,"id":2331,"nodeType":"Return","src":"1213:31:8"}]}]},"documentation":{"id":2314,"nodeType":"StructuredDocumentation","src":"965:78:8","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2334,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:8","nodeType":"FunctionDefinition","parameters":{"id":2317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2316,"mutability":"mutable","name":"n","nameLocation":"1068:1:8","nodeType":"VariableDeclaration","scope":2334,"src":"1061:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2315,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:8"},"returnParameters":{"id":2320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2334,"src":"1094:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2318,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:8"},"scope":2335,"src":"1048:213:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2336,"src":"216:1047:8","usedErrors":[],"usedEvents":[]}],"src":"109:1155:8"},"id":8},"contracts/SettlementContract.sol":{"ast":{"absolutePath":"contracts/SettlementContract.sol","exportedSymbols":{"Address":[400],"Context":[430],"CrossChainOrder":[3213],"ECDSA":[1102],"ISettlementContract":[3293],"MessageHashUtils":[1176],"Ownable":[147],"ReentrancyGuard":[499],"ResolvedCrossChainOrder":[3248],"SettlementContract":[3188]},"id":3189,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2337,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"absolutePath":"contracts/interfaces/IERC7683.sol","file":"./interfaces/IERC7683.sol","id":2341,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3189,"sourceUnit":3294,"src":"58:104:9","symbolAliases":[{"foreign":{"id":2338,"name":"ISettlementContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"66:19:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2339,"name":"CrossChainOrder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"87:15:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2340,"name":"ResolvedCrossChainOrder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"104:23:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":2343,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3189,"sourceUnit":1103,"src":"163:75:9","symbolAliases":[{"foreign":{"id":2342,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"171:5:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","file":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","id":2345,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3189,"sourceUnit":1177,"src":"239:97:9","symbolAliases":[{"foreign":{"id":2344,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"247:16:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2347,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3189,"sourceUnit":431,"src":"337:66:9","symbolAliases":[{"foreign":{"id":2346,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"345:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2349,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3189,"sourceUnit":148,"src":"404:67:9","symbolAliases":[{"foreign":{"id":2348,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"412:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2351,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3189,"sourceUnit":401,"src":"472:66:9","symbolAliases":[{"foreign":{"id":2350,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"480:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":2353,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3189,"sourceUnit":500,"src":"539:82:9","symbolAliases":[{"foreign":{"id":2352,"name":"ReentrancyGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"547:15:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2354,"name":"ISettlementContract","nameLocations":["658:19:9"],"nodeType":"IdentifierPath","referencedDeclaration":3293,"src":"658:19:9"},"id":2355,"nodeType":"InheritanceSpecifier","src":"658:19:9"},{"baseName":{"id":2356,"name":"Context","nameLocations":["683:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":430,"src":"683:7:9"},"id":2357,"nodeType":"InheritanceSpecifier","src":"683:7:9"},{"baseName":{"id":2358,"name":"Ownable","nameLocations":["696:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"696:7:9"},"id":2359,"nodeType":"InheritanceSpecifier","src":"696:7:9"},{"baseName":{"id":2360,"name":"ReentrancyGuard","nameLocations":["709:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"709:15:9"},"id":2361,"nodeType":"InheritanceSpecifier","src":"709:15:9"}],"canonicalName":"SettlementContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3188,"linearizedBaseContracts":[3188,499,147,430,3293],"name":"SettlementContract","nameLocation":"632:18:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2364,"libraryName":{"id":2362,"name":"ECDSA","nameLocations":["737:5:9"],"nodeType":"IdentifierPath","referencedDeclaration":1102,"src":"737:5:9"},"nodeType":"UsingForDirective","src":"731:24:9","typeName":{"id":2363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"747:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"global":false,"id":2367,"libraryName":{"id":2365,"name":"MessageHashUtils","nameLocations":["766:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"766:16:9"},"nodeType":"UsingForDirective","src":"760:35:9","typeName":{"id":2366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"787:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"global":false,"id":2370,"libraryName":{"id":2368,"name":"Address","nameLocations":["806:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":400,"src":"806:7:9"},"nodeType":"UsingForDirective","src":"800:26:9","typeName":{"id":2369,"name":"address","nodeType":"ElementaryTypeName","src":"818:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":2378,"nodeType":"Block","src":"905:2:9","statements":[]},"documentation":{"id":2371,"nodeType":"StructuredDocumentation","src":"832:32:9","text":"\n Constructor"},"id":2379,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2374,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"891:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"891:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2376,"kind":"baseConstructorSpecifier","modifierName":{"id":2373,"name":"Ownable","nameLocations":["883:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"883:7:9"},"nodeType":"ModifierInvocation","src":"883:21:9"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2372,"nodeType":"ParameterList","parameters":[],"src":"880:2:9"},"returnParameters":{"id":2377,"nodeType":"ParameterList","parameters":[],"src":"905:0:9"},"scope":3188,"src":"869:38:9","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2392,"nodeType":"Block","src":"1042:41:9","statements":[{"expression":{"arguments":[{"id":2389,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"1070:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}],"id":2388,"name":"_hashOrder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"1059:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CrossChainOrder_$3213_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct CrossChainOrder memory) pure returns (bytes32)"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1059:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2387,"id":2391,"nodeType":"Return","src":"1052:24:9"}]},"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"913:34:9","text":"\n Order Hashing"},"functionSelector":"5d357deb","id":2393,"implemented":true,"kind":"function","modifiers":[],"name":"computeOrderHash","nameLocation":"961:16:9","nodeType":"FunctionDefinition","parameters":{"id":2384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2383,"mutability":"mutable","name":"order","nameLocation":"1003:5:9","nodeType":"VariableDeclaration","scope":2393,"src":"978:30:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2382,"nodeType":"UserDefinedTypeName","pathNode":{"id":2381,"name":"CrossChainOrder","nameLocations":["978:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"978:15:9"},"referencedDeclaration":3213,"src":"978:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"}],"src":"977:32:9"},"returnParameters":{"id":2387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2393,"src":"1033:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1033:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1032:9:9"},"scope":3188,"src":"952:131:9","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":2408,"nodeType":"Block","src":"1171:52:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2404,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"1209:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}],"expression":{"id":2402,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1198:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1202:6:9","memberName":"encode","nodeType":"MemberAccess","src":"1198:10:9","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1198:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2401,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1188:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2400,"id":2407,"nodeType":"Return","src":"1181:35:9"}]},"id":2409,"implemented":true,"kind":"function","modifiers":[],"name":"_hashOrder","nameLocation":"1098:10:9","nodeType":"FunctionDefinition","parameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"order","nameLocation":"1132:5:9","nodeType":"VariableDeclaration","scope":2409,"src":"1109:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2395,"nodeType":"UserDefinedTypeName","pathNode":{"id":2394,"name":"CrossChainOrder","nameLocations":["1109:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"1109:15:9"},"referencedDeclaration":3213,"src":"1109:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"}],"src":"1108:30:9"},"returnParameters":{"id":2400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2409,"src":"1162:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1162:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1161:9:9"},"scope":3188,"src":"1089:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2431,"nodeType":"Block","src":"1338:119:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2425,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"1424:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2420,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"1366:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}],"id":2419,"name":"_hashOrder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"1355:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CrossChainOrder_$3213_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct CrossChainOrder memory) pure returns (bytes32)"}},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1382:22:9","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":1117,"src":"1355:49:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:51:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:7:9","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":858,"src":"1355:68:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:79:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2427,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1438:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1355:95:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2418,"id":2430,"nodeType":"Return","src":"1348:102:9"}]},"id":2432,"implemented":true,"kind":"function","modifiers":[],"name":"_verifySignature","nameLocation":"1238:16:9","nodeType":"FunctionDefinition","parameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"order","nameLocation":"1278:5:9","nodeType":"VariableDeclaration","scope":2432,"src":"1255:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2411,"nodeType":"UserDefinedTypeName","pathNode":{"id":2410,"name":"CrossChainOrder","nameLocations":["1255:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"1255:15:9"},"referencedDeclaration":3213,"src":"1255:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"},{"constant":false,"id":2414,"mutability":"mutable","name":"signature","nameLocation":"1298:9:9","nodeType":"VariableDeclaration","scope":2432,"src":"1285:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2413,"name":"bytes","nodeType":"ElementaryTypeName","src":"1285:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1254:54:9"},"returnParameters":{"id":2418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2432,"src":"1332:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2416,"name":"bool","nodeType":"ElementaryTypeName","src":"1332:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1331:6:9"},"scope":3188,"src":"1229:228:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":2433,"nodeType":"StructuredDocumentation","src":"1463:53:9","text":"\n Whitelisted Settlement Contracts"},"id":2437,"mutability":"mutable","name":"_isSettlementSupported","nameLocation":"1555:22:9","nodeType":"VariableDeclaration","scope":3188,"src":"1521:56:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":2436,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2434,"name":"address","nodeType":"ElementaryTypeName","src":"1529:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1521:24:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2435,"name":"bool","nodeType":"ElementaryTypeName","src":"1540:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"_settlementToChainId","nameLocation":"1617:20:9","nodeType":"VariableDeclaration","scope":3188,"src":"1583:54:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2438,"name":"address","nodeType":"ElementaryTypeName","src":"1591:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1583:24:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2439,"name":"uint","nodeType":"ElementaryTypeName","src":"1602:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"body":{"id":2462,"nodeType":"Block","src":"1742:126:9","statements":[{"expression":{"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2450,"name":"_isSettlementSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"1752:22:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2452,"indexExpression":{"id":2451,"name":"settlementContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"1775:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1752:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1797:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1752:49:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2455,"nodeType":"ExpressionStatement","src":"1752:49:9"},{"expression":{"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2456,"name":"_settlementToChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"1811:20:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2458,"indexExpression":{"id":2457,"name":"settlementContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"1832:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1811:40:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2459,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"1854:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1811:50:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2461,"nodeType":"ExpressionStatement","src":"1811:50:9"}]},"functionSelector":"97b2b09f","id":2463,"implemented":true,"kind":"function","modifiers":[{"id":2448,"kind":"modifierInvocation","modifierName":{"id":2447,"name":"onlyOwner","nameLocations":["1732:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1732:9:9"},"nodeType":"ModifierInvocation","src":"1732:9:9"}],"name":"whitelistSettlementContract","nameLocation":"1653:27:9","nodeType":"FunctionDefinition","parameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2443,"mutability":"mutable","name":"settlementContract","nameLocation":"1689:18:9","nodeType":"VariableDeclaration","scope":2463,"src":"1681:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2442,"name":"address","nodeType":"ElementaryTypeName","src":"1681:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2445,"mutability":"mutable","name":"chainId","nameLocation":"1714:7:9","nodeType":"VariableDeclaration","scope":2463,"src":"1709:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint","nodeType":"ElementaryTypeName","src":"1709:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:42:9"},"returnParameters":{"id":2449,"nodeType":"ParameterList","parameters":[],"src":"1742:0:9"},"scope":3188,"src":"1644:224:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":2464,"nodeType":"StructuredDocumentation","src":"1874:39:9","text":"\n Order Registration"},"id":2469,"mutability":"mutable","name":"_orders","nameLocation":"1963:7:9","nodeType":"VariableDeclaration","scope":3188,"src":"1918:52:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder)"},"typeName":{"id":2468,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1918:35:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2467,"nodeType":"UserDefinedTypeName","pathNode":{"id":2466,"name":"CrossChainOrder","nameLocations":["1937:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"1937:15:9"},"referencedDeclaration":3213,"src":"1937:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}}},"visibility":"internal"},{"constant":false,"id":2473,"mutability":"mutable","name":"_destChains","nameLocation":"2013:11:9","nodeType":"VariableDeclaration","scope":3188,"src":"1976:48:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":2472,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1984:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1976:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2471,"name":"uint256","nodeType":"ElementaryTypeName","src":"1995:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2477,"mutability":"mutable","name":"_nonceOf","nameLocation":"2067:8:9","nodeType":"VariableDeclaration","scope":3188,"src":"2030:45:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2476,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2474,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2030:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2475,"name":"uint256","nodeType":"ElementaryTypeName","src":"2049:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"2952d12adb64a657dc2f54e4263d91d1e436254a0bd4472a3c316eec49d37d0c","id":2484,"name":"OrderCreated","nameLocation":"2088:12:9","nodeType":"EventDefinition","parameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2479,"indexed":true,"mutability":"mutable","name":"orderHash","nameLocation":"2117:9:9","nodeType":"VariableDeclaration","scope":2484,"src":"2101:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2478,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2101:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2482,"indexed":false,"mutability":"mutable","name":"order","nameLocation":"2144:5:9","nodeType":"VariableDeclaration","scope":2484,"src":"2128:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2481,"nodeType":"UserDefinedTypeName","pathNode":{"id":2480,"name":"CrossChainOrder","nameLocations":["2128:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"2128:15:9"},"referencedDeclaration":3213,"src":"2128:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"}],"src":"2100:50:9"},"src":"2082:69:9"},{"anonymous":false,"eventSelector":"f2503063536670d4ae6671a02eaab3a0174b1d36d85146ce8bd76913eae1d498","id":2488,"name":"OrderDeleted","nameLocation":"2162:12:9","nodeType":"EventDefinition","parameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"indexed":true,"mutability":"mutable","name":"orderHash","nameLocation":"2191:9:9","nodeType":"VariableDeclaration","scope":2488,"src":"2175:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2485,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2175:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2174:27:9"},"src":"2156:46:9"},{"body":{"id":2496,"nodeType":"Block","src":"2295:58:9","statements":[]},"id":2497,"implemented":true,"kind":"function","modifiers":[],"name":"_broadcastOrder","nameLocation":"2217:15:9","nodeType":"FunctionDefinition","parameters":{"id":2494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2491,"mutability":"mutable","name":"order","nameLocation":"2258:5:9","nodeType":"VariableDeclaration","scope":2497,"src":"2233:30:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2490,"nodeType":"UserDefinedTypeName","pathNode":{"id":2489,"name":"CrossChainOrder","nameLocations":["2233:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"2233:15:9"},"referencedDeclaration":3213,"src":"2233:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"},{"constant":false,"id":2493,"mutability":"mutable","name":"destChainId","nameLocation":"2273:11:9","nodeType":"VariableDeclaration","scope":2497,"src":"2265:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2492,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2232:53:9"},"returnParameters":{"id":2495,"nodeType":"ParameterList","parameters":[],"src":"2295:0:9"},"scope":3188,"src":"2208:145:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2504,"nodeType":"Block","src":"2434:58:9","statements":[]},"id":2505,"implemented":true,"kind":"function","modifiers":[],"name":"_broadcastOrderDelete","nameLocation":"2368:21:9","nodeType":"FunctionDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"hash","nameLocation":"2398:4:9","nodeType":"VariableDeclaration","scope":2505,"src":"2390:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2390:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"destChainId","nameLocation":"2412:11:9","nodeType":"VariableDeclaration","scope":2505,"src":"2404:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"2404:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2389:35:9"},"returnParameters":{"id":2503,"nodeType":"ParameterList","parameters":[],"src":"2434:0:9"},"scope":3188,"src":"2359:133:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2535,"nodeType":"Block","src":"2563:183:9","statements":[{"assignments":[2512],"declarations":[{"constant":false,"id":2512,"mutability":"mutable","name":"orderHash","nameLocation":"2581:9:9","nodeType":"VariableDeclaration","scope":2535,"src":"2573:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2511,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2573:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2516,"initialValue":{"arguments":[{"id":2514,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"2604:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}],"id":2513,"name":"_hashOrder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"2593:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CrossChainOrder_$3213_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct CrossChainOrder memory) pure returns (bytes32)"}},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2593:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2573:37:9"},{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2517,"name":"_orders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"2620:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder storage ref)"}},"id":2519,"indexExpression":{"id":2518,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"2628:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2620:18:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2520,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"2641:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"src":"2620:26:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"id":2522,"nodeType":"ExpressionStatement","src":"2620:26:9"},{"expression":{"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2523,"name":"_destChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"2656:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2525,"indexExpression":{"id":2524,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"2668:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2656:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2526,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2681:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2687:7:9","memberName":"chainid","nodeType":"MemberAccess","src":"2681:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2656:38:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2529,"nodeType":"ExpressionStatement","src":"2656:38:9"},{"eventCall":{"arguments":[{"id":2531,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"2722:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2532,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"2733:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}],"id":2530,"name":"OrderCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"2709:12:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_memory_ptr_$returns$__$","typeString":"function (bytes32,struct CrossChainOrder memory)"}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2709:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2534,"nodeType":"EmitStatement","src":"2704:35:9"}]},"id":2536,"implemented":true,"kind":"function","modifiers":[],"name":"_initiateLzOrder","nameLocation":"2507:16:9","nodeType":"FunctionDefinition","parameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"order","nameLocation":"2547:5:9","nodeType":"VariableDeclaration","scope":2536,"src":"2524:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2507,"nodeType":"UserDefinedTypeName","pathNode":{"id":2506,"name":"CrossChainOrder","nameLocations":["2524:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"2524:15:9"},"referencedDeclaration":3213,"src":"2524:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"}],"src":"2523:30:9"},"returnParameters":{"id":2510,"nodeType":"ParameterList","parameters":[],"src":"2563:0:9"},"scope":3188,"src":"2498:248:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2560,"nodeType":"Block","src":"2799:143:9","statements":[{"expression":{"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2809:20:9","subExpression":{"baseExpression":{"id":2541,"name":"_orders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"2816:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder storage ref)"}},"id":2543,"indexExpression":{"id":2542,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"2824:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2816:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2545,"nodeType":"ExpressionStatement","src":"2809:20:9"},{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2839:24:9","subExpression":{"baseExpression":{"id":2546,"name":"_destChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"2846:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2548,"indexExpression":{"id":2547,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"2858:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2846:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2550,"nodeType":"ExpressionStatement","src":"2839:24:9"},{"expression":{"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2873:29:9","subExpression":{"baseExpression":{"id":2551,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"2880:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2553,"indexExpression":{"id":2552,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"2897:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2880:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2555,"nodeType":"ExpressionStatement","src":"2873:29:9"},{"eventCall":{"arguments":[{"id":2557,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"2930:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2556,"name":"OrderDeleted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"2917:12:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2917:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2559,"nodeType":"EmitStatement","src":"2912:23:9"}]},"id":2561,"implemented":true,"kind":"function","modifiers":[],"name":"_deleteLzOrder","nameLocation":"2761:14:9","nodeType":"FunctionDefinition","parameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"hash","nameLocation":"2784:4:9","nodeType":"VariableDeclaration","scope":2561,"src":"2776:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2776:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2775:14:9"},"returnParameters":{"id":2540,"nodeType":"ParameterList","parameters":[],"src":"2799:0:9"},"scope":3188,"src":"2752:190:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3281],"body":{"id":2725,"nodeType":"Block","src":"3081:1281:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2575,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3116:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},{"id":2576,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"3123:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2574,"name":"_verifySignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"3099:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_CrossChainOrder_$3213_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (struct CrossChainOrder memory,bytes memory) view returns (bool)"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3099:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964207369676e6174757265","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3135:19:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a","typeString":"literal_string \"invalid signature\""},"value":"invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a","typeString":"literal_string \"invalid signature\""}],"id":2573,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3091:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3091:64:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2580,"nodeType":"ExpressionStatement","src":"3091:64:9"},{"expression":{"arguments":[{"baseExpression":{"id":2582,"name":"_isSettlementSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"3173:22:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2585,"indexExpression":{"expression":{"id":2583,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3196:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:18:9","memberName":"settlementContract","nodeType":"MemberAccess","referencedDeclaration":3194,"src":"3196:24:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3173:48:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736574746c656d656e74206e6f7420737570706f72746564","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3223:26:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_a2271675b9d54702be65073dac4017cbbc09dc6b96183137f4b1a06492bbf0e9","typeString":"literal_string \"settlement not supported\""},"value":"settlement not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a2271675b9d54702be65073dac4017cbbc09dc6b96183137f4b1a06492bbf0e9","typeString":"literal_string \"settlement not supported\""}],"id":2581,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3165:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3165:85:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2588,"nodeType":"ExpressionStatement","src":"3165:85:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2590,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3268:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3274:12:9","memberName":"fillDeadline","nodeType":"MemberAccess","referencedDeclaration":3209,"src":"3268:18:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2592,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3289:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3295:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"3289:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3268:36:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c69642066696c6c446561646c696e65","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3306:22:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_b283f66470cf7c2f0aef23a92d46510a6f1eeaf88649fbf9d7a2a2000f193b95","typeString":"literal_string \"invalid fillDeadline\""},"value":"invalid fillDeadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b283f66470cf7c2f0aef23a92d46510a6f1eeaf88649fbf9d7a2a2000f193b95","typeString":"literal_string \"invalid fillDeadline\""}],"id":2589,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3260:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2597,"nodeType":"ExpressionStatement","src":"3260:69:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2599,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3347:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3353:16:9","memberName":"initiateDeadline","nodeType":"MemberAccess","referencedDeclaration":3206,"src":"3347:22:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2601,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3372:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3378:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"3372:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3347:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420696e697469617465446561646c696e65","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3389:26:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_aac48e8ef1da4bf3b3f872975626dc66a9c0ab710743fa45b4916128c158ec38","typeString":"literal_string \"invalid initiateDeadline\""},"value":"invalid initiateDeadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aac48e8ef1da4bf3b3f872975626dc66a9c0ab710743fa45b4916128c158ec38","typeString":"literal_string \"invalid initiateDeadline\""}],"id":2598,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3339:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3339:77:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2606,"nodeType":"ExpressionStatement","src":"3339:77:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2608,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3434:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3440:5:9","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":3200,"src":"3434:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":2610,"name":"_nonceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"3449:8:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2613,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2611,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"3458:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3458:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3449:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3434:37:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206e6f6e6365","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3473:15:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_71713bd5478b586cac708caace92720e83db31d1de15cf938f760684d5501e10","typeString":"literal_string \"invalid nonce\""},"value":"invalid nonce"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71713bd5478b586cac708caace92720e83db31d1de15cf938f760684d5501e10","typeString":"literal_string \"invalid nonce\""}],"id":2607,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3426:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3426:63:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2617,"nodeType":"ExpressionStatement","src":"3426:63:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2619,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3507:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3513:13:9","memberName":"originChainId","nodeType":"MemberAccess","referencedDeclaration":3203,"src":"3507:19:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2621,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3530:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3536:7:9","memberName":"chainid","nodeType":"MemberAccess","src":"3530:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3507:36:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206f726967696e436861696e4964","id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3545:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_03924fc90aefba9a192d3b85b327d4c7172ad1107e2c1e65b2790c92b092cdc0","typeString":"literal_string \"invalid originChainId\""},"value":"invalid originChainId"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_03924fc90aefba9a192d3b85b327d4c7172ad1107e2c1e65b2790c92b092cdc0","typeString":"literal_string \"invalid originChainId\""}],"id":2618,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3499:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3499:70:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2626,"nodeType":"ExpressionStatement","src":"3499:70:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2628,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3587:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3593:7:9","memberName":"swapper","nodeType":"MemberAccess","referencedDeclaration":3197,"src":"3587:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2630,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"3604:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3604:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3587:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c69642073776170706572","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:17:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb945459f1ea11798f739f23fe4369bb80c608b965f9afe5e22273b75bc11aa3","typeString":"literal_string \"invalid swapper\""},"value":"invalid swapper"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb945459f1ea11798f739f23fe4369bb80c608b965f9afe5e22273b75bc11aa3","typeString":"literal_string \"invalid swapper\""}],"id":2627,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3579:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3579:57:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2635,"nodeType":"ExpressionStatement","src":"3579:57:9"},{"assignments":[2637],"declarations":[{"constant":false,"id":2637,"mutability":"mutable","name":"inputAmount","nameLocation":"3656:11:9","nodeType":"VariableDeclaration","scope":2725,"src":"3648:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"3648:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2646,"initialValue":{"arguments":[{"expression":{"id":2640,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"3682:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3688:9:9","memberName":"orderData","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"3682:15:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":2643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3700:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"3700:7:9","typeDescriptions":{}}}],"id":2644,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3699:9:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":2638,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3671:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3675:6:9","memberName":"decode","nodeType":"MemberAccess","src":"3671:10:9","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3671:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3647:62:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2648,"name":"inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"3727:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3741:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3727:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e7420696e70757420616d6f756e74","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3744:27:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_b601b48934a5e0ad22058b921e0e8f54236eeea2ad7a294b6399a5167ec92ad4","typeString":"literal_string \"insufficient input amount\""},"value":"insufficient input amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b601b48934a5e0ad22058b921e0e8f54236eeea2ad7a294b6399a5167ec92ad4","typeString":"literal_string \"insufficient input amount\""}],"id":2647,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3719:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3719:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2653,"nodeType":"ExpressionStatement","src":"3719:53:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2655,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3790:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3794:5:9","memberName":"value","nodeType":"MemberAccess","src":"3790:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2657,"name":"inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"3803:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3790:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e74206d73672e76616c7565","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3816:24:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_26a676b15b71d69e34107575030101aa26f954c7dfedd11c91bef20b7eaa6a6e","typeString":"literal_string \"insufficient msg.value\""},"value":"insufficient msg.value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_26a676b15b71d69e34107575030101aa26f954c7dfedd11c91bef20b7eaa6a6e","typeString":"literal_string \"insufficient msg.value\""}],"id":2654,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3782:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3782:59:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2661,"nodeType":"ExpressionStatement","src":"3782:59:9"},{"assignments":[2663],"declarations":[{"constant":false,"id":2663,"mutability":"mutable","name":"destChainId","nameLocation":"3861:11:9","nodeType":"VariableDeclaration","scope":2725,"src":"3853:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2662,"name":"uint256","nodeType":"ElementaryTypeName","src":"3853:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2671,"initialValue":{"arguments":[{"id":2666,"name":"fillerData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"3887:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":2668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3900:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2667,"name":"uint256","nodeType":"ElementaryTypeName","src":"3900:7:9","typeDescriptions":{}}}],"id":2669,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3899:9:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":2664,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3876:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3880:6:9","memberName":"decode","nodeType":"MemberAccess","src":"3876:10:9","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3876:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3852:57:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2673,"name":"destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"3927:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2674,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3942:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3948:7:9","memberName":"chainid","nodeType":"MemberAccess","src":"3942:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3927:28:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6465737420636861696e206964206d75737420626520646966666572656e74","id":2677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3957:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8d87f63b84b62e30747d02f72298fa13930e340255f9c84a9c9f504965b6f64","typeString":"literal_string \"dest chain id must be different\""},"value":"dest chain id must be different"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c8d87f63b84b62e30747d02f72298fa13930e340255f9c84a9c9f504965b6f64","typeString":"literal_string \"dest chain id must be different\""}],"id":2672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3919:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3919:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2679,"nodeType":"ExpressionStatement","src":"3919:72:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2681,"name":"_settlementToChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"4009:20:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2684,"indexExpression":{"expression":{"id":2682,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"4030:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4036:18:9","memberName":"settlementContract","nodeType":"MemberAccess","referencedDeclaration":3194,"src":"4030:24:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4009:46:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2685,"name":"destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4059:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4009:61:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206465737420636861696e206964","id":2687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4072:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_139653279c350dbad7cac2e107facefd8c97c47e2cbefb2b7a62cb70e605a12e","typeString":"literal_string \"invalid dest chain id\""},"value":"invalid dest chain id"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_139653279c350dbad7cac2e107facefd8c97c47e2cbefb2b7a62cb70e605a12e","typeString":"literal_string \"invalid dest chain id\""}],"id":2680,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4001:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4001:95:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2689,"nodeType":"ExpressionStatement","src":"4001:95:9"},{"assignments":[2691],"declarations":[{"constant":false,"id":2691,"mutability":"mutable","name":"orderHash","nameLocation":"4115:9:9","nodeType":"VariableDeclaration","scope":2725,"src":"4107:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2690,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4107:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2695,"initialValue":{"arguments":[{"id":2693,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"4138:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}],"id":2692,"name":"_hashOrder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"4127:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CrossChainOrder_$3213_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct CrossChainOrder memory) pure returns (bytes32)"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4127:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4107:37:9"},{"expression":{"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2696,"name":"_orders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"4154:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder storage ref)"}},"id":2698,"indexExpression":{"id":2697,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"4162:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4154:18:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2699,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"4175:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},"src":"4154:26:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"id":2701,"nodeType":"ExpressionStatement","src":"4154:26:9"},{"expression":{"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2702,"name":"_destChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"4190:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2704,"indexExpression":{"id":2703,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"4202:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4190:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2705,"name":"destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4215:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4190:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2707,"nodeType":"ExpressionStatement","src":"4190:36:9"},{"expression":{"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2708,"name":"_nonceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"4237:8:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2711,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2709,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"4246:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4246:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4237:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4263:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4237:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2714,"nodeType":"ExpressionStatement","src":"4237:27:9"},{"expression":{"arguments":[{"id":2716,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"4291:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}},{"id":2717,"name":"destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"4298:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2715,"name":"_broadcastOrder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"4275:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_CrossChainOrder_$3213_calldata_ptr_$_t_uint256_$returns$__$","typeString":"function (struct CrossChainOrder calldata,uint256)"}},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4275:35:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2719,"nodeType":"ExpressionStatement","src":"4275:35:9"},{"eventCall":{"arguments":[{"id":2721,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"4338:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2722,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"4349:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder calldata"}],"id":2720,"name":"OrderCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"4325:12:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_memory_ptr_$returns$__$","typeString":"function (bytes32,struct CrossChainOrder memory)"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4325:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2724,"nodeType":"EmitStatement","src":"4320:35:9"}]},"functionSelector":"962fc2a3","id":2726,"implemented":true,"kind":"function","modifiers":[{"id":2571,"kind":"modifierInvocation","modifierName":{"id":2570,"name":"nonReentrant","nameLocations":["3068:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"3068:12:9"},"nodeType":"ModifierInvocation","src":"3068:12:9"}],"name":"initiate","nameLocation":"2957:8:9","nodeType":"FunctionDefinition","parameters":{"id":2569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2564,"mutability":"mutable","name":"order","nameLocation":"2991:5:9","nodeType":"VariableDeclaration","scope":2726,"src":"2966:30:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2563,"nodeType":"UserDefinedTypeName","pathNode":{"id":2562,"name":"CrossChainOrder","nameLocations":["2966:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"2966:15:9"},"referencedDeclaration":3213,"src":"2966:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"},{"constant":false,"id":2566,"mutability":"mutable","name":"signature","nameLocation":"3013:9:9","nodeType":"VariableDeclaration","scope":2726,"src":"2998:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2565,"name":"bytes","nodeType":"ElementaryTypeName","src":"2998:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2568,"mutability":"mutable","name":"fillerData","nameLocation":"3039:10:9","nodeType":"VariableDeclaration","scope":2726,"src":"3024:25:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2567,"name":"bytes","nodeType":"ElementaryTypeName","src":"3024:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2965:85:9"},"returnParameters":{"id":2572,"nodeType":"ParameterList","parameters":[],"src":"3081:0:9"},"scope":3188,"src":"2948:1414:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":2812,"nodeType":"Block","src":"4425:598:9","statements":[{"assignments":[2735],"declarations":[{"constant":false,"id":2735,"mutability":"mutable","name":"order","nameLocation":"4458:5:9","nodeType":"VariableDeclaration","scope":2812,"src":"4435:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2734,"nodeType":"UserDefinedTypeName","pathNode":{"id":2733,"name":"CrossChainOrder","nameLocations":["4435:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"4435:15:9"},"referencedDeclaration":3213,"src":"4435:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"}],"id":2739,"initialValue":{"baseExpression":{"id":2736,"name":"_orders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"4466:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder storage ref)"}},"id":2738,"indexExpression":{"id":2737,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"4474:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4466:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4435:44:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2741,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"4497:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4503:7:9","memberName":"swapper","nodeType":"MemberAccess","referencedDeclaration":3197,"src":"4497:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2743,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"4514:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4514:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4497:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c69642073776170706572","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4528:17:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb945459f1ea11798f739f23fe4369bb80c608b965f9afe5e22273b75bc11aa3","typeString":"literal_string \"invalid swapper\""},"value":"invalid swapper"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb945459f1ea11798f739f23fe4369bb80c608b965f9afe5e22273b75bc11aa3","typeString":"literal_string \"invalid swapper\""}],"id":2740,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4489:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4489:57:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2748,"nodeType":"ExpressionStatement","src":"4489:57:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2750,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"4564:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4570:13:9","memberName":"originChainId","nodeType":"MemberAccess","referencedDeclaration":3203,"src":"4564:19:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2752,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4587:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4593:7:9","memberName":"chainid","nodeType":"MemberAccess","src":"4587:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4564:36:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206f726967696e20636861696e","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4602:22:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_e358f80d0950f2cb5516a6006839c8bd21fda25e2e8da03ae1d7e884e2f7f463","typeString":"literal_string \"invalid origin chain\""},"value":"invalid origin chain"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e358f80d0950f2cb5516a6006839c8bd21fda25e2e8da03ae1d7e884e2f7f463","typeString":"literal_string \"invalid origin chain\""}],"id":2749,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4556:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4556:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2757,"nodeType":"ExpressionStatement","src":"4556:69:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2759,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"4643:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2761,"indexExpression":{"id":2760,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"4660:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4643:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4669:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4643:27:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6f72646572206973206d617463686564","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:18:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_f68dea25b2121ef63f16cbf66fb1ce6a288f88167942e5cf0162311f9fdd2158","typeString":"literal_string \"order is matched\""},"value":"order is matched"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f68dea25b2121ef63f16cbf66fb1ce6a288f88167942e5cf0162311f9fdd2158","typeString":"literal_string \"order is matched\""}],"id":2758,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4635:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4635:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2766,"nodeType":"ExpressionStatement","src":"4635:56:9"},{"assignments":[2768],"declarations":[{"constant":false,"id":2768,"mutability":"mutable","name":"inputAmount","nameLocation":"4711:11:9","nodeType":"VariableDeclaration","scope":2812,"src":"4703:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2767,"name":"uint256","nodeType":"ElementaryTypeName","src":"4703:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2777,"initialValue":{"arguments":[{"expression":{"id":2771,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"4737:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4743:9:9","memberName":"orderData","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"4737:15:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4755:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2773,"name":"uint256","nodeType":"ElementaryTypeName","src":"4755:7:9","typeDescriptions":{}}}],"id":2775,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:9:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":2769,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4726:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4730:6:9","memberName":"decode","nodeType":"MemberAccess","src":"4726:10:9","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4726:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4702:62:9"},{"expression":{"arguments":[{"id":2784,"name":"inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"4806:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":2780,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"4782:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2781,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4788:7:9","memberName":"swapper","nodeType":"MemberAccess","referencedDeclaration":3197,"src":"4782:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4774:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2778,"name":"address","nodeType":"ElementaryTypeName","src":"4774:8:9","stateMutability":"payable","typeDescriptions":{}}},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4774:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4797:8:9","memberName":"transfer","nodeType":"MemberAccess","src":"4774:31:9","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4774:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2786,"nodeType":"ExpressionStatement","src":"4774:44:9"},{"assignments":[2788],"declarations":[{"constant":false,"id":2788,"mutability":"mutable","name":"destChainId","nameLocation":"4837:11:9","nodeType":"VariableDeclaration","scope":2812,"src":"4829:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"4829:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2792,"initialValue":{"baseExpression":{"id":2789,"name":"_destChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"4851:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2791,"indexExpression":{"id":2790,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"4863:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4851:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4829:39:9"},{"expression":{"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4878:20:9","subExpression":{"baseExpression":{"id":2793,"name":"_orders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"4885:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder storage ref)"}},"id":2795,"indexExpression":{"id":2794,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"4893:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4885:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2797,"nodeType":"ExpressionStatement","src":"4878:20:9"},{"expression":{"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4908:24:9","subExpression":{"baseExpression":{"id":2798,"name":"_destChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"4915:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2800,"indexExpression":{"id":2799,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"4927:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4915:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2802,"nodeType":"ExpressionStatement","src":"4908:24:9"},{"expression":{"arguments":[{"id":2804,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"4965:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2805,"name":"destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"4971:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2803,"name":"_broadcastOrderDelete","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"4943:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4943:40:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2807,"nodeType":"ExpressionStatement","src":"4943:40:9"},{"eventCall":{"arguments":[{"id":2809,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"5011:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2808,"name":"OrderDeleted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"4998:12:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4998:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2811,"nodeType":"EmitStatement","src":"4993:23:9"}]},"functionSelector":"87a61cbd","id":2813,"implemented":true,"kind":"function","modifiers":[{"id":2731,"kind":"modifierInvocation","modifierName":{"id":2730,"name":"nonReentrant","nameLocations":["4412:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"4412:12:9"},"nodeType":"ModifierInvocation","src":"4412:12:9"}],"name":"deleteOrder","nameLocation":"4377:11:9","nodeType":"FunctionDefinition","parameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"hash","nameLocation":"4397:4:9","nodeType":"VariableDeclaration","scope":2813,"src":"4389:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2727,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4389:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4388:14:9"},"returnParameters":{"id":2732,"nodeType":"ParameterList","parameters":[],"src":"4425:0:9"},"scope":3188,"src":"4368:655:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2824,"nodeType":"Block","src":"5092:38:9","statements":[{"expression":{"baseExpression":{"id":2820,"name":"_nonceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"5109:8:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2822,"indexExpression":{"id":2821,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"5118:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5109:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2819,"id":2823,"nodeType":"Return","src":"5102:21:9"}]},"functionSelector":"ed2a2d64","id":2825,"implemented":true,"kind":"function","modifiers":[],"name":"nonceOf","nameLocation":"5038:7:9","nodeType":"FunctionDefinition","parameters":{"id":2816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2815,"mutability":"mutable","name":"user","nameLocation":"5054:4:9","nodeType":"VariableDeclaration","scope":2825,"src":"5046:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2814,"name":"address","nodeType":"ElementaryTypeName","src":"5046:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5045:14:9"},"returnParameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2825,"src":"5083:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"5083:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5082:9:9"},"scope":3188,"src":"5029:101:9","stateMutability":"view","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"5136:35:9","text":"\n Order Matching"},"id":2830,"mutability":"mutable","name":"_matchTimestamps","nameLocation":"5213:16:9","nodeType":"VariableDeclaration","scope":3188,"src":"5176:53:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":2829,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5184:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"5176:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"5195:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2834,"mutability":"mutable","name":"_matchedOrders","nameLocation":"5272:14:9","nodeType":"VariableDeclaration","scope":3188,"src":"5235:51:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"typeName":{"id":2833,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5243:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"5235:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5254:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"1aee23318ace74c1893db3e517937c0e6a32fb0332ea01c816ed4d1467d11c3e","id":2842,"name":"OrdersMatched","nameLocation":"5299:13:9","nodeType":"EventDefinition","parameters":{"id":2841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"indexed":true,"mutability":"mutable","name":"orderHashA","nameLocation":"5329:10:9","nodeType":"VariableDeclaration","scope":2842,"src":"5313:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2835,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5313:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2838,"indexed":true,"mutability":"mutable","name":"orderHashB","nameLocation":"5357:10:9","nodeType":"VariableDeclaration","scope":2842,"src":"5341:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2837,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5341:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2840,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"5377:9:9","nodeType":"VariableDeclaration","scope":2842,"src":"5369:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2839,"name":"uint256","nodeType":"ElementaryTypeName","src":"5369:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5312:75:9"},"src":"5293:95:9"},{"anonymous":false,"eventSelector":"7e3d72398aa2625ef2e29633991f10f8fa8d91a2f165fd6a122f2862ab1cccdf","id":2848,"name":"MatchDestroyed","nameLocation":"5399:14:9","nodeType":"EventDefinition","parameters":{"id":2847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2844,"indexed":true,"mutability":"mutable","name":"orderHashA","nameLocation":"5430:10:9","nodeType":"VariableDeclaration","scope":2848,"src":"5414:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2843,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5414:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2846,"indexed":true,"mutability":"mutable","name":"orderHashB","nameLocation":"5458:10:9","nodeType":"VariableDeclaration","scope":2848,"src":"5442:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5442:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5413:56:9"},"src":"5393:77:9"},{"body":{"id":2857,"nodeType":"Block","src":"5574:58:9","statements":[]},"id":2858,"implemented":true,"kind":"function","modifiers":[],"name":"_broadcastMatch","nameLocation":"5485:15:9","nodeType":"FunctionDefinition","parameters":{"id":2855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2850,"mutability":"mutable","name":"orderHashA","nameLocation":"5509:10:9","nodeType":"VariableDeclaration","scope":2858,"src":"5501:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5501:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2852,"mutability":"mutable","name":"orderHashB","nameLocation":"5529:10:9","nodeType":"VariableDeclaration","scope":2858,"src":"5521:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5521:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2854,"mutability":"mutable","name":"matchTimestamp","nameLocation":"5549:14:9","nodeType":"VariableDeclaration","scope":2858,"src":"5541:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2853,"name":"uint256","nodeType":"ElementaryTypeName","src":"5541:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5500:64:9"},"returnParameters":{"id":2856,"nodeType":"ParameterList","parameters":[],"src":"5574:0:9"},"scope":3188,"src":"5476:156:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2865,"nodeType":"Block","src":"5714:58:9","statements":[]},"id":2866,"implemented":true,"kind":"function","modifiers":[],"name":"_broadcastUnmatch","nameLocation":"5647:17:9","nodeType":"FunctionDefinition","parameters":{"id":2863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2860,"mutability":"mutable","name":"orderHashA","nameLocation":"5673:10:9","nodeType":"VariableDeclaration","scope":2866,"src":"5665:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5665:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2862,"mutability":"mutable","name":"orderHashB","nameLocation":"5693:10:9","nodeType":"VariableDeclaration","scope":2866,"src":"5685:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2861,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5685:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5664:40:9"},"returnParameters":{"id":2864,"nodeType":"ParameterList","parameters":[],"src":"5714:0:9"},"scope":3188,"src":"5638:134:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2905,"nodeType":"Block","src":"5875:283:9","statements":[{"expression":{"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2875,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"5885:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2877,"indexExpression":{"id":2876,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"5902:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5885:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2878,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"5916:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5885:45:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2880,"nodeType":"ExpressionStatement","src":"5885:45:9"},{"expression":{"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2881,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"5940:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2883,"indexExpression":{"id":2882,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"5957:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5940:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2884,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"5971:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5940:45:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2886,"nodeType":"ExpressionStatement","src":"5940:45:9"},{"expression":{"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2887,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"5995:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":2889,"indexExpression":{"id":2888,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"6010:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5995:26:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2890,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"6024:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5995:39:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2892,"nodeType":"ExpressionStatement","src":"5995:39:9"},{"expression":{"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2893,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"6044:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":2895,"indexExpression":{"id":2894,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"6059:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6044:26:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2896,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"6073:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6044:39:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2898,"nodeType":"ExpressionStatement","src":"6044:39:9"},{"eventCall":{"arguments":[{"id":2900,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"6112:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2901,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"6124:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2902,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"6136:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2899,"name":"OrdersMatched","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"6098:13:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256)"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6098:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2904,"nodeType":"EmitStatement","src":"6093:58:9"}]},"id":2906,"implemented":true,"kind":"function","modifiers":[],"name":"_matchOrdersLz","nameLocation":"5787:14:9","nodeType":"FunctionDefinition","parameters":{"id":2873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2868,"mutability":"mutable","name":"orderHashA","nameLocation":"5810:10:9","nodeType":"VariableDeclaration","scope":2906,"src":"5802:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2867,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5802:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2870,"mutability":"mutable","name":"orderHashB","nameLocation":"5830:10:9","nodeType":"VariableDeclaration","scope":2906,"src":"5822:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2869,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5822:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2872,"mutability":"mutable","name":"matchTimestamp","nameLocation":"5850:14:9","nodeType":"VariableDeclaration","scope":2906,"src":"5842:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2871,"name":"uint256","nodeType":"ElementaryTypeName","src":"5842:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5801:64:9"},"returnParameters":{"id":2874,"nodeType":"ParameterList","parameters":[],"src":"5875:0:9"},"scope":3188,"src":"5778:380:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2938,"nodeType":"Block","src":"6239:236:9","statements":[{"expression":{"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6249:35:9","subExpression":{"baseExpression":{"id":2913,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"6256:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2915,"indexExpression":{"id":2914,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"6273:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6256:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2917,"nodeType":"ExpressionStatement","src":"6249:35:9"},{"expression":{"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6294:35:9","subExpression":{"baseExpression":{"id":2918,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"6301:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2920,"indexExpression":{"id":2919,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"6318:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6301:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2922,"nodeType":"ExpressionStatement","src":"6294:35:9"},{"expression":{"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6339:33:9","subExpression":{"baseExpression":{"id":2923,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"6346:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":2925,"indexExpression":{"id":2924,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"6361:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6346:26:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2927,"nodeType":"ExpressionStatement","src":"6339:33:9"},{"expression":{"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6382:33:9","subExpression":{"baseExpression":{"id":2928,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"6389:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":2930,"indexExpression":{"id":2929,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"6404:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6389:26:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2932,"nodeType":"ExpressionStatement","src":"6382:33:9"},{"eventCall":{"arguments":[{"id":2934,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"6445:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2935,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"6457:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2933,"name":"MatchDestroyed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"6430:14:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2937,"nodeType":"EmitStatement","src":"6425:43:9"}]},"id":2939,"implemented":true,"kind":"function","modifiers":[],"name":"_unmatchOrdersLz","nameLocation":"6173:16:9","nodeType":"FunctionDefinition","parameters":{"id":2911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2908,"mutability":"mutable","name":"orderHashA","nameLocation":"6198:10:9","nodeType":"VariableDeclaration","scope":2939,"src":"6190:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6190:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2910,"mutability":"mutable","name":"orderHashB","nameLocation":"6218:10:9","nodeType":"VariableDeclaration","scope":2939,"src":"6210:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2909,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6210:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6189:40:9"},"returnParameters":{"id":2912,"nodeType":"ParameterList","parameters":[],"src":"6239:0:9"},"scope":3188,"src":"6164:311:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3105,"nodeType":"Block","src":"6551:1428:9","statements":[{"assignments":[2948],"declarations":[{"constant":false,"id":2948,"mutability":"mutable","name":"orderA","nameLocation":"6584:6:9","nodeType":"VariableDeclaration","scope":3105,"src":"6561:29:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2947,"nodeType":"UserDefinedTypeName","pathNode":{"id":2946,"name":"CrossChainOrder","nameLocations":["6561:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"6561:15:9"},"referencedDeclaration":3213,"src":"6561:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"}],"id":2952,"initialValue":{"baseExpression":{"id":2949,"name":"_orders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"6593:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder storage ref)"}},"id":2951,"indexExpression":{"id":2950,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"6601:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6593:19:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6561:51:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2954,"name":"orderA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"6630:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6637:7:9","memberName":"swapper","nodeType":"MemberAccess","referencedDeclaration":3197,"src":"6630:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6656:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6648:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2956,"name":"address","nodeType":"ElementaryTypeName","src":"6648:7:9","typeDescriptions":{}}},"id":2959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6648:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6630:28:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6f72646572204120646f65736e2774206578697374","id":2961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6660:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_f1edf9865f16641a39963e24f35f76ecdd70eea17fec13ad6c5b24c4e834368e","typeString":"literal_string \"order A doesn't exist\""},"value":"order A doesn't exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f1edf9865f16641a39963e24f35f76ecdd70eea17fec13ad6c5b24c4e834368e","typeString":"literal_string \"order A doesn't exist\""}],"id":2953,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6622:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6622:62:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2963,"nodeType":"ExpressionStatement","src":"6622:62:9"},{"assignments":[2966],"declarations":[{"constant":false,"id":2966,"mutability":"mutable","name":"orderB","nameLocation":"6717:6:9","nodeType":"VariableDeclaration","scope":3105,"src":"6694:29:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":2965,"nodeType":"UserDefinedTypeName","pathNode":{"id":2964,"name":"CrossChainOrder","nameLocations":["6694:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"6694:15:9"},"referencedDeclaration":3213,"src":"6694:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"}],"id":2970,"initialValue":{"baseExpression":{"id":2967,"name":"_orders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"6726:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_CrossChainOrder_$3213_storage_$","typeString":"mapping(bytes32 => struct CrossChainOrder storage ref)"}},"id":2969,"indexExpression":{"id":2968,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"6734:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6726:19:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage","typeString":"struct CrossChainOrder storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6694:51:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2972,"name":"orderB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"6763:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6770:7:9","memberName":"swapper","nodeType":"MemberAccess","referencedDeclaration":3197,"src":"6763:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6789:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6781:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2974,"name":"address","nodeType":"ElementaryTypeName","src":"6781:7:9","typeDescriptions":{}}},"id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6781:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6763:28:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6f72646572204220646f65736e2774206578697374","id":2979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6793:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_123c727286f0d9a1a0d09df42fade7a309bf152a374ee47b0ccc6d891021206e","typeString":"literal_string \"order B doesn't exist\""},"value":"order B doesn't exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_123c727286f0d9a1a0d09df42fade7a309bf152a374ee47b0ccc6d891021206e","typeString":"literal_string \"order B doesn't exist\""}],"id":2971,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6755:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6755:62:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2981,"nodeType":"ExpressionStatement","src":"6755:62:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2983,"name":"orderA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"6836:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6843:12:9","memberName":"fillDeadline","nodeType":"MemberAccess","referencedDeclaration":3209,"src":"6836:19:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2985,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6858:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6864:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"6858:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6836:37:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c69642066696c6c446561646c696e652041","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6875:24:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_e0e949177673e9f9469e46c8ae3049453c34926e4685857495dac5707f5b2212","typeString":"literal_string \"invalid fillDeadline A\""},"value":"invalid fillDeadline A"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e0e949177673e9f9469e46c8ae3049453c34926e4685857495dac5707f5b2212","typeString":"literal_string \"invalid fillDeadline A\""}],"id":2982,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6828:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6828:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2990,"nodeType":"ExpressionStatement","src":"6828:72:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2992,"name":"orderB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"6918:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":2993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6925:12:9","memberName":"fillDeadline","nodeType":"MemberAccess","referencedDeclaration":3209,"src":"6918:19:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2994,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6940:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6946:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"6940:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6918:37:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c69642066696c6c446561646c696e652042","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6957:24:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_4b2a6d023298acd2b5802bb3023b5aa070bfec6d087d8da494bbe4444988dfa1","typeString":"literal_string \"invalid fillDeadline B\""},"value":"invalid fillDeadline B"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4b2a6d023298acd2b5802bb3023b5aa070bfec6d087d8da494bbe4444988dfa1","typeString":"literal_string \"invalid fillDeadline B\""}],"id":2991,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6910:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6910:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2999,"nodeType":"ExpressionStatement","src":"6910:72:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3001,"name":"orderA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7000:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":3002,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7007:16:9","memberName":"initiateDeadline","nodeType":"MemberAccess","referencedDeclaration":3206,"src":"7000:23:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3003,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7026:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7032:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"7026:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7000:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420696e697469617465446561646c696e652041","id":3006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7043:28:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_41930f0bc9780c93d2e73f4050f0ea98a23ca7d321e649e89fd452f2c05c2422","typeString":"literal_string \"invalid initiateDeadline A\""},"value":"invalid initiateDeadline A"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41930f0bc9780c93d2e73f4050f0ea98a23ca7d321e649e89fd452f2c05c2422","typeString":"literal_string \"invalid initiateDeadline A\""}],"id":3000,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6992:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6992:80:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3008,"nodeType":"ExpressionStatement","src":"6992:80:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3010,"name":"orderB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"7090:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":3011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7097:16:9","memberName":"initiateDeadline","nodeType":"MemberAccess","referencedDeclaration":3206,"src":"7090:23:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3012,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7116:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7122:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"7116:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7090:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420696e697469617465446561646c696e652042","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7133:28:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_b8c550279d114b340bb9c11ac21ef4ce617440fdfd628c2d0b20759e38868d08","typeString":"literal_string \"invalid initiateDeadline B\""},"value":"invalid initiateDeadline B"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b8c550279d114b340bb9c11ac21ef4ce617440fdfd628c2d0b20759e38868d08","typeString":"literal_string \"invalid initiateDeadline B\""}],"id":3009,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7082:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7082:80:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3017,"nodeType":"ExpressionStatement","src":"7082:80:9"},{"assignments":[3019],"declarations":[{"constant":false,"id":3019,"mutability":"mutable","name":"inputAmountA","nameLocation":"7182:12:9","nodeType":"VariableDeclaration","scope":3105,"src":"7174:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3018,"name":"uint256","nodeType":"ElementaryTypeName","src":"7174:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3028,"initialValue":{"arguments":[{"expression":{"id":3022,"name":"orderA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7209:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":3023,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7216:9:9","memberName":"orderData","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"7209:16:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7228:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3024,"name":"uint256","nodeType":"ElementaryTypeName","src":"7228:7:9","typeDescriptions":{}}}],"id":3026,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7227:9:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":3020,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7198:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7202:6:9","memberName":"decode","nodeType":"MemberAccess","src":"7198:10:9","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7198:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7173:64:9"},{"assignments":[3030],"declarations":[{"constant":false,"id":3030,"mutability":"mutable","name":"inputAmountB","nameLocation":"7256:12:9","nodeType":"VariableDeclaration","scope":3105,"src":"7248:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"7248:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3039,"initialValue":{"arguments":[{"expression":{"id":3033,"name":"orderB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"7283:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":3034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7290:9:9","memberName":"orderData","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"7283:16:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7302:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3035,"name":"uint256","nodeType":"ElementaryTypeName","src":"7302:7:9","typeDescriptions":{}}}],"id":3037,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7301:9:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":3031,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7272:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7276:6:9","memberName":"decode","nodeType":"MemberAccess","src":"7272:10:9","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7272:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7247:64:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3041,"name":"inputAmountA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"7329:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3042,"name":"inputAmountB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"7345:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7329:28:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e70757420616d6f756e7473206d69736d61746368","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7359:24:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d601796037cf370c0b2e35f1db1ed868476fb5bfaa1033509fefa177fa42ac5e","typeString":"literal_string \"input amounts mismatch\""},"value":"input amounts mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d601796037cf370c0b2e35f1db1ed868476fb5bfaa1033509fefa177fa42ac5e","typeString":"literal_string \"input amounts mismatch\""}],"id":3040,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7321:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7321:63:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3046,"nodeType":"ExpressionStatement","src":"7321:63:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3048,"name":"_destChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"7416:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3050,"indexExpression":{"id":3049,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"7428:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7416:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3051,"name":"orderB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"7443:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":3052,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7450:13:9","memberName":"originChainId","nodeType":"MemberAccess","referencedDeclaration":3203,"src":"7443:20:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"7416:47:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3054,"name":"_destChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"7479:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3056,"indexExpression":{"id":3055,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"7491:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7479:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3057,"name":"orderA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7506:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_memory_ptr","typeString":"struct CrossChainOrder memory"}},"id":3058,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7513:13:9","memberName":"originChainId","nodeType":"MemberAccess","referencedDeclaration":3203,"src":"7506:20:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"7479:47:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7416:110:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"64657374696e6174696f6e20636861696e73206d69736d61746368","id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7540:29:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_40a0cee58853198d8542bc2a4a4e21eb2e185d8c974ab5afa5d6a3b8ef76a161","typeString":"literal_string \"destination chains mismatch\""},"value":"destination chains mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_40a0cee58853198d8542bc2a4a4e21eb2e185d8c974ab5afa5d6a3b8ef76a161","typeString":"literal_string \"destination chains mismatch\""}],"id":3047,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7395:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7395:184:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3063,"nodeType":"ExpressionStatement","src":"7395:184:9"},{"assignments":[3065],"declarations":[{"constant":false,"id":3065,"mutability":"mutable","name":"matchTimestamp","nameLocation":"7598:14:9","nodeType":"VariableDeclaration","scope":3105,"src":"7590:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3064,"name":"uint256","nodeType":"ElementaryTypeName","src":"7590:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3068,"initialValue":{"expression":{"id":3066,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7615:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7621:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"7615:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7590:40:9"},{"expression":{"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3069,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"7640:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3071,"indexExpression":{"id":3070,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"7657:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7640:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3072,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"7671:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:45:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3074,"nodeType":"ExpressionStatement","src":"7640:45:9"},{"expression":{"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3075,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"7695:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3077,"indexExpression":{"id":3076,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"7712:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7695:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3078,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"7726:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7695:45:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3080,"nodeType":"ExpressionStatement","src":"7695:45:9"},{"expression":{"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3081,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"7750:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3083,"indexExpression":{"id":3082,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"7765:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7750:26:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3084,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"7779:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7750:39:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3086,"nodeType":"ExpressionStatement","src":"7750:39:9"},{"expression":{"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3087,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"7799:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3089,"indexExpression":{"id":3088,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"7814:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7799:26:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3090,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"7828:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7799:39:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3092,"nodeType":"ExpressionStatement","src":"7799:39:9"},{"expression":{"arguments":[{"id":3094,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"7865:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3095,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"7877:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3096,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"7889:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3093,"name":"_broadcastMatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"7849:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256)"}},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7849:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3098,"nodeType":"ExpressionStatement","src":"7849:55:9"},{"eventCall":{"arguments":[{"id":3100,"name":"orderHashA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"7933:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3101,"name":"orderHashB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"7945:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3102,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"7957:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3099,"name":"OrdersMatched","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7919:13:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256)"}},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7919:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3104,"nodeType":"EmitStatement","src":"7914:58:9"}]},"functionSelector":"7fe3826e","id":3106,"implemented":true,"kind":"function","modifiers":[],"name":"matchOrders","nameLocation":"6490:11:9","nodeType":"FunctionDefinition","parameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"orderHashA","nameLocation":"6510:10:9","nodeType":"VariableDeclaration","scope":3106,"src":"6502:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6502:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2943,"mutability":"mutable","name":"orderHashB","nameLocation":"6530:10:9","nodeType":"VariableDeclaration","scope":3106,"src":"6522:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2942,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6522:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6501:40:9"},"returnParameters":{"id":2945,"nodeType":"ParameterList","parameters":[],"src":"6551:0:9"},"scope":3188,"src":"6481:1498:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3173,"nodeType":"Block","src":"8042:589:9","statements":[{"assignments":[3112],"declarations":[{"constant":false,"id":3112,"mutability":"mutable","name":"matchedOrderHash","nameLocation":"8060:16:9","nodeType":"VariableDeclaration","scope":3173,"src":"8052:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8052:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3116,"initialValue":{"baseExpression":{"id":3113,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"8079:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3115,"indexExpression":{"id":3114,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"8094:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8079:25:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8052:52:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3118,"name":"matchedOrderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"8122:16:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8150:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8142:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8142:7:9","typeDescriptions":{}}},"id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8142:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8122:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6f72646572206e6f74206d617463686564","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8154:19:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_ace1e7b04e285a8da71b87d1f0d17ee85d7c8fe93489c587ad25f6d41806ffe9","typeString":"literal_string \"order not matched\""},"value":"order not matched"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ace1e7b04e285a8da71b87d1f0d17ee85d7c8fe93489c587ad25f6d41806ffe9","typeString":"literal_string \"order not matched\""}],"id":3117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8114:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8114:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3126,"nodeType":"ExpressionStatement","src":"8114:60:9"},{"assignments":[3128],"declarations":[{"constant":false,"id":3128,"mutability":"mutable","name":"matchTimestamp","nameLocation":"8193:14:9","nodeType":"VariableDeclaration","scope":3173,"src":"8185:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3127,"name":"uint256","nodeType":"ElementaryTypeName","src":"8185:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3132,"initialValue":{"baseExpression":{"id":3129,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"8210:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3131,"indexExpression":{"id":3130,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"8227:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8210:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8185:52:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3134,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8255:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8261:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"8255:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3136,"name":"matchTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"8273:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"35","id":3137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8290:9:9","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"5"},"src":"8273:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8255:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6d61746368206e6f742065787069726564","id":3140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8301:19:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_61ed4d5304cf716d2536dd758c8ed2cbcdef9e23345cb86ca689fded1396e98c","typeString":"literal_string \"match not expired\""},"value":"match not expired"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_61ed4d5304cf716d2536dd758c8ed2cbcdef9e23345cb86ca689fded1396e98c","typeString":"literal_string \"match not expired\""}],"id":3133,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8247:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8247:74:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3142,"nodeType":"ExpressionStatement","src":"8247:74:9"},{"expression":{"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8332:34:9","subExpression":{"baseExpression":{"id":3143,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"8339:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3145,"indexExpression":{"id":3144,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"8356:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8339:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3147,"nodeType":"ExpressionStatement","src":"8332:34:9"},{"expression":{"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8376:41:9","subExpression":{"baseExpression":{"id":3148,"name":"_matchTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"8383:16:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3150,"indexExpression":{"id":3149,"name":"matchedOrderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"8400:16:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8383:34:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3152,"nodeType":"ExpressionStatement","src":"8376:41:9"},{"expression":{"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8427:32:9","subExpression":{"baseExpression":{"id":3153,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"8434:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3155,"indexExpression":{"id":3154,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"8449:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8434:25:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3157,"nodeType":"ExpressionStatement","src":"8427:32:9"},{"expression":{"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8469:39:9","subExpression":{"baseExpression":{"id":3158,"name":"_matchedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"8476:14:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3160,"indexExpression":{"id":3159,"name":"matchedOrderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"8491:16:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8476:32:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3162,"nodeType":"ExpressionStatement","src":"8469:39:9"},{"expression":{"arguments":[{"id":3164,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"8537:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3165,"name":"matchedOrderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"8548:16:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3163,"name":"_broadcastUnmatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"8519:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8519:46:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3167,"nodeType":"ExpressionStatement","src":"8519:46:9"},{"eventCall":{"arguments":[{"id":3169,"name":"orderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"8596:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3170,"name":"matchedOrderHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"8607:16:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3168,"name":"MatchDestroyed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"8581:14:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8581:43:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3172,"nodeType":"EmitStatement","src":"8576:48:9"}]},"functionSelector":"ffc374c9","id":3174,"implemented":true,"kind":"function","modifiers":[],"name":"destroyExpiredMatch","nameLocation":"7994:19:9","nodeType":"FunctionDefinition","parameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"orderHash","nameLocation":"8022:9:9","nodeType":"VariableDeclaration","scope":3174,"src":"8014:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8014:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8013:19:9"},"returnParameters":{"id":3110,"nodeType":"ParameterList","parameters":[],"src":"8042:0:9"},"scope":3188,"src":"7985:646:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3292],"body":{"id":3186,"nodeType":"Block","src":"8809:8:9","statements":[]},"documentation":{"id":3175,"nodeType":"StructuredDocumentation","src":"8637:36:9","text":"\n Order Resolving"},"functionSelector":"bf6d01d3","id":3187,"implemented":true,"kind":"function","modifiers":[],"name":"resolve","nameLocation":"8687:7:9","nodeType":"FunctionDefinition","parameters":{"id":3181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3178,"mutability":"mutable","name":"order","nameLocation":"8720:5:9","nodeType":"VariableDeclaration","scope":3187,"src":"8695:30:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":3177,"nodeType":"UserDefinedTypeName","pathNode":{"id":3176,"name":"CrossChainOrder","nameLocations":["8695:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"8695:15:9"},"referencedDeclaration":3213,"src":"8695:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"},{"constant":false,"id":3180,"mutability":"mutable","name":"fillerData","nameLocation":"8742:10:9","nodeType":"VariableDeclaration","scope":3187,"src":"8727:25:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3179,"name":"bytes","nodeType":"ElementaryTypeName","src":"8727:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8694:59:9"},"returnParameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3187,"src":"8777:30:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr","typeString":"struct ResolvedCrossChainOrder"},"typeName":{"id":3183,"nodeType":"UserDefinedTypeName","pathNode":{"id":3182,"name":"ResolvedCrossChainOrder","nameLocations":["8777:23:9"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"8777:23:9"},"referencedDeclaration":3248,"src":"8777:23:9","typeDescriptions":{"typeIdentifier":"t_struct$_ResolvedCrossChainOrder_$3248_storage_ptr","typeString":"struct ResolvedCrossChainOrder"}},"visibility":"internal"}],"src":"8776:32:9"},"scope":3188,"src":"8678:139:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3189,"src":"623:8196:9","usedErrors":[13,18,444,765,770,775],"usedEvents":[24,2484,2488,2842,2848]}],"src":"32:8787:9"},"id":9},"contracts/interfaces/IERC7683.sol":{"ast":{"absolutePath":"contracts/interfaces/IERC7683.sol","exportedSymbols":{"CrossChainOrder":[3213],"ISettlementContract":[3293],"Input":[3256],"Output":[3270],"ResolvedCrossChainOrder":[3248]},"id":3294,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3190,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"canonicalName":"CrossChainOrder","documentation":{"id":3191,"nodeType":"StructuredDocumentation","src":"58:155:10","text":"@title CrossChainOrder type\n @notice Standard order struct to be signed by swappers, disseminated to fillers, and submitted to settlement contracts"},"id":3213,"members":[{"constant":false,"id":3194,"mutability":"mutable","name":"settlementContract","nameLocation":"394:18:10","nodeType":"VariableDeclaration","scope":3213,"src":"386:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3193,"name":"address","nodeType":"ElementaryTypeName","src":"386:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3197,"mutability":"mutable","name":"swapper","nameLocation":"536:7:10","nodeType":"VariableDeclaration","scope":3213,"src":"528:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3196,"name":"address","nodeType":"ElementaryTypeName","src":"528:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3200,"mutability":"mutable","name":"nonce","nameLocation":"616:5:10","nodeType":"VariableDeclaration","scope":3213,"src":"608:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3199,"name":"uint256","nodeType":"ElementaryTypeName","src":"608:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3203,"mutability":"mutable","name":"originChainId","nameLocation":"673:13:10","nodeType":"VariableDeclaration","scope":3213,"src":"666:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3202,"name":"uint32","nodeType":"ElementaryTypeName","src":"666:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3206,"mutability":"mutable","name":"initiateDeadline","nameLocation":"757:16:10","nodeType":"VariableDeclaration","scope":3213,"src":"750:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3205,"name":"uint32","nodeType":"ElementaryTypeName","src":"750:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"fillDeadline","nameLocation":"866:12:10","nodeType":"VariableDeclaration","scope":3213,"src":"859:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3208,"name":"uint32","nodeType":"ElementaryTypeName","src":"859:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3212,"mutability":"mutable","name":"orderData","nameLocation":"1079:9:10","nodeType":"VariableDeclaration","scope":3213,"src":"1073:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3211,"name":"bytes","nodeType":"ElementaryTypeName","src":"1073:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"CrossChainOrder","nameLocation":"220:15:10","nodeType":"StructDefinition","scope":3294,"src":"213:878:10","visibility":"public"},{"canonicalName":"ResolvedCrossChainOrder","documentation":{"id":3214,"nodeType":"StructuredDocumentation","src":"1093:352:10","text":"@title ResolvedCrossChainOrder type\n @notice An implementation-generic representation of an order\n @dev Defines all requirements for filling an order by unbundling the implementation-specific orderData.\n @dev Intended to improve integration generalization by allowing fillers to compute the exact input and output information of any order"},"id":3248,"members":[{"constant":false,"id":3217,"mutability":"mutable","name":"settlementContract","nameLocation":"1560:18:10","nodeType":"VariableDeclaration","scope":3248,"src":"1552:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3216,"name":"address","nodeType":"ElementaryTypeName","src":"1552:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3220,"mutability":"mutable","name":"swapper","nameLocation":"1650:7:10","nodeType":"VariableDeclaration","scope":3248,"src":"1642:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3219,"name":"address","nodeType":"ElementaryTypeName","src":"1642:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3223,"mutability":"mutable","name":"nonce","nameLocation":"1730:5:10","nodeType":"VariableDeclaration","scope":3248,"src":"1722:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3226,"mutability":"mutable","name":"originChainId","nameLocation":"1787:13:10","nodeType":"VariableDeclaration","scope":3248,"src":"1780:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3225,"name":"uint32","nodeType":"ElementaryTypeName","src":"1780:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3229,"mutability":"mutable","name":"initiateDeadline","nameLocation":"1871:16:10","nodeType":"VariableDeclaration","scope":3248,"src":"1864:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3228,"name":"uint32","nodeType":"ElementaryTypeName","src":"1864:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3232,"mutability":"mutable","name":"fillDeadline","nameLocation":"1983:12:10","nodeType":"VariableDeclaration","scope":3248,"src":"1976:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3231,"name":"uint32","nodeType":"ElementaryTypeName","src":"1976:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3237,"mutability":"mutable","name":"swapperInputs","nameLocation":"2085:13:10","nodeType":"VariableDeclaration","scope":3248,"src":"2077:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Input_$3256_storage_$dyn_storage_ptr","typeString":"struct Input[]"},"typeName":{"baseType":{"id":3235,"nodeType":"UserDefinedTypeName","pathNode":{"id":3234,"name":"Input","nameLocations":["2077:5:10"],"nodeType":"IdentifierPath","referencedDeclaration":3256,"src":"2077:5:10"},"referencedDeclaration":3256,"src":"2077:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Input_$3256_storage_ptr","typeString":"struct Input"}},"id":3236,"nodeType":"ArrayTypeName","src":"2077:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Input_$3256_storage_$dyn_storage_ptr","typeString":"struct Input[]"}},"visibility":"internal"},{"constant":false,"id":3242,"mutability":"mutable","name":"swapperOutputs","nameLocation":"2188:14:10","nodeType":"VariableDeclaration","scope":3248,"src":"2179:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$3270_storage_$dyn_storage_ptr","typeString":"struct Output[]"},"typeName":{"baseType":{"id":3240,"nodeType":"UserDefinedTypeName","pathNode":{"id":3239,"name":"Output","nameLocations":["2179:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3270,"src":"2179:6:10"},"referencedDeclaration":3270,"src":"2179:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$3270_storage_ptr","typeString":"struct Output"}},"id":3241,"nodeType":"ArrayTypeName","src":"2179:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$3270_storage_$dyn_storage_ptr","typeString":"struct Output[]"}},"visibility":"internal"},{"constant":false,"id":3247,"mutability":"mutable","name":"fillerOutputs","nameLocation":"2290:13:10","nodeType":"VariableDeclaration","scope":3248,"src":"2281:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$3270_storage_$dyn_storage_ptr","typeString":"struct Output[]"},"typeName":{"baseType":{"id":3245,"nodeType":"UserDefinedTypeName","pathNode":{"id":3244,"name":"Output","nameLocations":["2281:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3270,"src":"2281:6:10"},"referencedDeclaration":3270,"src":"2281:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$3270_storage_ptr","typeString":"struct Output"}},"id":3246,"nodeType":"ArrayTypeName","src":"2281:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$3270_storage_$dyn_storage_ptr","typeString":"struct Output[]"}},"visibility":"internal"}],"name":"ResolvedCrossChainOrder","nameLocation":"1452:23:10","nodeType":"StructDefinition","scope":3294,"src":"1445:861:10","visibility":"public"},{"canonicalName":"Input","documentation":{"id":3249,"nodeType":"StructuredDocumentation","src":"2308:62:10","text":"@notice Tokens sent by the swapper as inputs to the order"},"id":3256,"members":[{"constant":false,"id":3252,"mutability":"mutable","name":"token","nameLocation":"2455:5:10","nodeType":"VariableDeclaration","scope":3256,"src":"2447:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3251,"name":"address","nodeType":"ElementaryTypeName","src":"2447:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3255,"mutability":"mutable","name":"amount","nameLocation":"2516:6:10","nodeType":"VariableDeclaration","scope":3256,"src":"2508:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3254,"name":"uint256","nodeType":"ElementaryTypeName","src":"2508:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Input","nameLocation":"2377:5:10","nodeType":"StructDefinition","scope":3294,"src":"2370:155:10","visibility":"public"},{"canonicalName":"Output","documentation":{"id":3257,"nodeType":"StructuredDocumentation","src":"2527:70:10","text":"@notice Tokens that must be receive for a valid order fulfillment"},"id":3270,"members":[{"constant":false,"id":3260,"mutability":"mutable","name":"token","nameLocation":"2749:5:10","nodeType":"VariableDeclaration","scope":3270,"src":"2741:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3259,"name":"address","nodeType":"ElementaryTypeName","src":"2741:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3263,"mutability":"mutable","name":"amount","nameLocation":"2810:6:10","nodeType":"VariableDeclaration","scope":3270,"src":"2802:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3262,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3266,"mutability":"mutable","name":"recipient","nameLocation":"2878:9:10","nodeType":"VariableDeclaration","scope":3270,"src":"2870:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3265,"name":"address","nodeType":"ElementaryTypeName","src":"2870:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3269,"mutability":"mutable","name":"chainId","nameLocation":"2945:7:10","nodeType":"VariableDeclaration","scope":3270,"src":"2938:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3268,"name":"uint32","nodeType":"ElementaryTypeName","src":"2938:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"Output","nameLocation":"2604:6:10","nodeType":"StructDefinition","scope":3294,"src":"2597:358:10","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"ISettlementContract","contractDependencies":[],"contractKind":"interface","documentation":{"id":3271,"nodeType":"StructuredDocumentation","src":"2958:87:10","text":"@title ISettlementContract\n @notice Standard interface for settlement contracts"},"fullyImplemented":false,"id":3293,"linearizedBaseContracts":[3293],"name":"ISettlementContract","nameLocation":"3055:19:10","nodeType":"ContractDefinition","nodes":[{"functionSelector":"962fc2a3","id":3281,"implemented":false,"kind":"function","modifiers":[],"name":"initiate","nameLocation":"3090:8:10","nodeType":"FunctionDefinition","parameters":{"id":3279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3274,"mutability":"mutable","name":"order","nameLocation":"3124:5:10","nodeType":"VariableDeclaration","scope":3281,"src":"3099:30:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":3273,"nodeType":"UserDefinedTypeName","pathNode":{"id":3272,"name":"CrossChainOrder","nameLocations":["3099:15:10"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"3099:15:10"},"referencedDeclaration":3213,"src":"3099:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"},{"constant":false,"id":3276,"mutability":"mutable","name":"signature","nameLocation":"3146:9:10","nodeType":"VariableDeclaration","scope":3281,"src":"3131:24:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3275,"name":"bytes","nodeType":"ElementaryTypeName","src":"3131:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3278,"mutability":"mutable","name":"fillerData","nameLocation":"3172:10:10","nodeType":"VariableDeclaration","scope":3281,"src":"3157:25:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3277,"name":"bytes","nodeType":"ElementaryTypeName","src":"3157:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3098:85:10"},"returnParameters":{"id":3280,"nodeType":"ParameterList","parameters":[],"src":"3200:0:10"},"scope":3293,"src":"3081:120:10","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"bf6d01d3","id":3292,"implemented":false,"kind":"function","modifiers":[],"name":"resolve","nameLocation":"3216:7:10","nodeType":"FunctionDefinition","parameters":{"id":3287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"order","nameLocation":"3249:5:10","nodeType":"VariableDeclaration","scope":3292,"src":"3224:30:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_calldata_ptr","typeString":"struct CrossChainOrder"},"typeName":{"id":3283,"nodeType":"UserDefinedTypeName","pathNode":{"id":3282,"name":"CrossChainOrder","nameLocations":["3224:15:10"],"nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"3224:15:10"},"referencedDeclaration":3213,"src":"3224:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_CrossChainOrder_$3213_storage_ptr","typeString":"struct CrossChainOrder"}},"visibility":"internal"},{"constant":false,"id":3286,"mutability":"mutable","name":"fillerData","nameLocation":"3271:10:10","nodeType":"VariableDeclaration","scope":3292,"src":"3256:25:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3285,"name":"bytes","nodeType":"ElementaryTypeName","src":"3256:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3223:59:10"},"returnParameters":{"id":3291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3292,"src":"3306:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr","typeString":"struct ResolvedCrossChainOrder"},"typeName":{"id":3289,"nodeType":"UserDefinedTypeName","pathNode":{"id":3288,"name":"ResolvedCrossChainOrder","nameLocations":["3306:23:10"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"3306:23:10"},"referencedDeclaration":3248,"src":"3306:23:10","typeDescriptions":{"typeIdentifier":"t_struct$_ResolvedCrossChainOrder_$3248_storage_ptr","typeString":"struct ResolvedCrossChainOrder"}},"visibility":"internal"}],"src":"3305:32:10"},"scope":3293,"src":"3207:131:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3294,"src":"3045:295:10","usedErrors":[],"usedEvents":[]}],"src":"32:3309:10"},"id":10}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"devdoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220195f9d9223e29b7d07593b032d7ca4d36543ca8cc3b93039772852982b57875c64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT PUSH0 SWAP14 SWAP3 0x23 0xE2 SWAP12 PUSH30 0x7593B032D7CA4D36543CA8CC3B93039772852982B57875C64736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"195:6066:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;195:6066:1;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220195f9d9223e29b7d07593b032d7ca4d36543ca8cc3b93039772852982b57875c64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT PUSH0 SWAP14 SWAP3 0x23 0xE2 SWAP12 PUSH30 0x7593B032D7CA4D36543CA8CC3B93039772852982B57875C64736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"195:6066:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":441,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb4914abe7f6eeba5e4ddbf3206858fb8294ce03aaecc1901f0a45a565423f9f64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0x49 EQ 0xAB 0xE7 0xF6 0xEE 0xBA 0x5E 0x4D 0xDB RETURN KECCAK256 PUSH9 0x58FB8294CE03AAECC1 SWAP1 0x1F EXP GASLIMIT 0xA5 PUSH6 0x423F9F64736F PUSH13 0x63430008160033000000000000 ","sourceMap":"251:2847:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb4914abe7f6eeba5e4ddbf3206858fb8294ce03aaecc1901f0a45a565423f9f64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0x49 EQ 0xAB 0xE7 0xF6 0xEE 0xBA 0x5E 0x4D 0xDB RETURN KECCAK256 PUSH9 0x58FB8294CE03AAECC1 SWAP1 0x1F EXP GASLIMIT 0xA5 PUSH6 0x423F9F64736F PUSH13 0x63430008160033000000000000 ","sourceMap":"251:2847:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"}],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200c93ed5abf2325f94c3504b99d7060b82f85abe7c01b4413d9c4819389ff224964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC SWAP4 0xED GAS 0xBF 0x23 0x25 0xF9 0x4C CALLDATALOAD DIV 0xB9 SWAP14 PUSH17 0x60B82F85ABE7C01B4413D9C4819389FF22 0x49 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"344:7386:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;344:7386:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200c93ed5abf2325f94c3504b99d7060b82f85abe7c01b4413d9c4819389ff224964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC SWAP4 0xED GAS 0xBF 0x23 0x25 0xF9 0x4C CALLDATALOAD DIV 0xB9 SWAP14 PUSH17 0x60B82F85ABE7C01B4413D9C4819389FF22 0x49 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"344:7386:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSA.RecoverError,bytes32)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"MessageHashUtils":{"abi":[],"devdoc":{"details":"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201ae276c3a7bb8fe4df92f84c1f034b19969b7e8074a9557b7814a33d02e3840d64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xE2 PUSH23 0xC3A7BB8FE4DF92F84C1F034B19969B7E8074A9557B7814 LOG3 RETURNDATASIZE MUL 0xE3 DUP5 0xD PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"521:3235:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3235:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201ae276c3a7bb8fe4df92f84c1f034b19969b7e8074a9557b7814a33d02e3840d64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xE2 PUSH23 0xC3A7BB8FE4DF92F84C1F034B19969B7E8074A9557B7814 LOG3 RETURNDATASIZE MUL 0xE3 DUP5 0xD PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"521:3235:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220324fcae33b24d21ae3a3906644907ae0f151a6f85cb15a1dbcc8623d0deceb0364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x4F 0xCA 0xE3 EXTCODESIZE 0x24 0xD2 BYTE 0xE3 LOG3 SWAP1 PUSH7 0x44907AE0F151A6 0xF8 0x5C 0xB1 GAS SAR 0xBC 0xC8 PUSH3 0x3D0DEC 0xEB SUB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"203:14914:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220324fcae33b24d21ae3a3906644907ae0f151a6f85cb15a1dbcc8623d0deceb0364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x4F 0xCA 0xE3 EXTCODESIZE 0x24 0xD2 BYTE 0xE3 LOG3 SWAP1 PUSH7 0x44907AE0F151A6 0xF8 0x5C 0xB1 GAS SAR 0xBC 0xC8 PUSH3 0x3D0DEC 0xEB SUB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"203:14914:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202910780e4ad318b06fb6b73574673c7fe5839427085b878ead8eec84c6345e0264736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 LT PUSH25 0xE4AD318B06FB6B73574673C7FE5839427085B878EAD8EEC84 0xC6 CALLVALUE 0x5E MUL PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"216:1047:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202910780e4ad318b06fb6b73574673c7fe5839427085b878ead8eec84c6345e0264736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 LT PUSH25 0xE4AD318B06FB6B73574673C7FE5839427085B878EAD8EEC84 0xC6 CALLVALUE 0x5E MUL PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"216:1047:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SettlementContract.sol":{"SettlementContract":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHashA","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderHashB","type":"bytes32"}],"name":"MatchDestroyed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"bytes","name":"orderData","type":"bytes"}],"indexed":false,"internalType":"struct CrossChainOrder","name":"order","type":"tuple"}],"name":"OrderCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"name":"OrderDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderHashA","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderHashB","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"OrdersMatched","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"bytes","name":"orderData","type":"bytes"}],"internalType":"struct CrossChainOrder","name":"order","type":"tuple"}],"name":"computeOrderHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"deleteOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"name":"destroyExpiredMatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"bytes","name":"orderData","type":"bytes"}],"internalType":"struct CrossChainOrder","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"fillerData","type":"bytes"}],"name":"initiate","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"orderHashA","type":"bytes32"},{"internalType":"bytes32","name":"orderHashB","type":"bytes32"}],"name":"matchOrders","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"nonceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"bytes","name":"orderData","type":"bytes"}],"internalType":"struct CrossChainOrder","name":"order","type":"tuple"},{"internalType":"bytes","name":"fillerData","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Input[]","name":"swapperInputs","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"chainId","type":"uint32"}],"internalType":"struct Output[]","name":"swapperOutputs","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"chainId","type":"uint32"}],"internalType":"struct Output[]","name":"fillerOutputs","type":"tuple[]"}],"internalType":"struct ResolvedCrossChainOrder","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"whitelistSettlementContract","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2379":{"entryPoint":null,"id":2379,"parameterSlots":0,"returnSlots":0},"@_452":{"entryPoint":null,"id":452,"parameterSlots":0,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_msgSender_412":{"entryPoint":null,"id":412,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":74,"id":146,"parameterSlots":1,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:219:11","nodeType":"YulBlock","src":"0:219:11","statements":[{"nativeSrc":"6:3:11","nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nativeSrc":"115:102:11","nodeType":"YulBlock","src":"115:102:11","statements":[{"nativeSrc":"125:26:11","nodeType":"YulAssignment","src":"125:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:11","nodeType":"YulIdentifier","src":"137:9:11"},{"kind":"number","nativeSrc":"148:2:11","nodeType":"YulLiteral","src":"148:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:11","nodeType":"YulIdentifier","src":"133:3:11"},"nativeSrc":"133:18:11","nodeType":"YulFunctionCall","src":"133:18:11"},"variableNames":[{"name":"tail","nativeSrc":"125:4:11","nodeType":"YulIdentifier","src":"125:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:11","nodeType":"YulIdentifier","src":"167:9:11"},{"arguments":[{"name":"value0","nativeSrc":"182:6:11","nodeType":"YulIdentifier","src":"182:6:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"198:3:11","nodeType":"YulLiteral","src":"198:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"203:1:11","nodeType":"YulLiteral","src":"203:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"194:3:11","nodeType":"YulIdentifier","src":"194:3:11"},"nativeSrc":"194:11:11","nodeType":"YulFunctionCall","src":"194:11:11"},{"kind":"number","nativeSrc":"207:1:11","nodeType":"YulLiteral","src":"207:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"190:3:11","nodeType":"YulIdentifier","src":"190:3:11"},"nativeSrc":"190:19:11","nodeType":"YulFunctionCall","src":"190:19:11"}],"functionName":{"name":"and","nativeSrc":"178:3:11","nodeType":"YulIdentifier","src":"178:3:11"},"nativeSrc":"178:32:11","nodeType":"YulFunctionCall","src":"178:32:11"}],"functionName":{"name":"mstore","nativeSrc":"160:6:11","nodeType":"YulIdentifier","src":"160:6:11"},"nativeSrc":"160:51:11","nodeType":"YulFunctionCall","src":"160:51:11"},"nativeSrc":"160:51:11","nodeType":"YulExpressionStatement","src":"160:51:11"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"14:203:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:11","nodeType":"YulTypedName","src":"84:9:11","type":""},{"name":"value0","nativeSrc":"95:6:11","nodeType":"YulTypedName","src":"95:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:11","nodeType":"YulTypedName","src":"106:4:11","type":""}],"src":"14:203:11"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100408161004a565b506001805561009a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612020806100a96000396000f3fe60806040526004361061009c5760003560e01c8063962fc2a311610064578063962fc2a31461015357806397b2b09f14610166578063bf6d01d314610186578063ed2a2d64146101b3578063f2fde38b146101e9578063ffc374c91461020957600080fd5b80635d357deb146100a1578063715018a6146100d45780637fe3826e146100eb57806387a61cbd1461010b5780638da5cb5b1461012b575b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046115b5565b610229565b6040519081526020015b60405180910390f35b3480156100e057600080fd5b506100e9610242565b005b3480156100f757600080fd5b506100e96101063660046115f2565b610256565b34801561011757600080fd5b506100e9610126366004611614565b6107ef565b34801561013757600080fd5b506000546040516001600160a01b0390911681526020016100cb565b6100e9610161366004611676565b610b05565b34801561017257600080fd5b506100e9610181366004611730565b611015565b34801561019257600080fd5b506101a66101a136600461175c565b61104e565b6040516100cb919061187a565b3480156101bf57600080fd5b506100c16101ce366004611959565b6001600160a01b031660009081526006602052604090205490565b3480156101f557600080fd5b506100e9610204366004611959565b6110c8565b34801561021557600080fd5b506100e9610224366004611614565b611103565b600061023c61023783611a5f565b611213565b92915050565b61024a611243565b6102546000611270565b565b6000828152600460208181526040808420815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015463ffffffff8082166060850152640100000000820481166080850152600160401b9091041660a0830152918201805491929160c0840191906102dd90611b04565b80601f016020809104026020016040519081016040528092919081815260200182805461030990611b04565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b5050509190925250505060208101519091506001600160a01b03166103ba5760405162461bcd60e51b81526020600482015260156024820152741bdc99195c881048191bd95cdb89dd08195e1a5cdd605a1b60448201526064015b60405180910390fd5b6000828152600460208181526040808420815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015463ffffffff8082166060850152640100000000820481166080850152600160401b9091041660a0830152918201805491929160c08401919061044190611b04565b80601f016020809104026020016040519081016040528092919081815260200182805461046d90611b04565b80156104ba5780601f1061048f576101008083540402835291602001916104ba565b820191906000526020600020905b81548152906001019060200180831161049d57829003601f168201915b5050509190925250505060208101519091506001600160a01b03166105195760405162461bcd60e51b81526020600482015260156024820152741bdc99195c881088191bd95cdb89dd08195e1a5cdd605a1b60448201526064016103b1565b428260a0015163ffffffff161161056b5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642066696c6c446561646c696e65204160501b60448201526064016103b1565b428160a0015163ffffffff16116105bd5760405162461bcd60e51b815260206004820152601660248201527534b73b30b634b2103334b6362232b0b23634b732902160511b60448201526064016103b1565b42826080015163ffffffff16116106165760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420696e697469617465446561646c696e65204100000000000060448201526064016103b1565b42816080015163ffffffff161161066f5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420696e697469617465446561646c696e65204200000000000060448201526064016103b1565b60008260c001518060200190518101906106899190611b38565b905060008260c001518060200190518101906106a59190611b38565b90508082146106ef5760405162461bcd60e51b81526020600482015260166024820152750d2dce0eae840c2dadeeadce8e640dad2e6dac2e8c6d60531b60448201526064016103b1565b606083015160008781526005602052604090205463ffffffff9091161480156107315750606084015160008681526005602052604090205463ffffffff909116145b61077d5760405162461bcd60e51b815260206004820152601b60248201527f64657374696e6174696f6e20636861696e73206d69736d61746368000000000060448201526064016103b1565b60008681526007602090815260408083204290819055888452818420819055898452600883528184208990558884529281902089905551828152879189917f1aee23318ace74c1893db3e517937c0e6a32fb0332ea01c816ed4d1467d11c3e910160405180910390a350505050505050565b6107f76112c5565b6000818152600460208181526040808420815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015463ffffffff8082166060850152640100000000820481166080850152600160401b9091041660a0830152918201805491929160c08401919061087e90611b04565b80601f01602080910402602001604051908101604052809291908181526020018280546108aa90611b04565b80156108f75780601f106108cc576101008083540402835291602001916108f7565b820191906000526020600020905b8154815290600101906020018083116108da57829003601f168201915b50505050508152505090506109093390565b6001600160a01b031681602001516001600160a01b03161461095f5760405162461bcd60e51b815260206004820152600f60248201526e34b73b30b634b21039bbb0b83832b960891b60448201526064016103b1565b46816060015163ffffffff16146109af5760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b21037b934b3b4b71031b430b4b760611b60448201526064016103b1565b600082815260076020526040902054156109fe5760405162461bcd60e51b815260206004820152601060248201526f1bdc99195c881a5cc81b585d18da195960821b60448201526064016103b1565b60008160c00151806020019051810190610a189190611b38565b60208301516040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015610a55573d6000803e3d6000fd5b5060008381526005602090815260408083205460049283905290832080546001600160a01b031990811682556001820180549091169055600281018490556003810180546bffffffffffffffffffffffff1916905590929091610aba9083018261154f565b505060008481526005602052604081205560405184907ff2503063536670d4ae6671a02eaab3a0174b1d36d85146ce8bd76913eae1d49890600090a2505050610b0260018055565b50565b610b0d6112c5565b610b55610b1986611a5f565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112f392505050565b610b955760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b60448201526064016103b1565b60026000610ba66020880188611959565b6001600160a01b0316815260208101919091526040016000205460ff16610c0f5760405162461bcd60e51b815260206004820152601860248201527f736574746c656d656e74206e6f7420737570706f72746564000000000000000060448201526064016103b1565b42610c2060c0870160a08801611b51565b63ffffffff1611610c6a5760405162461bcd60e51b8152602060048201526014602482015273696e76616c69642066696c6c446561646c696e6560601b60448201526064016103b1565b42610c7b60a0870160808801611b51565b63ffffffff1611610cce5760405162461bcd60e51b815260206004820152601860248201527f696e76616c696420696e697469617465446561646c696e65000000000000000060448201526064016103b1565b3360009081526006602052604090819020549086013514610d215760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b60448201526064016103b1565b46610d326080870160608801611b51565b63ffffffff1614610d7d5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a59081bdc9a59da5b90da185a5b9259605a1b60448201526064016103b1565b33610d8e6040870160208801611959565b6001600160a01b031614610dd65760405162461bcd60e51b815260206004820152600f60248201526e34b73b30b634b21039bbb0b83832b960891b60448201526064016103b1565b6000610de560c0870187611b6e565b810190610df29190611614565b905060008111610e445760405162461bcd60e51b815260206004820152601960248201527f696e73756666696369656e7420696e70757420616d6f756e740000000000000060448201526064016103b1565b803414610e8c5760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206d73672e76616c756560501b60448201526064016103b1565b6000610e9a83850185611614565b9050468103610eeb5760405162461bcd60e51b815260206004820152601f60248201527f6465737420636861696e206964206d75737420626520646966666572656e740060448201526064016103b1565b8060036000610efd60208b018b611959565b6001600160a01b03166001600160a01b031681526020019081526020016000205414610f635760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590819195cdd0818da185a5b881a59605a1b60448201526064016103b1565b6000610f7161023789611a5f565b60008181526004602052604090209091508890610f8e8282611cf2565b5050600081815260056020908152604080832085905533835260069091528120805460019290610fbf908490611dd3565b90915550610fca9050565b807f2952d12adb64a657dc2f54e4263d91d1e436254a0bd4472a3c316eec49d37d0c89604051610ffa9190611e63565b60405180910390a250505061100e60018055565b5050505050565b61101d611243565b6001600160a01b039091166000908152600260209081526040808320805460ff191660011790556003909152902055565b6110c160405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016060815260200160608152602001606081525090565b9392505050565b6110d0611243565b6001600160a01b0381166110fa57604051631e4fbdf760e01b8152600060048201526024016103b1565b610b0281611270565b600081815260086020526040902054806111535760405162461bcd60e51b81526020600482015260116024820152701bdc99195c881b9bdd081b585d18da1959607a1b60448201526064016103b1565b60008281526007602052604090205461116e8161012c611dd3565b42116111b05760405162461bcd60e51b81526020600482015260116024820152701b585d18da081b9bdd08195e1c1a5c9959607a1b60448201526064016103b1565b60008381526007602090815260408083208390558483528083208390558583526008909152808220829055838252812055604051829084907f7e3d72398aa2625ef2e29633991f10f8fa8d91a2f165fd6a122f2862ab1cccdf90600090a3505050565b6000816040516020016112269190611f21565b604051602081830303815290604052805190602001209050919050565b6000546001600160a01b031633146102545760405163118cdaa760e01b81523360048201526024016103b1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b505050565b6002600154036112e857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b5050565b60003361133f8361133961130687611213565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90611350565b6001600160a01b0316149392505050565b600080600080611360868661137a565b92509250925061137082826113c7565b5090949350505050565b600080600083516041036113b45760208401516040850151606086015160001a6113a688828585611480565b9550955095505050506113c0565b50508151600091506002905b9250925092565b60008260038111156113db576113db611fd4565b036113e4575050565b60018260038111156113f8576113f8611fd4565b036114165760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561142a5761142a611fd4565b0361144b5760405163fce698f760e01b8152600481018290526024016103b1565b600382600381111561145f5761145f611fd4565b036112ef576040516335e2f38360e21b8152600481018290526024016103b1565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156114bb5750600091506003905082611545565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561150f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661153b57506000925060019150829050611545565b9250600091508190505b9450945094915050565b50805461155b90611b04565b6000825580601f1061156b575050565b601f016020900490600052602060002090810190610b0291905b808211156115995760008155600101611585565b5090565b600060e082840312156115af57600080fd5b50919050565b6000602082840312156115c757600080fd5b813567ffffffffffffffff8111156115de57600080fd5b6115ea8482850161159d565b949350505050565b6000806040838503121561160557600080fd5b50508035926020909101359150565b60006020828403121561162657600080fd5b5035919050565b60008083601f84011261163f57600080fd5b50813567ffffffffffffffff81111561165757600080fd5b60208301915083602082850101111561166f57600080fd5b9250929050565b60008060008060006060868803121561168e57600080fd5b853567ffffffffffffffff808211156116a657600080fd5b6116b289838a0161159d565b965060208801359150808211156116c857600080fd5b6116d489838a0161162d565b909650945060408801359150808211156116ed57600080fd5b506116fa8882890161162d565b969995985093965092949392505050565b6001600160a01b0381168114610b0257600080fd5b803561172b8161170b565b919050565b6000806040838503121561174357600080fd5b823561174e8161170b565b946020939093013593505050565b60008060006040848603121561177157600080fd5b833567ffffffffffffffff8082111561178957600080fd5b6117958783880161159d565b945060208601359150808211156117ab57600080fd5b506117b88682870161162d565b9497909650939450505050565b60008151808452602080850194506020840160005b8381101561180a57815180516001600160a01b0316885283015183880152604090960195908201906001016117da565b509495945050505050565b60008151808452602080850194506020840160005b8381101561180a57815180516001600160a01b03908116895284820151858a01526040808301519091169089015260609081015163ffffffff16908801526080909601959082019060010161182a565b602081526118946020820183516001600160a01b03169052565b600060208301516118b060408401826001600160a01b03169052565b506040830151606083015260608301516118d2608084018263ffffffff169052565b50608083015163ffffffff811660a08401525060a083015163ffffffff811660c08401525060c08301516101208060e08501526119136101408501836117c5565b915060e0850151601f196101008187860301818801526119338584611815565b90880151878203909201848801529350905061194f8382611815565b9695505050505050565b60006020828403121561196b57600080fd5b81356110c18161170b565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156119af576119af611976565b60405290565b63ffffffff81168114610b0257600080fd5b803561172b816119b5565b600082601f8301126119e357600080fd5b813567ffffffffffffffff808211156119fe576119fe611976565b604051601f8301601f19908116603f01168101908282118183101715611a2657611a26611976565b81604052838152866020858801011115611a3f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060e08236031215611a7157600080fd5b611a7961198c565b611a8283611720565b8152611a9060208401611720565b602082015260408301356040820152611aab606084016119c7565b6060820152611abc608084016119c7565b6080820152611acd60a084016119c7565b60a082015260c083013567ffffffffffffffff811115611aec57600080fd5b611af8368286016119d2565b60c08301525092915050565b600181811c90821680611b1857607f821691505b6020821081036115af57634e487b7160e01b600052602260045260246000fd5b600060208284031215611b4a57600080fd5b5051919050565b600060208284031215611b6357600080fd5b81356110c1816119b5565b6000808335601e19843603018112611b8557600080fd5b83018035915067ffffffffffffffff821115611ba057600080fd5b60200191503681900382131561166f57600080fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813561023c816119b5565b601f8211156112c0576000816000526020600020601f850160051c81016020861015611c0b5750805b601f850160051c820191505b81811015611c2a57828155600101611c17565b505050505050565b67ffffffffffffffff831115611c4a57611c4a611976565b611c5e83611c588354611b04565b83611be2565b6000601f841160018114611c925760008515611c7a5750838201355b600019600387901b1c1916600186901b17835561100e565b600083815260209020601f19861690835b82811015611cc35786850135825560209485019460019092019101611ca3565b5086821015611ce05760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135611cfd8161170b565b611d078183611bb5565b506020820135611d168161170b565b611d238160018401611bb5565b5060408201356002820155600381016060830135611d40816119b5565b81546080850135611d50816119b5565b67ffffffff000000008160201b1663ffffffff841667ffffffffffffffff19841617178455505050611db1611d8760a08501611bd5565b82546bffffffff0000000000000000191660409190911b6bffffffff000000000000000016178255565b50611dbf60c0830183611b6e565b611dcd818360048601611c32565b50505050565b8082018082111561023c57634e487b7160e01b600052601160045260246000fd5b6000808335601e19843603018112611e0b57600080fd5b830160208101925035905067ffffffffffffffff811115611e2b57600080fd5b80360382131561166f57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260008235611e748161170b565b6001600160a01b0390811660208481019190915284013590611e958261170b565b80821660408501525050604083013560608301526060830135611eb7816119b5565b63ffffffff8116608084015250611ed0608084016119c7565b63ffffffff811660a084015250611ee960a084016119c7565b63ffffffff811660c084015250611f0360c0840184611df4565b60e080850152611f1861010085018284611e3a565b95945050505050565b6000602080835260018060a01b038085511660208501528060208601511660408501525060408401516060840152606084015163ffffffff80821660808601528060808701511660a08601528060a08701511660c0860152505060c084015160e08085015280518061010086015260005b81811015611faf5782810184015186820161012001528301611f92565b506101209250600083828701015282601f19601f830116860101935050505092915050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ee4a8cd9f573951438a6da77f7b91c4fa2041a2f2b3d31a205371f738a3b382664736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER DUP1 PUSH2 0x37 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40 DUP2 PUSH2 0x4A JUMP JUMPDEST POP PUSH1 0x1 DUP1 SSTORE PUSH2 0x9A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x2020 DUP1 PUSH2 0xA9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x962FC2A3 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x962FC2A3 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x97B2B09F EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xBF6D01D3 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xED2A2D64 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xFFC374C9 EQ PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5D357DEB EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x7FE3826E EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x87A61CBD EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x242 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x15F2 JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCB JUMP JUMPDEST PUSH2 0xE9 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x1676 JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x181 CALLDATASIZE PUSH1 0x4 PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x1015 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x104E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x187A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x1959 JUMP JUMPDEST PUSH2 0x10C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x1103 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23C PUSH2 0x237 DUP4 PUSH2 0x1A5F JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x24A PUSH2 0x1243 JUMP JUMPDEST PUSH2 0x254 PUSH1 0x0 PUSH2 0x1270 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 PUSH2 0x2DD SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x309 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x356 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x32B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x356 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x339 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1BDC99195C881048191BD95CDB89DD08195E1A5CDD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 PUSH2 0x441 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x46D SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4BA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x48F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4BA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x49D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x519 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1BDC99195C881088191BD95CDB89DD08195E1A5CDD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP3 PUSH1 0xA0 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x696E76616C69642066696C6C446561646C696E652041 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP2 PUSH1 0xA0 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x5BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x34B73B30B634B2103334B6362232B0B23634B7329021 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP3 PUSH1 0x80 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420696E697469617465446561646C696E652041000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP2 PUSH1 0x80 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420696E697469617465446561646C696E652042000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xC0 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x689 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0xC0 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6A5 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0xD2DCE0EAE840C2DADEEADCE8E640DAD2E6DAC2E8C6D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND EQ DUP1 ISZERO PUSH2 0x731 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND EQ JUMPDEST PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64657374696E6174696F6E20636861696E73206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 TIMESTAMP SWAP1 DUP2 SWAP1 SSTORE DUP9 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP10 DUP5 MSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP10 SWAP1 SSTORE DUP9 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP10 SWAP1 SSTORE MLOAD DUP3 DUP2 MSTORE DUP8 SWAP2 DUP10 SWAP2 PUSH32 0x1AEE23318ACE74C1893DB3E517937C0E6A32FB0332EA01C816ED4D1467D11C3E SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7F7 PUSH2 0x12C5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 PUSH2 0x87E SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8AA SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8F7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8CC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8F7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8DA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP PUSH2 0x909 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x34B73B30B634B21039BBB0B83832B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CHAINID DUP2 PUSH1 0x60 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ PUSH2 0x9AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x34B73B30B634B21037B934B3B4B71031B430B4B7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x9FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x1BDC99195C881A5CC81B585D18DA1959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xC0 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA18 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x4 SWAP3 DUP4 SWAP1 MSTORE SWAP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH2 0xABA SWAP1 DUP4 ADD DUP3 PUSH2 0x154F JUMP JUMPDEST POP POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x40 MLOAD DUP5 SWAP1 PUSH32 0xF2503063536670D4AE6671A02EAAB3A0174B1D36D85146CE8BD76913EAE1D498 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP PUSH2 0xB02 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB0D PUSH2 0x12C5 JUMP JUMPDEST PUSH2 0xB55 PUSH2 0xB19 DUP7 PUSH2 0x1A5F JUMP JUMPDEST DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x12F3 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xB95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x696E76616C6964207369676E6174757265 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 PUSH2 0xBA6 PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC0F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574746C656D656E74206E6F7420737570706F727465640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP PUSH2 0xC20 PUSH1 0xC0 DUP8 ADD PUSH1 0xA0 DUP9 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND GT PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x696E76616C69642066696C6C446561646C696E65 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP PUSH2 0xC7B PUSH1 0xA0 DUP8 ADD PUSH1 0x80 DUP9 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND GT PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420696E697469617465446561646C696E650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP7 ADD CALLDATALOAD EQ PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x696E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CHAINID PUSH2 0xD32 PUSH1 0x80 DUP8 ADD PUSH1 0x60 DUP9 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND EQ PUSH2 0xD7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1A5B9D985B1A59081BDC9A59DA5B90DA185A5B9259 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CALLER PUSH2 0xD8E PUSH1 0x40 DUP8 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x34B73B30B634B21039BBB0B83832B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE5 PUSH1 0xC0 DUP8 ADD DUP8 PUSH2 0x1B6E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xDF2 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xE44 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E7420696E70757420616D6F756E7400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST DUP1 CALLVALUE EQ PUSH2 0xE8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x696E73756666696369656E74206D73672E76616C7565 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9A DUP4 DUP6 ADD DUP6 PUSH2 0x1614 JUMP JUMPDEST SWAP1 POP CHAINID DUP2 SUB PUSH2 0xEEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465737420636861696E206964206D75737420626520646966666572656E7400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0xEFD PUSH1 0x20 DUP12 ADD DUP12 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ PUSH2 0xF63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1A5B9D985B1A590819195CDD0818DA185A5B881A59 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF71 PUSH2 0x237 DUP10 PUSH2 0x1A5F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP9 SWAP1 PUSH2 0xF8E DUP3 DUP3 PUSH2 0x1CF2 JUMP JUMPDEST POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE CALLER DUP4 MSTORE PUSH1 0x6 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xFBF SWAP1 DUP5 SWAP1 PUSH2 0x1DD3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xFCA SWAP1 POP JUMP JUMPDEST DUP1 PUSH32 0x2952D12ADB64A657DC2F54E4263D91D1E436254A0BD4472A3C316EEC49D37D0C DUP10 PUSH1 0x40 MLOAD PUSH2 0xFFA SWAP2 SWAP1 PUSH2 0x1E63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP PUSH2 0x100E PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x101D PUSH2 0x1243 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0x10C1 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x10D0 PUSH2 0x1243 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10FA JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH2 0xB02 DUP2 PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1153 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1BDC99195C881B9BDD081B585D18DA1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x116E DUP2 PUSH2 0x12C PUSH2 0x1DD3 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x11B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1B585D18DA081B9BDD08195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP5 DUP4 MSTORE DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP6 DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE DUP4 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 DUP5 SWAP1 PUSH32 0x7E3D72398AA2625EF2E29633991F10F8FA8D91A2F165FD6A122F2862AB1CCCDF SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1226 SWAP2 SWAP1 PUSH2 0x1F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x254 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x12E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x133F DUP4 PUSH2 0x1339 PUSH2 0x1306 DUP8 PUSH2 0x1213 JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1350 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1360 DUP7 DUP7 PUSH2 0x137A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1370 DUP3 DUP3 PUSH2 0x13C7 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 MLOAD PUSH1 0x41 SUB PUSH2 0x13B4 JUMPI PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x13A6 DUP9 DUP3 DUP6 DUP6 PUSH2 0x1480 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x13C0 JUMP JUMPDEST POP POP DUP2 MLOAD PUSH1 0x0 SWAP2 POP PUSH1 0x2 SWAP1 JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x13DB JUMPI PUSH2 0x13DB PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x13E4 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x13F8 JUMPI PUSH2 0x13F8 PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x1416 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x142A JUMPI PUSH2 0x142A PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x144B JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x145F JUMPI PUSH2 0x145F PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x12EF JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0x14BB JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0x1545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x150F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x153B JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0x1545 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x155B SWAP1 PUSH2 0x1B04 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x156B JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB02 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1599 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1585 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15EA DUP5 DUP3 DUP6 ADD PUSH2 0x159D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x163F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x166F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x168E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16B2 DUP10 DUP4 DUP11 ADD PUSH2 0x159D JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D4 DUP10 DUP4 DUP11 ADD PUSH2 0x162D JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x16ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16FA DUP9 DUP3 DUP10 ADD PUSH2 0x162D JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x172B DUP2 PUSH2 0x170B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1743 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x174E DUP2 PUSH2 0x170B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1771 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1795 DUP8 DUP4 DUP9 ADD PUSH2 0x159D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B8 DUP7 DUP3 DUP8 ADD PUSH2 0x162D JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x180A JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 MSTORE DUP4 ADD MLOAD DUP4 DUP9 ADD MSTORE PUSH1 0x40 SWAP1 SWAP7 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x17DA JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x180A JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP10 MSTORE DUP5 DUP3 ADD MLOAD DUP6 DUP11 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP10 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP9 ADD MSTORE PUSH1 0x80 SWAP1 SWAP7 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x182A JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x1894 PUSH1 0x20 DUP3 ADD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x18B0 PUSH1 0x40 DUP5 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x18D2 PUSH1 0x80 DUP5 ADD DUP3 PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x120 DUP1 PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x1913 PUSH2 0x140 DUP6 ADD DUP4 PUSH2 0x17C5 JUMP JUMPDEST SWAP2 POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x1F NOT PUSH2 0x100 DUP2 DUP8 DUP7 SUB ADD DUP2 DUP9 ADD MSTORE PUSH2 0x1933 DUP6 DUP5 PUSH2 0x1815 JUMP JUMPDEST SWAP1 DUP9 ADD MLOAD DUP8 DUP3 SUB SWAP1 SWAP3 ADD DUP5 DUP9 ADD MSTORE SWAP4 POP SWAP1 POP PUSH2 0x194F DUP4 DUP3 PUSH2 0x1815 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10C1 DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19AF JUMPI PUSH2 0x19AF PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x172B DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19FE JUMPI PUSH2 0x19FE PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1A26 JUMPI PUSH2 0x1A26 PUSH2 0x1976 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x1A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 CALLDATASIZE SUB SLT ISZERO PUSH2 0x1A71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A79 PUSH2 0x198C JUMP JUMPDEST PUSH2 0x1A82 DUP4 PUSH2 0x1720 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1A90 PUSH1 0x20 DUP5 ADD PUSH2 0x1720 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1AAB PUSH1 0x60 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1ABC PUSH1 0x80 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x1ACD PUSH1 0xA0 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF8 CALLDATASIZE DUP3 DUP7 ADD PUSH2 0x19D2 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1B18 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x15AF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10C1 DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1B85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x166F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0x23C DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x12C0 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1C0B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C2A JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1C17 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1C4A JUMPI PUSH2 0x1C4A PUSH2 0x1976 JUMP JUMPDEST PUSH2 0x1C5E DUP4 PUSH2 0x1C58 DUP4 SLOAD PUSH2 0x1B04 JUMP JUMPDEST DUP4 PUSH2 0x1BE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1C92 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x1C7A JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x100E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1CC3 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1CA3 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x1CE0 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CFD DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1D07 DUP2 DUP4 PUSH2 0x1BB5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x1D16 DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1D23 DUP2 PUSH1 0x1 DUP5 ADD PUSH2 0x1BB5 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH2 0x1D40 DUP2 PUSH2 0x19B5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x1D50 DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH8 0xFFFFFFFF00000000 DUP2 PUSH1 0x20 SHL AND PUSH4 0xFFFFFFFF DUP5 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP5 AND OR OR DUP5 SSTORE POP POP POP PUSH2 0x1DB1 PUSH2 0x1D87 PUSH1 0xA0 DUP6 ADD PUSH2 0x1BD5 JUMP JUMPDEST DUP3 SLOAD PUSH12 0xFFFFFFFF0000000000000000 NOT AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFF0000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST POP PUSH2 0x1DBF PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x1DCD DUP2 DUP4 PUSH1 0x4 DUP7 ADD PUSH2 0x1C32 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x23C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x166F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x1E74 DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 ADD CALLDATALOAD SWAP1 PUSH2 0x1E95 DUP3 PUSH2 0x170B JUMP JUMPDEST DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH2 0x1EB7 DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH2 0x1ED0 PUSH1 0x80 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE POP PUSH2 0x1EE9 PUSH1 0xA0 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE POP PUSH2 0x1F03 PUSH1 0xC0 DUP5 ADD DUP5 PUSH2 0x1DF4 JUMP JUMPDEST PUSH1 0xE0 DUP1 DUP6 ADD MSTORE PUSH2 0x1F18 PUSH2 0x100 DUP6 ADD DUP3 DUP5 PUSH2 0x1E3A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP6 MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE DUP1 PUSH1 0x20 DUP7 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x80 DUP7 ADD MSTORE DUP1 PUSH1 0x80 DUP8 ADD MLOAD AND PUSH1 0xA0 DUP7 ADD MSTORE DUP1 PUSH1 0xA0 DUP8 ADD MLOAD AND PUSH1 0xC0 DUP7 ADD MSTORE POP POP PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xE0 DUP1 DUP6 ADD MSTORE DUP1 MLOAD DUP1 PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1FAF JUMPI DUP3 DUP2 ADD DUP5 ADD MLOAD DUP7 DUP3 ADD PUSH2 0x120 ADD MSTORE DUP4 ADD PUSH2 0x1F92 JUMP JUMPDEST POP PUSH2 0x120 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP8 ADD ADD MSTORE DUP3 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP7 ADD ADD SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0x4A DUP13 0xD9 CREATE2 PUSH20 0x951438A6DA77F7B91C4FA2041A2F2B3D31A20537 0x1F PUSH20 0x8A3B382664736F6C634300081600330000000000 ","sourceMap":"623:8196:9:-:0;;;869:38;;;;;;;;;-1:-1:-1;735:10:2;;1269:95:0;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;160:51:11;133:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1713:1:3;1917:21;;623:8196:9;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:203:11:-;623:8196:9;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_broadcastMatch_2858":{"entryPoint":4800,"id":2858,"parameterSlots":3,"returnSlots":0},"@_broadcastOrderDelete_2505":{"entryPoint":4847,"id":2505,"parameterSlots":2,"returnSlots":0},"@_broadcastOrder_2497":{"entryPoint":null,"id":2497,"parameterSlots":2,"returnSlots":0},"@_broadcastUnmatch_2866":{"entryPoint":null,"id":2866,"parameterSlots":2,"returnSlots":0},"@_checkOwner_84":{"entryPoint":4675,"id":84,"parameterSlots":0,"returnSlots":0},"@_hashOrder_2409":{"entryPoint":4627,"id":2409,"parameterSlots":1,"returnSlots":1},"@_msgSender_412":{"entryPoint":null,"id":412,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_487":{"entryPoint":null,"id":487,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_479":{"entryPoint":4805,"id":479,"parameterSlots":0,"returnSlots":0},"@_throwError_1101":{"entryPoint":5063,"id":1101,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":4720,"id":146,"parameterSlots":1,"returnSlots":0},"@_verifySignature_2432":{"entryPoint":4851,"id":2432,"parameterSlots":2,"returnSlots":1},"@computeOrderHash_2393":{"entryPoint":553,"id":2393,"parameterSlots":1,"returnSlots":1},"@deleteOrder_2813":{"entryPoint":2031,"id":2813,"parameterSlots":1,"returnSlots":0},"@destroyExpiredMatch_3174":{"entryPoint":4355,"id":3174,"parameterSlots":1,"returnSlots":0},"@initiate_2726":{"entryPoint":2821,"id":2726,"parameterSlots":5,"returnSlots":0},"@matchOrders_3106":{"entryPoint":598,"id":3106,"parameterSlots":2,"returnSlots":0},"@nonceOf_2825":{"entryPoint":null,"id":2825,"parameterSlots":1,"returnSlots":1},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@recover_858":{"entryPoint":4944,"id":858,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":578,"id":98,"parameterSlots":0,"returnSlots":0},"@resolve_3187":{"entryPoint":4174,"id":3187,"parameterSlots":3,"returnSlots":1},"@toEthSignedMessageHash_1117":{"entryPoint":null,"id":1117,"parameterSlots":1,"returnSlots":1},"@transferOwnership_126":{"entryPoint":4296,"id":126,"parameterSlots":1,"returnSlots":0},"@tryRecover_1016":{"entryPoint":5248,"id":1016,"parameterSlots":4,"returnSlots":3},"@tryRecover_828":{"entryPoint":4986,"id":828,"parameterSlots":2,"returnSlots":3},"@whitelistSettlementContract_2463":{"entryPoint":4117,"id":2463,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":5920,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":6610,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":5677,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_struct_CrossChainOrder_calldata":{"entryPoint":5533,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6489,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5936,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":5652,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes32":{"entryPoint":5618,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptr":{"entryPoint":5557,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":5980,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":5750,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":6968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint32":{"entryPoint":6993,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint32":{"entryPoint":6599,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_array_struct_Input_dyn":{"entryPoint":6085,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_struct_Output_dyn":{"entryPoint":6165,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":7738,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_stringliteral_03924fc90aefba9a192d3b85b327d4c7172ad1107e2c1e65b2790c92b092cdc0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_123c727286f0d9a1a0d09df42fade7a309bf152a374ee47b0ccc6d891021206e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_139653279c350dbad7cac2e107facefd8c97c47e2cbefb2b7a62cb70e605a12e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_26a676b15b71d69e34107575030101aa26f954c7dfedd11c91bef20b7eaa6a6e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_40a0cee58853198d8542bc2a4a4e21eb2e185d8c974ab5afa5d6a3b8ef76a161__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41930f0bc9780c93d2e73f4050f0ea98a23ca7d321e649e89fd452f2c05c2422__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4b2a6d023298acd2b5802bb3023b5aa070bfec6d087d8da494bbe4444988dfa1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_61ed4d5304cf716d2536dd758c8ed2cbcdef9e23345cb86ca689fded1396e98c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_71713bd5478b586cac708caace92720e83db31d1de15cf938f760684d5501e10__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a2271675b9d54702be65073dac4017cbbc09dc6b96183137f4b1a06492bbf0e9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_aac48e8ef1da4bf3b3f872975626dc66a9c0ab710743fa45b4916128c158ec38__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ace1e7b04e285a8da71b87d1f0d17ee85d7c8fe93489c587ad25f6d41806ffe9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b283f66470cf7c2f0aef23a92d46510a6f1eeaf88649fbf9d7a2a2000f193b95__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b601b48934a5e0ad22058b921e0e8f54236eeea2ad7a294b6399a5167ec92ad4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b8c550279d114b340bb9c11ac21ef4ce617440fdfd628c2d0b20759e38868d08__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c8d87f63b84b62e30747d02f72298fa13930e340255f9c84a9c9f504965b6f64__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d601796037cf370c0b2e35f1db1ed868476fb5bfaa1033509fefa177fa42ac5e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e0e949177673e9f9469e46c8ae3049453c34926e4685857495dac5707f5b2212__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e358f80d0950f2cb5516a6006839c8bd21fda25e2e8da03ae1d7e884e2f7f463__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f1edf9865f16641a39963e24f35f76ecdd70eea17fec13ad6c5b24c4e834368e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f68dea25b2121ef63f16cbf66fb1ce6a288f88167942e5cf0162311f9fdd2158__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb945459f1ea11798f739f23fe4369bb80c608b965f9afe5e22273b75bc11aa3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptr__to_t_struct$_CrossChainOrder_$3213_memory_ptr__fromStack_reversed":{"entryPoint":7779,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_CrossChainOrder_$3213_memory_ptr__to_t_struct$_CrossChainOrder_$3213_memory_ptr__fromStack_reversed":{"entryPoint":7969,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr__to_t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr__fromStack_reversed":{"entryPoint":6266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":7022,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":6540,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_access_bytes_calldata":{"entryPoint":7668,"id":null,"parameterSlots":2,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":7635,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":7138,"id":null,"parameterSlots":3,"returnSlots":0},"convert_t_struct$_CrossChainOrder_$3213_calldata_ptr_to_t_struct$_CrossChainOrder_$3213_memory_ptr":{"entryPoint":6751,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_bytes_calldata_to_bytes":{"entryPoint":7218,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6916,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":8148,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6518,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_calldatat_uint32":{"entryPoint":7125,"id":null,"parameterSlots":1,"returnSlots":1},"update_storage_value_offset_0t_struct$_CrossChainOrder_$3213_calldata_ptr_to_t_struct$_CrossChainOrder_$3213_storage":{"entryPoint":7410,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_address_to_address":{"entryPoint":7093,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint32_to_uint32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"validator_revert_address":{"entryPoint":5899,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint32":{"entryPoint":6581,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:27198:11","nodeType":"YulBlock","src":"0:27198:11","statements":[{"nativeSrc":"6:3:11","nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nativeSrc":"92:86:11","nodeType":"YulBlock","src":"92:86:11","statements":[{"body":{"nativeSrc":"132:16:11","nodeType":"YulBlock","src":"132:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"141:1:11","nodeType":"YulLiteral","src":"141:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"144:1:11","nodeType":"YulLiteral","src":"144:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"134:6:11","nodeType":"YulIdentifier","src":"134:6:11"},"nativeSrc":"134:12:11","nodeType":"YulFunctionCall","src":"134:12:11"},"nativeSrc":"134:12:11","nodeType":"YulExpressionStatement","src":"134:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nativeSrc":"113:3:11","nodeType":"YulIdentifier","src":"113:3:11"},{"name":"offset","nativeSrc":"118:6:11","nodeType":"YulIdentifier","src":"118:6:11"}],"functionName":{"name":"sub","nativeSrc":"109:3:11","nodeType":"YulIdentifier","src":"109:3:11"},"nativeSrc":"109:16:11","nodeType":"YulFunctionCall","src":"109:16:11"},{"kind":"number","nativeSrc":"127:3:11","nodeType":"YulLiteral","src":"127:3:11","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"105:3:11","nodeType":"YulIdentifier","src":"105:3:11"},"nativeSrc":"105:26:11","nodeType":"YulFunctionCall","src":"105:26:11"},"nativeSrc":"102:46:11","nodeType":"YulIf","src":"102:46:11"},{"nativeSrc":"157:15:11","nodeType":"YulAssignment","src":"157:15:11","value":{"name":"offset","nativeSrc":"166:6:11","nodeType":"YulIdentifier","src":"166:6:11"},"variableNames":[{"name":"value","nativeSrc":"157:5:11","nodeType":"YulIdentifier","src":"157:5:11"}]}]},"name":"abi_decode_struct_CrossChainOrder_calldata","nativeSrc":"14:164:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"66:6:11","nodeType":"YulTypedName","src":"66:6:11","type":""},{"name":"end","nativeSrc":"74:3:11","nodeType":"YulTypedName","src":"74:3:11","type":""}],"returnVariables":[{"name":"value","nativeSrc":"82:5:11","nodeType":"YulTypedName","src":"82:5:11","type":""}],"src":"14:164:11"},{"body":{"nativeSrc":"288:267:11","nodeType":"YulBlock","src":"288:267:11","statements":[{"body":{"nativeSrc":"334:16:11","nodeType":"YulBlock","src":"334:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"343:1:11","nodeType":"YulLiteral","src":"343:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"346:1:11","nodeType":"YulLiteral","src":"346:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"336:6:11","nodeType":"YulIdentifier","src":"336:6:11"},"nativeSrc":"336:12:11","nodeType":"YulFunctionCall","src":"336:12:11"},"nativeSrc":"336:12:11","nodeType":"YulExpressionStatement","src":"336:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"309:7:11","nodeType":"YulIdentifier","src":"309:7:11"},{"name":"headStart","nativeSrc":"318:9:11","nodeType":"YulIdentifier","src":"318:9:11"}],"functionName":{"name":"sub","nativeSrc":"305:3:11","nodeType":"YulIdentifier","src":"305:3:11"},"nativeSrc":"305:23:11","nodeType":"YulFunctionCall","src":"305:23:11"},{"kind":"number","nativeSrc":"330:2:11","nodeType":"YulLiteral","src":"330:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"301:3:11","nodeType":"YulIdentifier","src":"301:3:11"},"nativeSrc":"301:32:11","nodeType":"YulFunctionCall","src":"301:32:11"},"nativeSrc":"298:52:11","nodeType":"YulIf","src":"298:52:11"},{"nativeSrc":"359:37:11","nodeType":"YulVariableDeclaration","src":"359:37:11","value":{"arguments":[{"name":"headStart","nativeSrc":"386:9:11","nodeType":"YulIdentifier","src":"386:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"373:12:11","nodeType":"YulIdentifier","src":"373:12:11"},"nativeSrc":"373:23:11","nodeType":"YulFunctionCall","src":"373:23:11"},"variables":[{"name":"offset","nativeSrc":"363:6:11","nodeType":"YulTypedName","src":"363:6:11","type":""}]},{"body":{"nativeSrc":"439:16:11","nodeType":"YulBlock","src":"439:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"448:1:11","nodeType":"YulLiteral","src":"448:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"451:1:11","nodeType":"YulLiteral","src":"451:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"441:6:11","nodeType":"YulIdentifier","src":"441:6:11"},"nativeSrc":"441:12:11","nodeType":"YulFunctionCall","src":"441:12:11"},"nativeSrc":"441:12:11","nodeType":"YulExpressionStatement","src":"441:12:11"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"411:6:11","nodeType":"YulIdentifier","src":"411:6:11"},{"kind":"number","nativeSrc":"419:18:11","nodeType":"YulLiteral","src":"419:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"408:2:11","nodeType":"YulIdentifier","src":"408:2:11"},"nativeSrc":"408:30:11","nodeType":"YulFunctionCall","src":"408:30:11"},"nativeSrc":"405:50:11","nodeType":"YulIf","src":"405:50:11"},{"nativeSrc":"464:85:11","nodeType":"YulAssignment","src":"464:85:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"521:9:11","nodeType":"YulIdentifier","src":"521:9:11"},{"name":"offset","nativeSrc":"532:6:11","nodeType":"YulIdentifier","src":"532:6:11"}],"functionName":{"name":"add","nativeSrc":"517:3:11","nodeType":"YulIdentifier","src":"517:3:11"},"nativeSrc":"517:22:11","nodeType":"YulFunctionCall","src":"517:22:11"},{"name":"dataEnd","nativeSrc":"541:7:11","nodeType":"YulIdentifier","src":"541:7:11"}],"functionName":{"name":"abi_decode_struct_CrossChainOrder_calldata","nativeSrc":"474:42:11","nodeType":"YulIdentifier","src":"474:42:11"},"nativeSrc":"474:75:11","nodeType":"YulFunctionCall","src":"474:75:11"},"variableNames":[{"name":"value0","nativeSrc":"464:6:11","nodeType":"YulIdentifier","src":"464:6:11"}]}]},"name":"abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptr","nativeSrc":"183:372:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"254:9:11","nodeType":"YulTypedName","src":"254:9:11","type":""},{"name":"dataEnd","nativeSrc":"265:7:11","nodeType":"YulTypedName","src":"265:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"277:6:11","nodeType":"YulTypedName","src":"277:6:11","type":""}],"src":"183:372:11"},{"body":{"nativeSrc":"661:76:11","nodeType":"YulBlock","src":"661:76:11","statements":[{"nativeSrc":"671:26:11","nodeType":"YulAssignment","src":"671:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"683:9:11","nodeType":"YulIdentifier","src":"683:9:11"},{"kind":"number","nativeSrc":"694:2:11","nodeType":"YulLiteral","src":"694:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"679:3:11","nodeType":"YulIdentifier","src":"679:3:11"},"nativeSrc":"679:18:11","nodeType":"YulFunctionCall","src":"679:18:11"},"variableNames":[{"name":"tail","nativeSrc":"671:4:11","nodeType":"YulIdentifier","src":"671:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"713:9:11","nodeType":"YulIdentifier","src":"713:9:11"},{"name":"value0","nativeSrc":"724:6:11","nodeType":"YulIdentifier","src":"724:6:11"}],"functionName":{"name":"mstore","nativeSrc":"706:6:11","nodeType":"YulIdentifier","src":"706:6:11"},"nativeSrc":"706:25:11","nodeType":"YulFunctionCall","src":"706:25:11"},"nativeSrc":"706:25:11","nodeType":"YulExpressionStatement","src":"706:25:11"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"560:177:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"630:9:11","nodeType":"YulTypedName","src":"630:9:11","type":""},{"name":"value0","nativeSrc":"641:6:11","nodeType":"YulTypedName","src":"641:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"652:4:11","nodeType":"YulTypedName","src":"652:4:11","type":""}],"src":"560:177:11"},{"body":{"nativeSrc":"829:161:11","nodeType":"YulBlock","src":"829:161:11","statements":[{"body":{"nativeSrc":"875:16:11","nodeType":"YulBlock","src":"875:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"884:1:11","nodeType":"YulLiteral","src":"884:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"887:1:11","nodeType":"YulLiteral","src":"887:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"877:6:11","nodeType":"YulIdentifier","src":"877:6:11"},"nativeSrc":"877:12:11","nodeType":"YulFunctionCall","src":"877:12:11"},"nativeSrc":"877:12:11","nodeType":"YulExpressionStatement","src":"877:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"850:7:11","nodeType":"YulIdentifier","src":"850:7:11"},{"name":"headStart","nativeSrc":"859:9:11","nodeType":"YulIdentifier","src":"859:9:11"}],"functionName":{"name":"sub","nativeSrc":"846:3:11","nodeType":"YulIdentifier","src":"846:3:11"},"nativeSrc":"846:23:11","nodeType":"YulFunctionCall","src":"846:23:11"},{"kind":"number","nativeSrc":"871:2:11","nodeType":"YulLiteral","src":"871:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"842:3:11","nodeType":"YulIdentifier","src":"842:3:11"},"nativeSrc":"842:32:11","nodeType":"YulFunctionCall","src":"842:32:11"},"nativeSrc":"839:52:11","nodeType":"YulIf","src":"839:52:11"},{"nativeSrc":"900:33:11","nodeType":"YulAssignment","src":"900:33:11","value":{"arguments":[{"name":"headStart","nativeSrc":"923:9:11","nodeType":"YulIdentifier","src":"923:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"910:12:11","nodeType":"YulIdentifier","src":"910:12:11"},"nativeSrc":"910:23:11","nodeType":"YulFunctionCall","src":"910:23:11"},"variableNames":[{"name":"value0","nativeSrc":"900:6:11","nodeType":"YulIdentifier","src":"900:6:11"}]},{"nativeSrc":"942:42:11","nodeType":"YulAssignment","src":"942:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"969:9:11","nodeType":"YulIdentifier","src":"969:9:11"},{"kind":"number","nativeSrc":"980:2:11","nodeType":"YulLiteral","src":"980:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"965:3:11","nodeType":"YulIdentifier","src":"965:3:11"},"nativeSrc":"965:18:11","nodeType":"YulFunctionCall","src":"965:18:11"}],"functionName":{"name":"calldataload","nativeSrc":"952:12:11","nodeType":"YulIdentifier","src":"952:12:11"},"nativeSrc":"952:32:11","nodeType":"YulFunctionCall","src":"952:32:11"},"variableNames":[{"name":"value1","nativeSrc":"942:6:11","nodeType":"YulIdentifier","src":"942:6:11"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32","nativeSrc":"742:248:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"787:9:11","nodeType":"YulTypedName","src":"787:9:11","type":""},{"name":"dataEnd","nativeSrc":"798:7:11","nodeType":"YulTypedName","src":"798:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"810:6:11","nodeType":"YulTypedName","src":"810:6:11","type":""},{"name":"value1","nativeSrc":"818:6:11","nodeType":"YulTypedName","src":"818:6:11","type":""}],"src":"742:248:11"},{"body":{"nativeSrc":"1065:110:11","nodeType":"YulBlock","src":"1065:110:11","statements":[{"body":{"nativeSrc":"1111:16:11","nodeType":"YulBlock","src":"1111:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1120:1:11","nodeType":"YulLiteral","src":"1120:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"1123:1:11","nodeType":"YulLiteral","src":"1123:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1113:6:11","nodeType":"YulIdentifier","src":"1113:6:11"},"nativeSrc":"1113:12:11","nodeType":"YulFunctionCall","src":"1113:12:11"},"nativeSrc":"1113:12:11","nodeType":"YulExpressionStatement","src":"1113:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1086:7:11","nodeType":"YulIdentifier","src":"1086:7:11"},{"name":"headStart","nativeSrc":"1095:9:11","nodeType":"YulIdentifier","src":"1095:9:11"}],"functionName":{"name":"sub","nativeSrc":"1082:3:11","nodeType":"YulIdentifier","src":"1082:3:11"},"nativeSrc":"1082:23:11","nodeType":"YulFunctionCall","src":"1082:23:11"},{"kind":"number","nativeSrc":"1107:2:11","nodeType":"YulLiteral","src":"1107:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1078:3:11","nodeType":"YulIdentifier","src":"1078:3:11"},"nativeSrc":"1078:32:11","nodeType":"YulFunctionCall","src":"1078:32:11"},"nativeSrc":"1075:52:11","nodeType":"YulIf","src":"1075:52:11"},{"nativeSrc":"1136:33:11","nodeType":"YulAssignment","src":"1136:33:11","value":{"arguments":[{"name":"headStart","nativeSrc":"1159:9:11","nodeType":"YulIdentifier","src":"1159:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"1146:12:11","nodeType":"YulIdentifier","src":"1146:12:11"},"nativeSrc":"1146:23:11","nodeType":"YulFunctionCall","src":"1146:23:11"},"variableNames":[{"name":"value0","nativeSrc":"1136:6:11","nodeType":"YulIdentifier","src":"1136:6:11"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"995:180:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1031:9:11","nodeType":"YulTypedName","src":"1031:9:11","type":""},{"name":"dataEnd","nativeSrc":"1042:7:11","nodeType":"YulTypedName","src":"1042:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1054:6:11","nodeType":"YulTypedName","src":"1054:6:11","type":""}],"src":"995:180:11"},{"body":{"nativeSrc":"1224:60:11","nodeType":"YulBlock","src":"1224:60:11","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1241:3:11","nodeType":"YulIdentifier","src":"1241:3:11"},{"arguments":[{"name":"value","nativeSrc":"1250:5:11","nodeType":"YulIdentifier","src":"1250:5:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1265:3:11","nodeType":"YulLiteral","src":"1265:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"1270:1:11","nodeType":"YulLiteral","src":"1270:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1261:3:11","nodeType":"YulIdentifier","src":"1261:3:11"},"nativeSrc":"1261:11:11","nodeType":"YulFunctionCall","src":"1261:11:11"},{"kind":"number","nativeSrc":"1274:1:11","nodeType":"YulLiteral","src":"1274:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1257:3:11","nodeType":"YulIdentifier","src":"1257:3:11"},"nativeSrc":"1257:19:11","nodeType":"YulFunctionCall","src":"1257:19:11"}],"functionName":{"name":"and","nativeSrc":"1246:3:11","nodeType":"YulIdentifier","src":"1246:3:11"},"nativeSrc":"1246:31:11","nodeType":"YulFunctionCall","src":"1246:31:11"}],"functionName":{"name":"mstore","nativeSrc":"1234:6:11","nodeType":"YulIdentifier","src":"1234:6:11"},"nativeSrc":"1234:44:11","nodeType":"YulFunctionCall","src":"1234:44:11"},"nativeSrc":"1234:44:11","nodeType":"YulExpressionStatement","src":"1234:44:11"}]},"name":"abi_encode_address","nativeSrc":"1180:104:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1208:5:11","nodeType":"YulTypedName","src":"1208:5:11","type":""},{"name":"pos","nativeSrc":"1215:3:11","nodeType":"YulTypedName","src":"1215:3:11","type":""}],"src":"1180:104:11"},{"body":{"nativeSrc":"1390:102:11","nodeType":"YulBlock","src":"1390:102:11","statements":[{"nativeSrc":"1400:26:11","nodeType":"YulAssignment","src":"1400:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"1412:9:11","nodeType":"YulIdentifier","src":"1412:9:11"},{"kind":"number","nativeSrc":"1423:2:11","nodeType":"YulLiteral","src":"1423:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1408:3:11","nodeType":"YulIdentifier","src":"1408:3:11"},"nativeSrc":"1408:18:11","nodeType":"YulFunctionCall","src":"1408:18:11"},"variableNames":[{"name":"tail","nativeSrc":"1400:4:11","nodeType":"YulIdentifier","src":"1400:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1442:9:11","nodeType":"YulIdentifier","src":"1442:9:11"},{"arguments":[{"name":"value0","nativeSrc":"1457:6:11","nodeType":"YulIdentifier","src":"1457:6:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1473:3:11","nodeType":"YulLiteral","src":"1473:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"1478:1:11","nodeType":"YulLiteral","src":"1478:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1469:3:11","nodeType":"YulIdentifier","src":"1469:3:11"},"nativeSrc":"1469:11:11","nodeType":"YulFunctionCall","src":"1469:11:11"},{"kind":"number","nativeSrc":"1482:1:11","nodeType":"YulLiteral","src":"1482:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1465:3:11","nodeType":"YulIdentifier","src":"1465:3:11"},"nativeSrc":"1465:19:11","nodeType":"YulFunctionCall","src":"1465:19:11"}],"functionName":{"name":"and","nativeSrc":"1453:3:11","nodeType":"YulIdentifier","src":"1453:3:11"},"nativeSrc":"1453:32:11","nodeType":"YulFunctionCall","src":"1453:32:11"}],"functionName":{"name":"mstore","nativeSrc":"1435:6:11","nodeType":"YulIdentifier","src":"1435:6:11"},"nativeSrc":"1435:51:11","nodeType":"YulFunctionCall","src":"1435:51:11"},"nativeSrc":"1435:51:11","nodeType":"YulExpressionStatement","src":"1435:51:11"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1289:203:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1359:9:11","nodeType":"YulTypedName","src":"1359:9:11","type":""},{"name":"value0","nativeSrc":"1370:6:11","nodeType":"YulTypedName","src":"1370:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1381:4:11","nodeType":"YulTypedName","src":"1381:4:11","type":""}],"src":"1289:203:11"},{"body":{"nativeSrc":"1569:275:11","nodeType":"YulBlock","src":"1569:275:11","statements":[{"body":{"nativeSrc":"1618:16:11","nodeType":"YulBlock","src":"1618:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1627:1:11","nodeType":"YulLiteral","src":"1627:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"1630:1:11","nodeType":"YulLiteral","src":"1630:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1620:6:11","nodeType":"YulIdentifier","src":"1620:6:11"},"nativeSrc":"1620:12:11","nodeType":"YulFunctionCall","src":"1620:12:11"},"nativeSrc":"1620:12:11","nodeType":"YulExpressionStatement","src":"1620:12:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1597:6:11","nodeType":"YulIdentifier","src":"1597:6:11"},{"kind":"number","nativeSrc":"1605:4:11","nodeType":"YulLiteral","src":"1605:4:11","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1593:3:11","nodeType":"YulIdentifier","src":"1593:3:11"},"nativeSrc":"1593:17:11","nodeType":"YulFunctionCall","src":"1593:17:11"},{"name":"end","nativeSrc":"1612:3:11","nodeType":"YulIdentifier","src":"1612:3:11"}],"functionName":{"name":"slt","nativeSrc":"1589:3:11","nodeType":"YulIdentifier","src":"1589:3:11"},"nativeSrc":"1589:27:11","nodeType":"YulFunctionCall","src":"1589:27:11"}],"functionName":{"name":"iszero","nativeSrc":"1582:6:11","nodeType":"YulIdentifier","src":"1582:6:11"},"nativeSrc":"1582:35:11","nodeType":"YulFunctionCall","src":"1582:35:11"},"nativeSrc":"1579:55:11","nodeType":"YulIf","src":"1579:55:11"},{"nativeSrc":"1643:30:11","nodeType":"YulAssignment","src":"1643:30:11","value":{"arguments":[{"name":"offset","nativeSrc":"1666:6:11","nodeType":"YulIdentifier","src":"1666:6:11"}],"functionName":{"name":"calldataload","nativeSrc":"1653:12:11","nodeType":"YulIdentifier","src":"1653:12:11"},"nativeSrc":"1653:20:11","nodeType":"YulFunctionCall","src":"1653:20:11"},"variableNames":[{"name":"length","nativeSrc":"1643:6:11","nodeType":"YulIdentifier","src":"1643:6:11"}]},{"body":{"nativeSrc":"1716:16:11","nodeType":"YulBlock","src":"1716:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1725:1:11","nodeType":"YulLiteral","src":"1725:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"1728:1:11","nodeType":"YulLiteral","src":"1728:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1718:6:11","nodeType":"YulIdentifier","src":"1718:6:11"},"nativeSrc":"1718:12:11","nodeType":"YulFunctionCall","src":"1718:12:11"},"nativeSrc":"1718:12:11","nodeType":"YulExpressionStatement","src":"1718:12:11"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1688:6:11","nodeType":"YulIdentifier","src":"1688:6:11"},{"kind":"number","nativeSrc":"1696:18:11","nodeType":"YulLiteral","src":"1696:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1685:2:11","nodeType":"YulIdentifier","src":"1685:2:11"},"nativeSrc":"1685:30:11","nodeType":"YulFunctionCall","src":"1685:30:11"},"nativeSrc":"1682:50:11","nodeType":"YulIf","src":"1682:50:11"},{"nativeSrc":"1741:29:11","nodeType":"YulAssignment","src":"1741:29:11","value":{"arguments":[{"name":"offset","nativeSrc":"1757:6:11","nodeType":"YulIdentifier","src":"1757:6:11"},{"kind":"number","nativeSrc":"1765:4:11","nodeType":"YulLiteral","src":"1765:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1753:3:11","nodeType":"YulIdentifier","src":"1753:3:11"},"nativeSrc":"1753:17:11","nodeType":"YulFunctionCall","src":"1753:17:11"},"variableNames":[{"name":"arrayPos","nativeSrc":"1741:8:11","nodeType":"YulIdentifier","src":"1741:8:11"}]},{"body":{"nativeSrc":"1822:16:11","nodeType":"YulBlock","src":"1822:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1831:1:11","nodeType":"YulLiteral","src":"1831:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"1834:1:11","nodeType":"YulLiteral","src":"1834:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1824:6:11","nodeType":"YulIdentifier","src":"1824:6:11"},"nativeSrc":"1824:12:11","nodeType":"YulFunctionCall","src":"1824:12:11"},"nativeSrc":"1824:12:11","nodeType":"YulExpressionStatement","src":"1824:12:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1793:6:11","nodeType":"YulIdentifier","src":"1793:6:11"},{"name":"length","nativeSrc":"1801:6:11","nodeType":"YulIdentifier","src":"1801:6:11"}],"functionName":{"name":"add","nativeSrc":"1789:3:11","nodeType":"YulIdentifier","src":"1789:3:11"},"nativeSrc":"1789:19:11","nodeType":"YulFunctionCall","src":"1789:19:11"},{"kind":"number","nativeSrc":"1810:4:11","nodeType":"YulLiteral","src":"1810:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1785:3:11","nodeType":"YulIdentifier","src":"1785:3:11"},"nativeSrc":"1785:30:11","nodeType":"YulFunctionCall","src":"1785:30:11"},{"name":"end","nativeSrc":"1817:3:11","nodeType":"YulIdentifier","src":"1817:3:11"}],"functionName":{"name":"gt","nativeSrc":"1782:2:11","nodeType":"YulIdentifier","src":"1782:2:11"},"nativeSrc":"1782:39:11","nodeType":"YulFunctionCall","src":"1782:39:11"},"nativeSrc":"1779:59:11","nodeType":"YulIf","src":"1779:59:11"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"1497:347:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1532:6:11","nodeType":"YulTypedName","src":"1532:6:11","type":""},{"name":"end","nativeSrc":"1540:3:11","nodeType":"YulTypedName","src":"1540:3:11","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1548:8:11","nodeType":"YulTypedName","src":"1548:8:11","type":""},{"name":"length","nativeSrc":"1558:6:11","nodeType":"YulTypedName","src":"1558:6:11","type":""}],"src":"1497:347:11"},{"body":{"nativeSrc":"2026:790:11","nodeType":"YulBlock","src":"2026:790:11","statements":[{"body":{"nativeSrc":"2072:16:11","nodeType":"YulBlock","src":"2072:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2081:1:11","nodeType":"YulLiteral","src":"2081:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"2084:1:11","nodeType":"YulLiteral","src":"2084:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2074:6:11","nodeType":"YulIdentifier","src":"2074:6:11"},"nativeSrc":"2074:12:11","nodeType":"YulFunctionCall","src":"2074:12:11"},"nativeSrc":"2074:12:11","nodeType":"YulExpressionStatement","src":"2074:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2047:7:11","nodeType":"YulIdentifier","src":"2047:7:11"},{"name":"headStart","nativeSrc":"2056:9:11","nodeType":"YulIdentifier","src":"2056:9:11"}],"functionName":{"name":"sub","nativeSrc":"2043:3:11","nodeType":"YulIdentifier","src":"2043:3:11"},"nativeSrc":"2043:23:11","nodeType":"YulFunctionCall","src":"2043:23:11"},{"kind":"number","nativeSrc":"2068:2:11","nodeType":"YulLiteral","src":"2068:2:11","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2039:3:11","nodeType":"YulIdentifier","src":"2039:3:11"},"nativeSrc":"2039:32:11","nodeType":"YulFunctionCall","src":"2039:32:11"},"nativeSrc":"2036:52:11","nodeType":"YulIf","src":"2036:52:11"},{"nativeSrc":"2097:37:11","nodeType":"YulVariableDeclaration","src":"2097:37:11","value":{"arguments":[{"name":"headStart","nativeSrc":"2124:9:11","nodeType":"YulIdentifier","src":"2124:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"2111:12:11","nodeType":"YulIdentifier","src":"2111:12:11"},"nativeSrc":"2111:23:11","nodeType":"YulFunctionCall","src":"2111:23:11"},"variables":[{"name":"offset","nativeSrc":"2101:6:11","nodeType":"YulTypedName","src":"2101:6:11","type":""}]},{"nativeSrc":"2143:28:11","nodeType":"YulVariableDeclaration","src":"2143:28:11","value":{"kind":"number","nativeSrc":"2153:18:11","nodeType":"YulLiteral","src":"2153:18:11","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2147:2:11","nodeType":"YulTypedName","src":"2147:2:11","type":""}]},{"body":{"nativeSrc":"2198:16:11","nodeType":"YulBlock","src":"2198:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2207:1:11","nodeType":"YulLiteral","src":"2207:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"2210:1:11","nodeType":"YulLiteral","src":"2210:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2200:6:11","nodeType":"YulIdentifier","src":"2200:6:11"},"nativeSrc":"2200:12:11","nodeType":"YulFunctionCall","src":"2200:12:11"},"nativeSrc":"2200:12:11","nodeType":"YulExpressionStatement","src":"2200:12:11"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2186:6:11","nodeType":"YulIdentifier","src":"2186:6:11"},{"name":"_1","nativeSrc":"2194:2:11","nodeType":"YulIdentifier","src":"2194:2:11"}],"functionName":{"name":"gt","nativeSrc":"2183:2:11","nodeType":"YulIdentifier","src":"2183:2:11"},"nativeSrc":"2183:14:11","nodeType":"YulFunctionCall","src":"2183:14:11"},"nativeSrc":"2180:34:11","nodeType":"YulIf","src":"2180:34:11"},{"nativeSrc":"2223:85:11","nodeType":"YulAssignment","src":"2223:85:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2280:9:11","nodeType":"YulIdentifier","src":"2280:9:11"},{"name":"offset","nativeSrc":"2291:6:11","nodeType":"YulIdentifier","src":"2291:6:11"}],"functionName":{"name":"add","nativeSrc":"2276:3:11","nodeType":"YulIdentifier","src":"2276:3:11"},"nativeSrc":"2276:22:11","nodeType":"YulFunctionCall","src":"2276:22:11"},{"name":"dataEnd","nativeSrc":"2300:7:11","nodeType":"YulIdentifier","src":"2300:7:11"}],"functionName":{"name":"abi_decode_struct_CrossChainOrder_calldata","nativeSrc":"2233:42:11","nodeType":"YulIdentifier","src":"2233:42:11"},"nativeSrc":"2233:75:11","nodeType":"YulFunctionCall","src":"2233:75:11"},"variableNames":[{"name":"value0","nativeSrc":"2223:6:11","nodeType":"YulIdentifier","src":"2223:6:11"}]},{"nativeSrc":"2317:48:11","nodeType":"YulVariableDeclaration","src":"2317:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2350:9:11","nodeType":"YulIdentifier","src":"2350:9:11"},{"kind":"number","nativeSrc":"2361:2:11","nodeType":"YulLiteral","src":"2361:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2346:3:11","nodeType":"YulIdentifier","src":"2346:3:11"},"nativeSrc":"2346:18:11","nodeType":"YulFunctionCall","src":"2346:18:11"}],"functionName":{"name":"calldataload","nativeSrc":"2333:12:11","nodeType":"YulIdentifier","src":"2333:12:11"},"nativeSrc":"2333:32:11","nodeType":"YulFunctionCall","src":"2333:32:11"},"variables":[{"name":"offset_1","nativeSrc":"2321:8:11","nodeType":"YulTypedName","src":"2321:8:11","type":""}]},{"body":{"nativeSrc":"2394:16:11","nodeType":"YulBlock","src":"2394:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2403:1:11","nodeType":"YulLiteral","src":"2403:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"2406:1:11","nodeType":"YulLiteral","src":"2406:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2396:6:11","nodeType":"YulIdentifier","src":"2396:6:11"},"nativeSrc":"2396:12:11","nodeType":"YulFunctionCall","src":"2396:12:11"},"nativeSrc":"2396:12:11","nodeType":"YulExpressionStatement","src":"2396:12:11"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2380:8:11","nodeType":"YulIdentifier","src":"2380:8:11"},{"name":"_1","nativeSrc":"2390:2:11","nodeType":"YulIdentifier","src":"2390:2:11"}],"functionName":{"name":"gt","nativeSrc":"2377:2:11","nodeType":"YulIdentifier","src":"2377:2:11"},"nativeSrc":"2377:16:11","nodeType":"YulFunctionCall","src":"2377:16:11"},"nativeSrc":"2374:36:11","nodeType":"YulIf","src":"2374:36:11"},{"nativeSrc":"2419:86:11","nodeType":"YulVariableDeclaration","src":"2419:86:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2475:9:11","nodeType":"YulIdentifier","src":"2475:9:11"},{"name":"offset_1","nativeSrc":"2486:8:11","nodeType":"YulIdentifier","src":"2486:8:11"}],"functionName":{"name":"add","nativeSrc":"2471:3:11","nodeType":"YulIdentifier","src":"2471:3:11"},"nativeSrc":"2471:24:11","nodeType":"YulFunctionCall","src":"2471:24:11"},{"name":"dataEnd","nativeSrc":"2497:7:11","nodeType":"YulIdentifier","src":"2497:7:11"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2445:25:11","nodeType":"YulIdentifier","src":"2445:25:11"},"nativeSrc":"2445:60:11","nodeType":"YulFunctionCall","src":"2445:60:11"},"variables":[{"name":"value1_1","nativeSrc":"2423:8:11","nodeType":"YulTypedName","src":"2423:8:11","type":""},{"name":"value2_1","nativeSrc":"2433:8:11","nodeType":"YulTypedName","src":"2433:8:11","type":""}]},{"nativeSrc":"2514:18:11","nodeType":"YulAssignment","src":"2514:18:11","value":{"name":"value1_1","nativeSrc":"2524:8:11","nodeType":"YulIdentifier","src":"2524:8:11"},"variableNames":[{"name":"value1","nativeSrc":"2514:6:11","nodeType":"YulIdentifier","src":"2514:6:11"}]},{"nativeSrc":"2541:18:11","nodeType":"YulAssignment","src":"2541:18:11","value":{"name":"value2_1","nativeSrc":"2551:8:11","nodeType":"YulIdentifier","src":"2551:8:11"},"variableNames":[{"name":"value2","nativeSrc":"2541:6:11","nodeType":"YulIdentifier","src":"2541:6:11"}]},{"nativeSrc":"2568:48:11","nodeType":"YulVariableDeclaration","src":"2568:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2601:9:11","nodeType":"YulIdentifier","src":"2601:9:11"},{"kind":"number","nativeSrc":"2612:2:11","nodeType":"YulLiteral","src":"2612:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2597:3:11","nodeType":"YulIdentifier","src":"2597:3:11"},"nativeSrc":"2597:18:11","nodeType":"YulFunctionCall","src":"2597:18:11"}],"functionName":{"name":"calldataload","nativeSrc":"2584:12:11","nodeType":"YulIdentifier","src":"2584:12:11"},"nativeSrc":"2584:32:11","nodeType":"YulFunctionCall","src":"2584:32:11"},"variables":[{"name":"offset_2","nativeSrc":"2572:8:11","nodeType":"YulTypedName","src":"2572:8:11","type":""}]},{"body":{"nativeSrc":"2645:16:11","nodeType":"YulBlock","src":"2645:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2654:1:11","nodeType":"YulLiteral","src":"2654:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"2657:1:11","nodeType":"YulLiteral","src":"2657:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2647:6:11","nodeType":"YulIdentifier","src":"2647:6:11"},"nativeSrc":"2647:12:11","nodeType":"YulFunctionCall","src":"2647:12:11"},"nativeSrc":"2647:12:11","nodeType":"YulExpressionStatement","src":"2647:12:11"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"2631:8:11","nodeType":"YulIdentifier","src":"2631:8:11"},{"name":"_1","nativeSrc":"2641:2:11","nodeType":"YulIdentifier","src":"2641:2:11"}],"functionName":{"name":"gt","nativeSrc":"2628:2:11","nodeType":"YulIdentifier","src":"2628:2:11"},"nativeSrc":"2628:16:11","nodeType":"YulFunctionCall","src":"2628:16:11"},"nativeSrc":"2625:36:11","nodeType":"YulIf","src":"2625:36:11"},{"nativeSrc":"2670:86:11","nodeType":"YulVariableDeclaration","src":"2670:86:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2726:9:11","nodeType":"YulIdentifier","src":"2726:9:11"},{"name":"offset_2","nativeSrc":"2737:8:11","nodeType":"YulIdentifier","src":"2737:8:11"}],"functionName":{"name":"add","nativeSrc":"2722:3:11","nodeType":"YulIdentifier","src":"2722:3:11"},"nativeSrc":"2722:24:11","nodeType":"YulFunctionCall","src":"2722:24:11"},{"name":"dataEnd","nativeSrc":"2748:7:11","nodeType":"YulIdentifier","src":"2748:7:11"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2696:25:11","nodeType":"YulIdentifier","src":"2696:25:11"},"nativeSrc":"2696:60:11","nodeType":"YulFunctionCall","src":"2696:60:11"},"variables":[{"name":"value3_1","nativeSrc":"2674:8:11","nodeType":"YulTypedName","src":"2674:8:11","type":""},{"name":"value4_1","nativeSrc":"2684:8:11","nodeType":"YulTypedName","src":"2684:8:11","type":""}]},{"nativeSrc":"2765:18:11","nodeType":"YulAssignment","src":"2765:18:11","value":{"name":"value3_1","nativeSrc":"2775:8:11","nodeType":"YulIdentifier","src":"2775:8:11"},"variableNames":[{"name":"value3","nativeSrc":"2765:6:11","nodeType":"YulIdentifier","src":"2765:6:11"}]},{"nativeSrc":"2792:18:11","nodeType":"YulAssignment","src":"2792:18:11","value":{"name":"value4_1","nativeSrc":"2802:8:11","nodeType":"YulIdentifier","src":"2802:8:11"},"variableNames":[{"name":"value4","nativeSrc":"2792:6:11","nodeType":"YulIdentifier","src":"2792:6:11"}]}]},"name":"abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"1849:967:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1960:9:11","nodeType":"YulTypedName","src":"1960:9:11","type":""},{"name":"dataEnd","nativeSrc":"1971:7:11","nodeType":"YulTypedName","src":"1971:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1983:6:11","nodeType":"YulTypedName","src":"1983:6:11","type":""},{"name":"value1","nativeSrc":"1991:6:11","nodeType":"YulTypedName","src":"1991:6:11","type":""},{"name":"value2","nativeSrc":"1999:6:11","nodeType":"YulTypedName","src":"1999:6:11","type":""},{"name":"value3","nativeSrc":"2007:6:11","nodeType":"YulTypedName","src":"2007:6:11","type":""},{"name":"value4","nativeSrc":"2015:6:11","nodeType":"YulTypedName","src":"2015:6:11","type":""}],"src":"1849:967:11"},{"body":{"nativeSrc":"2866:86:11","nodeType":"YulBlock","src":"2866:86:11","statements":[{"body":{"nativeSrc":"2930:16:11","nodeType":"YulBlock","src":"2930:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2939:1:11","nodeType":"YulLiteral","src":"2939:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"2942:1:11","nodeType":"YulLiteral","src":"2942:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2932:6:11","nodeType":"YulIdentifier","src":"2932:6:11"},"nativeSrc":"2932:12:11","nodeType":"YulFunctionCall","src":"2932:12:11"},"nativeSrc":"2932:12:11","nodeType":"YulExpressionStatement","src":"2932:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2889:5:11","nodeType":"YulIdentifier","src":"2889:5:11"},{"arguments":[{"name":"value","nativeSrc":"2900:5:11","nodeType":"YulIdentifier","src":"2900:5:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2915:3:11","nodeType":"YulLiteral","src":"2915:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"2920:1:11","nodeType":"YulLiteral","src":"2920:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"2911:3:11","nodeType":"YulIdentifier","src":"2911:3:11"},"nativeSrc":"2911:11:11","nodeType":"YulFunctionCall","src":"2911:11:11"},{"kind":"number","nativeSrc":"2924:1:11","nodeType":"YulLiteral","src":"2924:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2907:3:11","nodeType":"YulIdentifier","src":"2907:3:11"},"nativeSrc":"2907:19:11","nodeType":"YulFunctionCall","src":"2907:19:11"}],"functionName":{"name":"and","nativeSrc":"2896:3:11","nodeType":"YulIdentifier","src":"2896:3:11"},"nativeSrc":"2896:31:11","nodeType":"YulFunctionCall","src":"2896:31:11"}],"functionName":{"name":"eq","nativeSrc":"2886:2:11","nodeType":"YulIdentifier","src":"2886:2:11"},"nativeSrc":"2886:42:11","nodeType":"YulFunctionCall","src":"2886:42:11"}],"functionName":{"name":"iszero","nativeSrc":"2879:6:11","nodeType":"YulIdentifier","src":"2879:6:11"},"nativeSrc":"2879:50:11","nodeType":"YulFunctionCall","src":"2879:50:11"},"nativeSrc":"2876:70:11","nodeType":"YulIf","src":"2876:70:11"}]},"name":"validator_revert_address","nativeSrc":"2821:131:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2855:5:11","nodeType":"YulTypedName","src":"2855:5:11","type":""}],"src":"2821:131:11"},{"body":{"nativeSrc":"3006:85:11","nodeType":"YulBlock","src":"3006:85:11","statements":[{"nativeSrc":"3016:29:11","nodeType":"YulAssignment","src":"3016:29:11","value":{"arguments":[{"name":"offset","nativeSrc":"3038:6:11","nodeType":"YulIdentifier","src":"3038:6:11"}],"functionName":{"name":"calldataload","nativeSrc":"3025:12:11","nodeType":"YulIdentifier","src":"3025:12:11"},"nativeSrc":"3025:20:11","nodeType":"YulFunctionCall","src":"3025:20:11"},"variableNames":[{"name":"value","nativeSrc":"3016:5:11","nodeType":"YulIdentifier","src":"3016:5:11"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3079:5:11","nodeType":"YulIdentifier","src":"3079:5:11"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3054:24:11","nodeType":"YulIdentifier","src":"3054:24:11"},"nativeSrc":"3054:31:11","nodeType":"YulFunctionCall","src":"3054:31:11"},"nativeSrc":"3054:31:11","nodeType":"YulExpressionStatement","src":"3054:31:11"}]},"name":"abi_decode_address","nativeSrc":"2957:134:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2985:6:11","nodeType":"YulTypedName","src":"2985:6:11","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2996:5:11","nodeType":"YulTypedName","src":"2996:5:11","type":""}],"src":"2957:134:11"},{"body":{"nativeSrc":"3183:228:11","nodeType":"YulBlock","src":"3183:228:11","statements":[{"body":{"nativeSrc":"3229:16:11","nodeType":"YulBlock","src":"3229:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3238:1:11","nodeType":"YulLiteral","src":"3238:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"3241:1:11","nodeType":"YulLiteral","src":"3241:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3231:6:11","nodeType":"YulIdentifier","src":"3231:6:11"},"nativeSrc":"3231:12:11","nodeType":"YulFunctionCall","src":"3231:12:11"},"nativeSrc":"3231:12:11","nodeType":"YulExpressionStatement","src":"3231:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3204:7:11","nodeType":"YulIdentifier","src":"3204:7:11"},{"name":"headStart","nativeSrc":"3213:9:11","nodeType":"YulIdentifier","src":"3213:9:11"}],"functionName":{"name":"sub","nativeSrc":"3200:3:11","nodeType":"YulIdentifier","src":"3200:3:11"},"nativeSrc":"3200:23:11","nodeType":"YulFunctionCall","src":"3200:23:11"},{"kind":"number","nativeSrc":"3225:2:11","nodeType":"YulLiteral","src":"3225:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3196:3:11","nodeType":"YulIdentifier","src":"3196:3:11"},"nativeSrc":"3196:32:11","nodeType":"YulFunctionCall","src":"3196:32:11"},"nativeSrc":"3193:52:11","nodeType":"YulIf","src":"3193:52:11"},{"nativeSrc":"3254:36:11","nodeType":"YulVariableDeclaration","src":"3254:36:11","value":{"arguments":[{"name":"headStart","nativeSrc":"3280:9:11","nodeType":"YulIdentifier","src":"3280:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"3267:12:11","nodeType":"YulIdentifier","src":"3267:12:11"},"nativeSrc":"3267:23:11","nodeType":"YulFunctionCall","src":"3267:23:11"},"variables":[{"name":"value","nativeSrc":"3258:5:11","nodeType":"YulTypedName","src":"3258:5:11","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3324:5:11","nodeType":"YulIdentifier","src":"3324:5:11"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3299:24:11","nodeType":"YulIdentifier","src":"3299:24:11"},"nativeSrc":"3299:31:11","nodeType":"YulFunctionCall","src":"3299:31:11"},"nativeSrc":"3299:31:11","nodeType":"YulExpressionStatement","src":"3299:31:11"},{"nativeSrc":"3339:15:11","nodeType":"YulAssignment","src":"3339:15:11","value":{"name":"value","nativeSrc":"3349:5:11","nodeType":"YulIdentifier","src":"3349:5:11"},"variableNames":[{"name":"value0","nativeSrc":"3339:6:11","nodeType":"YulIdentifier","src":"3339:6:11"}]},{"nativeSrc":"3363:42:11","nodeType":"YulAssignment","src":"3363:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3390:9:11","nodeType":"YulIdentifier","src":"3390:9:11"},{"kind":"number","nativeSrc":"3401:2:11","nodeType":"YulLiteral","src":"3401:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3386:3:11","nodeType":"YulIdentifier","src":"3386:3:11"},"nativeSrc":"3386:18:11","nodeType":"YulFunctionCall","src":"3386:18:11"}],"functionName":{"name":"calldataload","nativeSrc":"3373:12:11","nodeType":"YulIdentifier","src":"3373:12:11"},"nativeSrc":"3373:32:11","nodeType":"YulFunctionCall","src":"3373:32:11"},"variableNames":[{"name":"value1","nativeSrc":"3363:6:11","nodeType":"YulIdentifier","src":"3363:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"3096:315:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3141:9:11","nodeType":"YulTypedName","src":"3141:9:11","type":""},{"name":"dataEnd","nativeSrc":"3152:7:11","nodeType":"YulTypedName","src":"3152:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3164:6:11","nodeType":"YulTypedName","src":"3164:6:11","type":""},{"name":"value1","nativeSrc":"3172:6:11","nodeType":"YulTypedName","src":"3172:6:11","type":""}],"src":"3096:315:11"},{"body":{"nativeSrc":"3557:539:11","nodeType":"YulBlock","src":"3557:539:11","statements":[{"body":{"nativeSrc":"3603:16:11","nodeType":"YulBlock","src":"3603:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3612:1:11","nodeType":"YulLiteral","src":"3612:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"3615:1:11","nodeType":"YulLiteral","src":"3615:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3605:6:11","nodeType":"YulIdentifier","src":"3605:6:11"},"nativeSrc":"3605:12:11","nodeType":"YulFunctionCall","src":"3605:12:11"},"nativeSrc":"3605:12:11","nodeType":"YulExpressionStatement","src":"3605:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3578:7:11","nodeType":"YulIdentifier","src":"3578:7:11"},{"name":"headStart","nativeSrc":"3587:9:11","nodeType":"YulIdentifier","src":"3587:9:11"}],"functionName":{"name":"sub","nativeSrc":"3574:3:11","nodeType":"YulIdentifier","src":"3574:3:11"},"nativeSrc":"3574:23:11","nodeType":"YulFunctionCall","src":"3574:23:11"},{"kind":"number","nativeSrc":"3599:2:11","nodeType":"YulLiteral","src":"3599:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3570:3:11","nodeType":"YulIdentifier","src":"3570:3:11"},"nativeSrc":"3570:32:11","nodeType":"YulFunctionCall","src":"3570:32:11"},"nativeSrc":"3567:52:11","nodeType":"YulIf","src":"3567:52:11"},{"nativeSrc":"3628:37:11","nodeType":"YulVariableDeclaration","src":"3628:37:11","value":{"arguments":[{"name":"headStart","nativeSrc":"3655:9:11","nodeType":"YulIdentifier","src":"3655:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"3642:12:11","nodeType":"YulIdentifier","src":"3642:12:11"},"nativeSrc":"3642:23:11","nodeType":"YulFunctionCall","src":"3642:23:11"},"variables":[{"name":"offset","nativeSrc":"3632:6:11","nodeType":"YulTypedName","src":"3632:6:11","type":""}]},{"nativeSrc":"3674:28:11","nodeType":"YulVariableDeclaration","src":"3674:28:11","value":{"kind":"number","nativeSrc":"3684:18:11","nodeType":"YulLiteral","src":"3684:18:11","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3678:2:11","nodeType":"YulTypedName","src":"3678:2:11","type":""}]},{"body":{"nativeSrc":"3729:16:11","nodeType":"YulBlock","src":"3729:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3738:1:11","nodeType":"YulLiteral","src":"3738:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"3741:1:11","nodeType":"YulLiteral","src":"3741:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3731:6:11","nodeType":"YulIdentifier","src":"3731:6:11"},"nativeSrc":"3731:12:11","nodeType":"YulFunctionCall","src":"3731:12:11"},"nativeSrc":"3731:12:11","nodeType":"YulExpressionStatement","src":"3731:12:11"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3717:6:11","nodeType":"YulIdentifier","src":"3717:6:11"},{"name":"_1","nativeSrc":"3725:2:11","nodeType":"YulIdentifier","src":"3725:2:11"}],"functionName":{"name":"gt","nativeSrc":"3714:2:11","nodeType":"YulIdentifier","src":"3714:2:11"},"nativeSrc":"3714:14:11","nodeType":"YulFunctionCall","src":"3714:14:11"},"nativeSrc":"3711:34:11","nodeType":"YulIf","src":"3711:34:11"},{"nativeSrc":"3754:85:11","nodeType":"YulAssignment","src":"3754:85:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3811:9:11","nodeType":"YulIdentifier","src":"3811:9:11"},{"name":"offset","nativeSrc":"3822:6:11","nodeType":"YulIdentifier","src":"3822:6:11"}],"functionName":{"name":"add","nativeSrc":"3807:3:11","nodeType":"YulIdentifier","src":"3807:3:11"},"nativeSrc":"3807:22:11","nodeType":"YulFunctionCall","src":"3807:22:11"},{"name":"dataEnd","nativeSrc":"3831:7:11","nodeType":"YulIdentifier","src":"3831:7:11"}],"functionName":{"name":"abi_decode_struct_CrossChainOrder_calldata","nativeSrc":"3764:42:11","nodeType":"YulIdentifier","src":"3764:42:11"},"nativeSrc":"3764:75:11","nodeType":"YulFunctionCall","src":"3764:75:11"},"variableNames":[{"name":"value0","nativeSrc":"3754:6:11","nodeType":"YulIdentifier","src":"3754:6:11"}]},{"nativeSrc":"3848:48:11","nodeType":"YulVariableDeclaration","src":"3848:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3881:9:11","nodeType":"YulIdentifier","src":"3881:9:11"},{"kind":"number","nativeSrc":"3892:2:11","nodeType":"YulLiteral","src":"3892:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3877:3:11","nodeType":"YulIdentifier","src":"3877:3:11"},"nativeSrc":"3877:18:11","nodeType":"YulFunctionCall","src":"3877:18:11"}],"functionName":{"name":"calldataload","nativeSrc":"3864:12:11","nodeType":"YulIdentifier","src":"3864:12:11"},"nativeSrc":"3864:32:11","nodeType":"YulFunctionCall","src":"3864:32:11"},"variables":[{"name":"offset_1","nativeSrc":"3852:8:11","nodeType":"YulTypedName","src":"3852:8:11","type":""}]},{"body":{"nativeSrc":"3925:16:11","nodeType":"YulBlock","src":"3925:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3934:1:11","nodeType":"YulLiteral","src":"3934:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"3937:1:11","nodeType":"YulLiteral","src":"3937:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3927:6:11","nodeType":"YulIdentifier","src":"3927:6:11"},"nativeSrc":"3927:12:11","nodeType":"YulFunctionCall","src":"3927:12:11"},"nativeSrc":"3927:12:11","nodeType":"YulExpressionStatement","src":"3927:12:11"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3911:8:11","nodeType":"YulIdentifier","src":"3911:8:11"},{"name":"_1","nativeSrc":"3921:2:11","nodeType":"YulIdentifier","src":"3921:2:11"}],"functionName":{"name":"gt","nativeSrc":"3908:2:11","nodeType":"YulIdentifier","src":"3908:2:11"},"nativeSrc":"3908:16:11","nodeType":"YulFunctionCall","src":"3908:16:11"},"nativeSrc":"3905:36:11","nodeType":"YulIf","src":"3905:36:11"},{"nativeSrc":"3950:86:11","nodeType":"YulVariableDeclaration","src":"3950:86:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4006:9:11","nodeType":"YulIdentifier","src":"4006:9:11"},{"name":"offset_1","nativeSrc":"4017:8:11","nodeType":"YulIdentifier","src":"4017:8:11"}],"functionName":{"name":"add","nativeSrc":"4002:3:11","nodeType":"YulIdentifier","src":"4002:3:11"},"nativeSrc":"4002:24:11","nodeType":"YulFunctionCall","src":"4002:24:11"},{"name":"dataEnd","nativeSrc":"4028:7:11","nodeType":"YulIdentifier","src":"4028:7:11"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3976:25:11","nodeType":"YulIdentifier","src":"3976:25:11"},"nativeSrc":"3976:60:11","nodeType":"YulFunctionCall","src":"3976:60:11"},"variables":[{"name":"value1_1","nativeSrc":"3954:8:11","nodeType":"YulTypedName","src":"3954:8:11","type":""},{"name":"value2_1","nativeSrc":"3964:8:11","nodeType":"YulTypedName","src":"3964:8:11","type":""}]},{"nativeSrc":"4045:18:11","nodeType":"YulAssignment","src":"4045:18:11","value":{"name":"value1_1","nativeSrc":"4055:8:11","nodeType":"YulIdentifier","src":"4055:8:11"},"variableNames":[{"name":"value1","nativeSrc":"4045:6:11","nodeType":"YulIdentifier","src":"4045:6:11"}]},{"nativeSrc":"4072:18:11","nodeType":"YulAssignment","src":"4072:18:11","value":{"name":"value2_1","nativeSrc":"4082:8:11","nodeType":"YulIdentifier","src":"4082:8:11"},"variableNames":[{"name":"value2","nativeSrc":"4072:6:11","nodeType":"YulIdentifier","src":"4072:6:11"}]}]},"name":"abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"3416:680:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3507:9:11","nodeType":"YulTypedName","src":"3507:9:11","type":""},{"name":"dataEnd","nativeSrc":"3518:7:11","nodeType":"YulTypedName","src":"3518:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3530:6:11","nodeType":"YulTypedName","src":"3530:6:11","type":""},{"name":"value1","nativeSrc":"3538:6:11","nodeType":"YulTypedName","src":"3538:6:11","type":""},{"name":"value2","nativeSrc":"3546:6:11","nodeType":"YulTypedName","src":"3546:6:11","type":""}],"src":"3416:680:11"},{"body":{"nativeSrc":"4144:51:11","nodeType":"YulBlock","src":"4144:51:11","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4161:3:11","nodeType":"YulIdentifier","src":"4161:3:11"},{"arguments":[{"name":"value","nativeSrc":"4170:5:11","nodeType":"YulIdentifier","src":"4170:5:11"},{"kind":"number","nativeSrc":"4177:10:11","nodeType":"YulLiteral","src":"4177:10:11","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"4166:3:11","nodeType":"YulIdentifier","src":"4166:3:11"},"nativeSrc":"4166:22:11","nodeType":"YulFunctionCall","src":"4166:22:11"}],"functionName":{"name":"mstore","nativeSrc":"4154:6:11","nodeType":"YulIdentifier","src":"4154:6:11"},"nativeSrc":"4154:35:11","nodeType":"YulFunctionCall","src":"4154:35:11"},"nativeSrc":"4154:35:11","nodeType":"YulExpressionStatement","src":"4154:35:11"}]},"name":"abi_encode_uint32","nativeSrc":"4101:94:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4128:5:11","nodeType":"YulTypedName","src":"4128:5:11","type":""},{"name":"pos","nativeSrc":"4135:3:11","nodeType":"YulTypedName","src":"4135:3:11","type":""}],"src":"4101:94:11"},{"body":{"nativeSrc":"4266:491:11","nodeType":"YulBlock","src":"4266:491:11","statements":[{"nativeSrc":"4276:26:11","nodeType":"YulVariableDeclaration","src":"4276:26:11","value":{"arguments":[{"name":"value","nativeSrc":"4296:5:11","nodeType":"YulIdentifier","src":"4296:5:11"}],"functionName":{"name":"mload","nativeSrc":"4290:5:11","nodeType":"YulIdentifier","src":"4290:5:11"},"nativeSrc":"4290:12:11","nodeType":"YulFunctionCall","src":"4290:12:11"},"variables":[{"name":"length","nativeSrc":"4280:6:11","nodeType":"YulTypedName","src":"4280:6:11","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4318:3:11","nodeType":"YulIdentifier","src":"4318:3:11"},{"name":"length","nativeSrc":"4323:6:11","nodeType":"YulIdentifier","src":"4323:6:11"}],"functionName":{"name":"mstore","nativeSrc":"4311:6:11","nodeType":"YulIdentifier","src":"4311:6:11"},"nativeSrc":"4311:19:11","nodeType":"YulFunctionCall","src":"4311:19:11"},"nativeSrc":"4311:19:11","nodeType":"YulExpressionStatement","src":"4311:19:11"},{"nativeSrc":"4339:14:11","nodeType":"YulVariableDeclaration","src":"4339:14:11","value":{"kind":"number","nativeSrc":"4349:4:11","nodeType":"YulLiteral","src":"4349:4:11","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"4343:2:11","nodeType":"YulTypedName","src":"4343:2:11","type":""}]},{"nativeSrc":"4362:21:11","nodeType":"YulAssignment","src":"4362:21:11","value":{"arguments":[{"name":"pos","nativeSrc":"4373:3:11","nodeType":"YulIdentifier","src":"4373:3:11"},{"kind":"number","nativeSrc":"4378:4:11","nodeType":"YulLiteral","src":"4378:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4369:3:11","nodeType":"YulIdentifier","src":"4369:3:11"},"nativeSrc":"4369:14:11","nodeType":"YulFunctionCall","src":"4369:14:11"},"variableNames":[{"name":"pos","nativeSrc":"4362:3:11","nodeType":"YulIdentifier","src":"4362:3:11"}]},{"nativeSrc":"4392:30:11","nodeType":"YulVariableDeclaration","src":"4392:30:11","value":{"arguments":[{"name":"value","nativeSrc":"4410:5:11","nodeType":"YulIdentifier","src":"4410:5:11"},{"kind":"number","nativeSrc":"4417:4:11","nodeType":"YulLiteral","src":"4417:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4406:3:11","nodeType":"YulIdentifier","src":"4406:3:11"},"nativeSrc":"4406:16:11","nodeType":"YulFunctionCall","src":"4406:16:11"},"variables":[{"name":"srcPtr","nativeSrc":"4396:6:11","nodeType":"YulTypedName","src":"4396:6:11","type":""}]},{"nativeSrc":"4431:10:11","nodeType":"YulVariableDeclaration","src":"4431:10:11","value":{"kind":"number","nativeSrc":"4440:1:11","nodeType":"YulLiteral","src":"4440:1:11","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4435:1:11","nodeType":"YulTypedName","src":"4435:1:11","type":""}]},{"body":{"nativeSrc":"4499:233:11","nodeType":"YulBlock","src":"4499:233:11","statements":[{"nativeSrc":"4513:23:11","nodeType":"YulVariableDeclaration","src":"4513:23:11","value":{"arguments":[{"name":"srcPtr","nativeSrc":"4529:6:11","nodeType":"YulIdentifier","src":"4529:6:11"}],"functionName":{"name":"mload","nativeSrc":"4523:5:11","nodeType":"YulIdentifier","src":"4523:5:11"},"nativeSrc":"4523:13:11","nodeType":"YulFunctionCall","src":"4523:13:11"},"variables":[{"name":"_2","nativeSrc":"4517:2:11","nodeType":"YulTypedName","src":"4517:2:11","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4556:3:11","nodeType":"YulIdentifier","src":"4556:3:11"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"4571:2:11","nodeType":"YulIdentifier","src":"4571:2:11"}],"functionName":{"name":"mload","nativeSrc":"4565:5:11","nodeType":"YulIdentifier","src":"4565:5:11"},"nativeSrc":"4565:9:11","nodeType":"YulFunctionCall","src":"4565:9:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4584:3:11","nodeType":"YulLiteral","src":"4584:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"4589:1:11","nodeType":"YulLiteral","src":"4589:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4580:3:11","nodeType":"YulIdentifier","src":"4580:3:11"},"nativeSrc":"4580:11:11","nodeType":"YulFunctionCall","src":"4580:11:11"},{"kind":"number","nativeSrc":"4593:1:11","nodeType":"YulLiteral","src":"4593:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4576:3:11","nodeType":"YulIdentifier","src":"4576:3:11"},"nativeSrc":"4576:19:11","nodeType":"YulFunctionCall","src":"4576:19:11"}],"functionName":{"name":"and","nativeSrc":"4561:3:11","nodeType":"YulIdentifier","src":"4561:3:11"},"nativeSrc":"4561:35:11","nodeType":"YulFunctionCall","src":"4561:35:11"}],"functionName":{"name":"mstore","nativeSrc":"4549:6:11","nodeType":"YulIdentifier","src":"4549:6:11"},"nativeSrc":"4549:48:11","nodeType":"YulFunctionCall","src":"4549:48:11"},"nativeSrc":"4549:48:11","nodeType":"YulExpressionStatement","src":"4549:48:11"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4621:3:11","nodeType":"YulIdentifier","src":"4621:3:11"},{"name":"_1","nativeSrc":"4626:2:11","nodeType":"YulIdentifier","src":"4626:2:11"}],"functionName":{"name":"add","nativeSrc":"4617:3:11","nodeType":"YulIdentifier","src":"4617:3:11"},"nativeSrc":"4617:12:11","nodeType":"YulFunctionCall","src":"4617:12:11"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"4641:2:11","nodeType":"YulIdentifier","src":"4641:2:11"},{"name":"_1","nativeSrc":"4645:2:11","nodeType":"YulIdentifier","src":"4645:2:11"}],"functionName":{"name":"add","nativeSrc":"4637:3:11","nodeType":"YulIdentifier","src":"4637:3:11"},"nativeSrc":"4637:11:11","nodeType":"YulFunctionCall","src":"4637:11:11"}],"functionName":{"name":"mload","nativeSrc":"4631:5:11","nodeType":"YulIdentifier","src":"4631:5:11"},"nativeSrc":"4631:18:11","nodeType":"YulFunctionCall","src":"4631:18:11"}],"functionName":{"name":"mstore","nativeSrc":"4610:6:11","nodeType":"YulIdentifier","src":"4610:6:11"},"nativeSrc":"4610:40:11","nodeType":"YulFunctionCall","src":"4610:40:11"},"nativeSrc":"4610:40:11","nodeType":"YulExpressionStatement","src":"4610:40:11"},{"nativeSrc":"4663:21:11","nodeType":"YulAssignment","src":"4663:21:11","value":{"arguments":[{"name":"pos","nativeSrc":"4674:3:11","nodeType":"YulIdentifier","src":"4674:3:11"},{"kind":"number","nativeSrc":"4679:4:11","nodeType":"YulLiteral","src":"4679:4:11","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"4670:3:11","nodeType":"YulIdentifier","src":"4670:3:11"},"nativeSrc":"4670:14:11","nodeType":"YulFunctionCall","src":"4670:14:11"},"variableNames":[{"name":"pos","nativeSrc":"4663:3:11","nodeType":"YulIdentifier","src":"4663:3:11"}]},{"nativeSrc":"4697:25:11","nodeType":"YulAssignment","src":"4697:25:11","value":{"arguments":[{"name":"srcPtr","nativeSrc":"4711:6:11","nodeType":"YulIdentifier","src":"4711:6:11"},{"name":"_1","nativeSrc":"4719:2:11","nodeType":"YulIdentifier","src":"4719:2:11"}],"functionName":{"name":"add","nativeSrc":"4707:3:11","nodeType":"YulIdentifier","src":"4707:3:11"},"nativeSrc":"4707:15:11","nodeType":"YulFunctionCall","src":"4707:15:11"},"variableNames":[{"name":"srcPtr","nativeSrc":"4697:6:11","nodeType":"YulIdentifier","src":"4697:6:11"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4461:1:11","nodeType":"YulIdentifier","src":"4461:1:11"},{"name":"length","nativeSrc":"4464:6:11","nodeType":"YulIdentifier","src":"4464:6:11"}],"functionName":{"name":"lt","nativeSrc":"4458:2:11","nodeType":"YulIdentifier","src":"4458:2:11"},"nativeSrc":"4458:13:11","nodeType":"YulFunctionCall","src":"4458:13:11"},"nativeSrc":"4450:282:11","nodeType":"YulForLoop","post":{"nativeSrc":"4472:18:11","nodeType":"YulBlock","src":"4472:18:11","statements":[{"nativeSrc":"4474:14:11","nodeType":"YulAssignment","src":"4474:14:11","value":{"arguments":[{"name":"i","nativeSrc":"4483:1:11","nodeType":"YulIdentifier","src":"4483:1:11"},{"kind":"number","nativeSrc":"4486:1:11","nodeType":"YulLiteral","src":"4486:1:11","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4479:3:11","nodeType":"YulIdentifier","src":"4479:3:11"},"nativeSrc":"4479:9:11","nodeType":"YulFunctionCall","src":"4479:9:11"},"variableNames":[{"name":"i","nativeSrc":"4474:1:11","nodeType":"YulIdentifier","src":"4474:1:11"}]}]},"pre":{"nativeSrc":"4454:3:11","nodeType":"YulBlock","src":"4454:3:11","statements":[]},"src":"4450:282:11"},{"nativeSrc":"4741:10:11","nodeType":"YulAssignment","src":"4741:10:11","value":{"name":"pos","nativeSrc":"4748:3:11","nodeType":"YulIdentifier","src":"4748:3:11"},"variableNames":[{"name":"end","nativeSrc":"4741:3:11","nodeType":"YulIdentifier","src":"4741:3:11"}]}]},"name":"abi_encode_array_struct_Input_dyn","nativeSrc":"4200:557:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4243:5:11","nodeType":"YulTypedName","src":"4243:5:11","type":""},{"name":"pos","nativeSrc":"4250:3:11","nodeType":"YulTypedName","src":"4250:3:11","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4258:3:11","nodeType":"YulTypedName","src":"4258:3:11","type":""}],"src":"4200:557:11"},{"body":{"nativeSrc":"4829:702:11","nodeType":"YulBlock","src":"4829:702:11","statements":[{"nativeSrc":"4839:26:11","nodeType":"YulVariableDeclaration","src":"4839:26:11","value":{"arguments":[{"name":"value","nativeSrc":"4859:5:11","nodeType":"YulIdentifier","src":"4859:5:11"}],"functionName":{"name":"mload","nativeSrc":"4853:5:11","nodeType":"YulIdentifier","src":"4853:5:11"},"nativeSrc":"4853:12:11","nodeType":"YulFunctionCall","src":"4853:12:11"},"variables":[{"name":"length","nativeSrc":"4843:6:11","nodeType":"YulTypedName","src":"4843:6:11","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4881:3:11","nodeType":"YulIdentifier","src":"4881:3:11"},{"name":"length","nativeSrc":"4886:6:11","nodeType":"YulIdentifier","src":"4886:6:11"}],"functionName":{"name":"mstore","nativeSrc":"4874:6:11","nodeType":"YulIdentifier","src":"4874:6:11"},"nativeSrc":"4874:19:11","nodeType":"YulFunctionCall","src":"4874:19:11"},"nativeSrc":"4874:19:11","nodeType":"YulExpressionStatement","src":"4874:19:11"},{"nativeSrc":"4902:14:11","nodeType":"YulVariableDeclaration","src":"4902:14:11","value":{"kind":"number","nativeSrc":"4912:4:11","nodeType":"YulLiteral","src":"4912:4:11","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"4906:2:11","nodeType":"YulTypedName","src":"4906:2:11","type":""}]},{"nativeSrc":"4925:21:11","nodeType":"YulAssignment","src":"4925:21:11","value":{"arguments":[{"name":"pos","nativeSrc":"4936:3:11","nodeType":"YulIdentifier","src":"4936:3:11"},{"kind":"number","nativeSrc":"4941:4:11","nodeType":"YulLiteral","src":"4941:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4932:3:11","nodeType":"YulIdentifier","src":"4932:3:11"},"nativeSrc":"4932:14:11","nodeType":"YulFunctionCall","src":"4932:14:11"},"variableNames":[{"name":"pos","nativeSrc":"4925:3:11","nodeType":"YulIdentifier","src":"4925:3:11"}]},{"nativeSrc":"4955:30:11","nodeType":"YulVariableDeclaration","src":"4955:30:11","value":{"arguments":[{"name":"value","nativeSrc":"4973:5:11","nodeType":"YulIdentifier","src":"4973:5:11"},{"kind":"number","nativeSrc":"4980:4:11","nodeType":"YulLiteral","src":"4980:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4969:3:11","nodeType":"YulIdentifier","src":"4969:3:11"},"nativeSrc":"4969:16:11","nodeType":"YulFunctionCall","src":"4969:16:11"},"variables":[{"name":"srcPtr","nativeSrc":"4959:6:11","nodeType":"YulTypedName","src":"4959:6:11","type":""}]},{"nativeSrc":"4994:10:11","nodeType":"YulVariableDeclaration","src":"4994:10:11","value":{"kind":"number","nativeSrc":"5003:1:11","nodeType":"YulLiteral","src":"5003:1:11","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4998:1:11","nodeType":"YulTypedName","src":"4998:1:11","type":""}]},{"body":{"nativeSrc":"5062:444:11","nodeType":"YulBlock","src":"5062:444:11","statements":[{"nativeSrc":"5076:23:11","nodeType":"YulVariableDeclaration","src":"5076:23:11","value":{"arguments":[{"name":"srcPtr","nativeSrc":"5092:6:11","nodeType":"YulIdentifier","src":"5092:6:11"}],"functionName":{"name":"mload","nativeSrc":"5086:5:11","nodeType":"YulIdentifier","src":"5086:5:11"},"nativeSrc":"5086:13:11","nodeType":"YulFunctionCall","src":"5086:13:11"},"variables":[{"name":"_2","nativeSrc":"5080:2:11","nodeType":"YulTypedName","src":"5080:2:11","type":""}]},{"nativeSrc":"5112:29:11","nodeType":"YulVariableDeclaration","src":"5112:29:11","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5130:3:11","nodeType":"YulLiteral","src":"5130:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"5135:1:11","nodeType":"YulLiteral","src":"5135:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"5126:3:11","nodeType":"YulIdentifier","src":"5126:3:11"},"nativeSrc":"5126:11:11","nodeType":"YulFunctionCall","src":"5126:11:11"},{"kind":"number","nativeSrc":"5139:1:11","nodeType":"YulLiteral","src":"5139:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"5122:3:11","nodeType":"YulIdentifier","src":"5122:3:11"},"nativeSrc":"5122:19:11","nodeType":"YulFunctionCall","src":"5122:19:11"},"variables":[{"name":"_3","nativeSrc":"5116:2:11","nodeType":"YulTypedName","src":"5116:2:11","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"5161:3:11","nodeType":"YulIdentifier","src":"5161:3:11"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5176:2:11","nodeType":"YulIdentifier","src":"5176:2:11"}],"functionName":{"name":"mload","nativeSrc":"5170:5:11","nodeType":"YulIdentifier","src":"5170:5:11"},"nativeSrc":"5170:9:11","nodeType":"YulFunctionCall","src":"5170:9:11"},{"name":"_3","nativeSrc":"5181:2:11","nodeType":"YulIdentifier","src":"5181:2:11"}],"functionName":{"name":"and","nativeSrc":"5166:3:11","nodeType":"YulIdentifier","src":"5166:3:11"},"nativeSrc":"5166:18:11","nodeType":"YulFunctionCall","src":"5166:18:11"}],"functionName":{"name":"mstore","nativeSrc":"5154:6:11","nodeType":"YulIdentifier","src":"5154:6:11"},"nativeSrc":"5154:31:11","nodeType":"YulFunctionCall","src":"5154:31:11"},"nativeSrc":"5154:31:11","nodeType":"YulExpressionStatement","src":"5154:31:11"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5209:3:11","nodeType":"YulIdentifier","src":"5209:3:11"},{"name":"_1","nativeSrc":"5214:2:11","nodeType":"YulIdentifier","src":"5214:2:11"}],"functionName":{"name":"add","nativeSrc":"5205:3:11","nodeType":"YulIdentifier","src":"5205:3:11"},"nativeSrc":"5205:12:11","nodeType":"YulFunctionCall","src":"5205:12:11"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5229:2:11","nodeType":"YulIdentifier","src":"5229:2:11"},{"name":"_1","nativeSrc":"5233:2:11","nodeType":"YulIdentifier","src":"5233:2:11"}],"functionName":{"name":"add","nativeSrc":"5225:3:11","nodeType":"YulIdentifier","src":"5225:3:11"},"nativeSrc":"5225:11:11","nodeType":"YulFunctionCall","src":"5225:11:11"}],"functionName":{"name":"mload","nativeSrc":"5219:5:11","nodeType":"YulIdentifier","src":"5219:5:11"},"nativeSrc":"5219:18:11","nodeType":"YulFunctionCall","src":"5219:18:11"}],"functionName":{"name":"mstore","nativeSrc":"5198:6:11","nodeType":"YulIdentifier","src":"5198:6:11"},"nativeSrc":"5198:40:11","nodeType":"YulFunctionCall","src":"5198:40:11"},"nativeSrc":"5198:40:11","nodeType":"YulExpressionStatement","src":"5198:40:11"},{"nativeSrc":"5251:14:11","nodeType":"YulVariableDeclaration","src":"5251:14:11","value":{"kind":"number","nativeSrc":"5261:4:11","nodeType":"YulLiteral","src":"5261:4:11","type":"","value":"0x40"},"variables":[{"name":"_4","nativeSrc":"5255:2:11","nodeType":"YulTypedName","src":"5255:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5289:3:11","nodeType":"YulIdentifier","src":"5289:3:11"},{"name":"_4","nativeSrc":"5294:2:11","nodeType":"YulIdentifier","src":"5294:2:11"}],"functionName":{"name":"add","nativeSrc":"5285:3:11","nodeType":"YulIdentifier","src":"5285:3:11"},"nativeSrc":"5285:12:11","nodeType":"YulFunctionCall","src":"5285:12:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5313:2:11","nodeType":"YulIdentifier","src":"5313:2:11"},{"name":"_4","nativeSrc":"5317:2:11","nodeType":"YulIdentifier","src":"5317:2:11"}],"functionName":{"name":"add","nativeSrc":"5309:3:11","nodeType":"YulIdentifier","src":"5309:3:11"},"nativeSrc":"5309:11:11","nodeType":"YulFunctionCall","src":"5309:11:11"}],"functionName":{"name":"mload","nativeSrc":"5303:5:11","nodeType":"YulIdentifier","src":"5303:5:11"},"nativeSrc":"5303:18:11","nodeType":"YulFunctionCall","src":"5303:18:11"},{"name":"_3","nativeSrc":"5323:2:11","nodeType":"YulIdentifier","src":"5323:2:11"}],"functionName":{"name":"and","nativeSrc":"5299:3:11","nodeType":"YulIdentifier","src":"5299:3:11"},"nativeSrc":"5299:27:11","nodeType":"YulFunctionCall","src":"5299:27:11"}],"functionName":{"name":"mstore","nativeSrc":"5278:6:11","nodeType":"YulIdentifier","src":"5278:6:11"},"nativeSrc":"5278:49:11","nodeType":"YulFunctionCall","src":"5278:49:11"},"nativeSrc":"5278:49:11","nodeType":"YulExpressionStatement","src":"5278:49:11"},{"nativeSrc":"5340:14:11","nodeType":"YulVariableDeclaration","src":"5340:14:11","value":{"kind":"number","nativeSrc":"5350:4:11","nodeType":"YulLiteral","src":"5350:4:11","type":"","value":"0x60"},"variables":[{"name":"_5","nativeSrc":"5344:2:11","nodeType":"YulTypedName","src":"5344:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5378:3:11","nodeType":"YulIdentifier","src":"5378:3:11"},{"name":"_5","nativeSrc":"5383:2:11","nodeType":"YulIdentifier","src":"5383:2:11"}],"functionName":{"name":"add","nativeSrc":"5374:3:11","nodeType":"YulIdentifier","src":"5374:3:11"},"nativeSrc":"5374:12:11","nodeType":"YulFunctionCall","src":"5374:12:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5402:2:11","nodeType":"YulIdentifier","src":"5402:2:11"},{"name":"_5","nativeSrc":"5406:2:11","nodeType":"YulIdentifier","src":"5406:2:11"}],"functionName":{"name":"add","nativeSrc":"5398:3:11","nodeType":"YulIdentifier","src":"5398:3:11"},"nativeSrc":"5398:11:11","nodeType":"YulFunctionCall","src":"5398:11:11"}],"functionName":{"name":"mload","nativeSrc":"5392:5:11","nodeType":"YulIdentifier","src":"5392:5:11"},"nativeSrc":"5392:18:11","nodeType":"YulFunctionCall","src":"5392:18:11"},{"kind":"number","nativeSrc":"5412:10:11","nodeType":"YulLiteral","src":"5412:10:11","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"5388:3:11","nodeType":"YulIdentifier","src":"5388:3:11"},"nativeSrc":"5388:35:11","nodeType":"YulFunctionCall","src":"5388:35:11"}],"functionName":{"name":"mstore","nativeSrc":"5367:6:11","nodeType":"YulIdentifier","src":"5367:6:11"},"nativeSrc":"5367:57:11","nodeType":"YulFunctionCall","src":"5367:57:11"},"nativeSrc":"5367:57:11","nodeType":"YulExpressionStatement","src":"5367:57:11"},{"nativeSrc":"5437:21:11","nodeType":"YulAssignment","src":"5437:21:11","value":{"arguments":[{"name":"pos","nativeSrc":"5448:3:11","nodeType":"YulIdentifier","src":"5448:3:11"},{"kind":"number","nativeSrc":"5453:4:11","nodeType":"YulLiteral","src":"5453:4:11","type":"","value":"0x80"}],"functionName":{"name":"add","nativeSrc":"5444:3:11","nodeType":"YulIdentifier","src":"5444:3:11"},"nativeSrc":"5444:14:11","nodeType":"YulFunctionCall","src":"5444:14:11"},"variableNames":[{"name":"pos","nativeSrc":"5437:3:11","nodeType":"YulIdentifier","src":"5437:3:11"}]},{"nativeSrc":"5471:25:11","nodeType":"YulAssignment","src":"5471:25:11","value":{"arguments":[{"name":"srcPtr","nativeSrc":"5485:6:11","nodeType":"YulIdentifier","src":"5485:6:11"},{"name":"_1","nativeSrc":"5493:2:11","nodeType":"YulIdentifier","src":"5493:2:11"}],"functionName":{"name":"add","nativeSrc":"5481:3:11","nodeType":"YulIdentifier","src":"5481:3:11"},"nativeSrc":"5481:15:11","nodeType":"YulFunctionCall","src":"5481:15:11"},"variableNames":[{"name":"srcPtr","nativeSrc":"5471:6:11","nodeType":"YulIdentifier","src":"5471:6:11"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"5024:1:11","nodeType":"YulIdentifier","src":"5024:1:11"},{"name":"length","nativeSrc":"5027:6:11","nodeType":"YulIdentifier","src":"5027:6:11"}],"functionName":{"name":"lt","nativeSrc":"5021:2:11","nodeType":"YulIdentifier","src":"5021:2:11"},"nativeSrc":"5021:13:11","nodeType":"YulFunctionCall","src":"5021:13:11"},"nativeSrc":"5013:493:11","nodeType":"YulForLoop","post":{"nativeSrc":"5035:18:11","nodeType":"YulBlock","src":"5035:18:11","statements":[{"nativeSrc":"5037:14:11","nodeType":"YulAssignment","src":"5037:14:11","value":{"arguments":[{"name":"i","nativeSrc":"5046:1:11","nodeType":"YulIdentifier","src":"5046:1:11"},{"kind":"number","nativeSrc":"5049:1:11","nodeType":"YulLiteral","src":"5049:1:11","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5042:3:11","nodeType":"YulIdentifier","src":"5042:3:11"},"nativeSrc":"5042:9:11","nodeType":"YulFunctionCall","src":"5042:9:11"},"variableNames":[{"name":"i","nativeSrc":"5037:1:11","nodeType":"YulIdentifier","src":"5037:1:11"}]}]},"pre":{"nativeSrc":"5017:3:11","nodeType":"YulBlock","src":"5017:3:11","statements":[]},"src":"5013:493:11"},{"nativeSrc":"5515:10:11","nodeType":"YulAssignment","src":"5515:10:11","value":{"name":"pos","nativeSrc":"5522:3:11","nodeType":"YulIdentifier","src":"5522:3:11"},"variableNames":[{"name":"end","nativeSrc":"5515:3:11","nodeType":"YulIdentifier","src":"5515:3:11"}]}]},"name":"abi_encode_array_struct_Output_dyn","nativeSrc":"4762:769:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4806:5:11","nodeType":"YulTypedName","src":"4806:5:11","type":""},{"name":"pos","nativeSrc":"4813:3:11","nodeType":"YulTypedName","src":"4813:3:11","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4821:3:11","nodeType":"YulTypedName","src":"4821:3:11","type":""}],"src":"4762:769:11"},{"body":{"nativeSrc":"5719:1279:11","nodeType":"YulBlock","src":"5719:1279:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5736:9:11","nodeType":"YulIdentifier","src":"5736:9:11"},{"kind":"number","nativeSrc":"5747:2:11","nodeType":"YulLiteral","src":"5747:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"5729:6:11","nodeType":"YulIdentifier","src":"5729:6:11"},"nativeSrc":"5729:21:11","nodeType":"YulFunctionCall","src":"5729:21:11"},"nativeSrc":"5729:21:11","nodeType":"YulExpressionStatement","src":"5729:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"5784:6:11","nodeType":"YulIdentifier","src":"5784:6:11"}],"functionName":{"name":"mload","nativeSrc":"5778:5:11","nodeType":"YulIdentifier","src":"5778:5:11"},"nativeSrc":"5778:13:11","nodeType":"YulFunctionCall","src":"5778:13:11"},{"arguments":[{"name":"headStart","nativeSrc":"5797:9:11","nodeType":"YulIdentifier","src":"5797:9:11"},{"kind":"number","nativeSrc":"5808:2:11","nodeType":"YulLiteral","src":"5808:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5793:3:11","nodeType":"YulIdentifier","src":"5793:3:11"},"nativeSrc":"5793:18:11","nodeType":"YulFunctionCall","src":"5793:18:11"}],"functionName":{"name":"abi_encode_address","nativeSrc":"5759:18:11","nodeType":"YulIdentifier","src":"5759:18:11"},"nativeSrc":"5759:53:11","nodeType":"YulFunctionCall","src":"5759:53:11"},"nativeSrc":"5759:53:11","nodeType":"YulExpressionStatement","src":"5759:53:11"},{"nativeSrc":"5821:42:11","nodeType":"YulVariableDeclaration","src":"5821:42:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"5851:6:11","nodeType":"YulIdentifier","src":"5851:6:11"},{"kind":"number","nativeSrc":"5859:2:11","nodeType":"YulLiteral","src":"5859:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5847:3:11","nodeType":"YulIdentifier","src":"5847:3:11"},"nativeSrc":"5847:15:11","nodeType":"YulFunctionCall","src":"5847:15:11"}],"functionName":{"name":"mload","nativeSrc":"5841:5:11","nodeType":"YulIdentifier","src":"5841:5:11"},"nativeSrc":"5841:22:11","nodeType":"YulFunctionCall","src":"5841:22:11"},"variables":[{"name":"memberValue0","nativeSrc":"5825:12:11","nodeType":"YulTypedName","src":"5825:12:11","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nativeSrc":"5891:12:11","nodeType":"YulIdentifier","src":"5891:12:11"},{"arguments":[{"name":"headStart","nativeSrc":"5909:9:11","nodeType":"YulIdentifier","src":"5909:9:11"},{"kind":"number","nativeSrc":"5920:2:11","nodeType":"YulLiteral","src":"5920:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5905:3:11","nodeType":"YulIdentifier","src":"5905:3:11"},"nativeSrc":"5905:18:11","nodeType":"YulFunctionCall","src":"5905:18:11"}],"functionName":{"name":"abi_encode_address","nativeSrc":"5872:18:11","nodeType":"YulIdentifier","src":"5872:18:11"},"nativeSrc":"5872:52:11","nodeType":"YulFunctionCall","src":"5872:52:11"},"nativeSrc":"5872:52:11","nodeType":"YulExpressionStatement","src":"5872:52:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5944:9:11","nodeType":"YulIdentifier","src":"5944:9:11"},{"kind":"number","nativeSrc":"5955:2:11","nodeType":"YulLiteral","src":"5955:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5940:3:11","nodeType":"YulIdentifier","src":"5940:3:11"},"nativeSrc":"5940:18:11","nodeType":"YulFunctionCall","src":"5940:18:11"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"5970:6:11","nodeType":"YulIdentifier","src":"5970:6:11"},{"kind":"number","nativeSrc":"5978:2:11","nodeType":"YulLiteral","src":"5978:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5966:3:11","nodeType":"YulIdentifier","src":"5966:3:11"},"nativeSrc":"5966:15:11","nodeType":"YulFunctionCall","src":"5966:15:11"}],"functionName":{"name":"mload","nativeSrc":"5960:5:11","nodeType":"YulIdentifier","src":"5960:5:11"},"nativeSrc":"5960:22:11","nodeType":"YulFunctionCall","src":"5960:22:11"}],"functionName":{"name":"mstore","nativeSrc":"5933:6:11","nodeType":"YulIdentifier","src":"5933:6:11"},"nativeSrc":"5933:50:11","nodeType":"YulFunctionCall","src":"5933:50:11"},"nativeSrc":"5933:50:11","nodeType":"YulExpressionStatement","src":"5933:50:11"},{"nativeSrc":"5992:44:11","nodeType":"YulVariableDeclaration","src":"5992:44:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6024:6:11","nodeType":"YulIdentifier","src":"6024:6:11"},{"kind":"number","nativeSrc":"6032:2:11","nodeType":"YulLiteral","src":"6032:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6020:3:11","nodeType":"YulIdentifier","src":"6020:3:11"},"nativeSrc":"6020:15:11","nodeType":"YulFunctionCall","src":"6020:15:11"}],"functionName":{"name":"mload","nativeSrc":"6014:5:11","nodeType":"YulIdentifier","src":"6014:5:11"},"nativeSrc":"6014:22:11","nodeType":"YulFunctionCall","src":"6014:22:11"},"variables":[{"name":"memberValue0_1","nativeSrc":"5996:14:11","nodeType":"YulTypedName","src":"5996:14:11","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nativeSrc":"6063:14:11","nodeType":"YulIdentifier","src":"6063:14:11"},{"arguments":[{"name":"headStart","nativeSrc":"6083:9:11","nodeType":"YulIdentifier","src":"6083:9:11"},{"kind":"number","nativeSrc":"6094:3:11","nodeType":"YulLiteral","src":"6094:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6079:3:11","nodeType":"YulIdentifier","src":"6079:3:11"},"nativeSrc":"6079:19:11","nodeType":"YulFunctionCall","src":"6079:19:11"}],"functionName":{"name":"abi_encode_uint32","nativeSrc":"6045:17:11","nodeType":"YulIdentifier","src":"6045:17:11"},"nativeSrc":"6045:54:11","nodeType":"YulFunctionCall","src":"6045:54:11"},"nativeSrc":"6045:54:11","nodeType":"YulExpressionStatement","src":"6045:54:11"},{"nativeSrc":"6108:45:11","nodeType":"YulVariableDeclaration","src":"6108:45:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6140:6:11","nodeType":"YulIdentifier","src":"6140:6:11"},{"kind":"number","nativeSrc":"6148:3:11","nodeType":"YulLiteral","src":"6148:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6136:3:11","nodeType":"YulIdentifier","src":"6136:3:11"},"nativeSrc":"6136:16:11","nodeType":"YulFunctionCall","src":"6136:16:11"}],"functionName":{"name":"mload","nativeSrc":"6130:5:11","nodeType":"YulIdentifier","src":"6130:5:11"},"nativeSrc":"6130:23:11","nodeType":"YulFunctionCall","src":"6130:23:11"},"variables":[{"name":"memberValue0_2","nativeSrc":"6112:14:11","nodeType":"YulTypedName","src":"6112:14:11","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_2","nativeSrc":"6180:14:11","nodeType":"YulIdentifier","src":"6180:14:11"},{"arguments":[{"name":"headStart","nativeSrc":"6200:9:11","nodeType":"YulIdentifier","src":"6200:9:11"},{"kind":"number","nativeSrc":"6211:3:11","nodeType":"YulLiteral","src":"6211:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6196:3:11","nodeType":"YulIdentifier","src":"6196:3:11"},"nativeSrc":"6196:19:11","nodeType":"YulFunctionCall","src":"6196:19:11"}],"functionName":{"name":"abi_encode_uint32","nativeSrc":"6162:17:11","nodeType":"YulIdentifier","src":"6162:17:11"},"nativeSrc":"6162:54:11","nodeType":"YulFunctionCall","src":"6162:54:11"},"nativeSrc":"6162:54:11","nodeType":"YulExpressionStatement","src":"6162:54:11"},{"nativeSrc":"6225:45:11","nodeType":"YulVariableDeclaration","src":"6225:45:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6257:6:11","nodeType":"YulIdentifier","src":"6257:6:11"},{"kind":"number","nativeSrc":"6265:3:11","nodeType":"YulLiteral","src":"6265:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6253:3:11","nodeType":"YulIdentifier","src":"6253:3:11"},"nativeSrc":"6253:16:11","nodeType":"YulFunctionCall","src":"6253:16:11"}],"functionName":{"name":"mload","nativeSrc":"6247:5:11","nodeType":"YulIdentifier","src":"6247:5:11"},"nativeSrc":"6247:23:11","nodeType":"YulFunctionCall","src":"6247:23:11"},"variables":[{"name":"memberValue0_3","nativeSrc":"6229:14:11","nodeType":"YulTypedName","src":"6229:14:11","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_3","nativeSrc":"6297:14:11","nodeType":"YulIdentifier","src":"6297:14:11"},{"arguments":[{"name":"headStart","nativeSrc":"6317:9:11","nodeType":"YulIdentifier","src":"6317:9:11"},{"kind":"number","nativeSrc":"6328:3:11","nodeType":"YulLiteral","src":"6328:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"6313:3:11","nodeType":"YulIdentifier","src":"6313:3:11"},"nativeSrc":"6313:19:11","nodeType":"YulFunctionCall","src":"6313:19:11"}],"functionName":{"name":"abi_encode_uint32","nativeSrc":"6279:17:11","nodeType":"YulIdentifier","src":"6279:17:11"},"nativeSrc":"6279:54:11","nodeType":"YulFunctionCall","src":"6279:54:11"},"nativeSrc":"6279:54:11","nodeType":"YulExpressionStatement","src":"6279:54:11"},{"nativeSrc":"6342:45:11","nodeType":"YulVariableDeclaration","src":"6342:45:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6374:6:11","nodeType":"YulIdentifier","src":"6374:6:11"},{"kind":"number","nativeSrc":"6382:3:11","nodeType":"YulLiteral","src":"6382:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"6370:3:11","nodeType":"YulIdentifier","src":"6370:3:11"},"nativeSrc":"6370:16:11","nodeType":"YulFunctionCall","src":"6370:16:11"}],"functionName":{"name":"mload","nativeSrc":"6364:5:11","nodeType":"YulIdentifier","src":"6364:5:11"},"nativeSrc":"6364:23:11","nodeType":"YulFunctionCall","src":"6364:23:11"},"variables":[{"name":"memberValue0_4","nativeSrc":"6346:14:11","nodeType":"YulTypedName","src":"6346:14:11","type":""}]},{"nativeSrc":"6396:16:11","nodeType":"YulVariableDeclaration","src":"6396:16:11","value":{"kind":"number","nativeSrc":"6406:6:11","nodeType":"YulLiteral","src":"6406:6:11","type":"","value":"0x0120"},"variables":[{"name":"_1","nativeSrc":"6400:2:11","nodeType":"YulTypedName","src":"6400:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6432:9:11","nodeType":"YulIdentifier","src":"6432:9:11"},{"kind":"number","nativeSrc":"6443:3:11","nodeType":"YulLiteral","src":"6443:3:11","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"6428:3:11","nodeType":"YulIdentifier","src":"6428:3:11"},"nativeSrc":"6428:19:11","nodeType":"YulFunctionCall","src":"6428:19:11"},{"name":"_1","nativeSrc":"6449:2:11","nodeType":"YulIdentifier","src":"6449:2:11"}],"functionName":{"name":"mstore","nativeSrc":"6421:6:11","nodeType":"YulIdentifier","src":"6421:6:11"},"nativeSrc":"6421:31:11","nodeType":"YulFunctionCall","src":"6421:31:11"},"nativeSrc":"6421:31:11","nodeType":"YulExpressionStatement","src":"6421:31:11"},{"nativeSrc":"6461:84:11","nodeType":"YulVariableDeclaration","src":"6461:84:11","value":{"arguments":[{"name":"memberValue0_4","nativeSrc":"6509:14:11","nodeType":"YulIdentifier","src":"6509:14:11"},{"arguments":[{"name":"headStart","nativeSrc":"6529:9:11","nodeType":"YulIdentifier","src":"6529:9:11"},{"kind":"number","nativeSrc":"6540:3:11","nodeType":"YulLiteral","src":"6540:3:11","type":"","value":"320"}],"functionName":{"name":"add","nativeSrc":"6525:3:11","nodeType":"YulIdentifier","src":"6525:3:11"},"nativeSrc":"6525:19:11","nodeType":"YulFunctionCall","src":"6525:19:11"}],"functionName":{"name":"abi_encode_array_struct_Input_dyn","nativeSrc":"6475:33:11","nodeType":"YulIdentifier","src":"6475:33:11"},"nativeSrc":"6475:70:11","nodeType":"YulFunctionCall","src":"6475:70:11"},"variables":[{"name":"tail_1","nativeSrc":"6465:6:11","nodeType":"YulTypedName","src":"6465:6:11","type":""}]},{"nativeSrc":"6554:45:11","nodeType":"YulVariableDeclaration","src":"6554:45:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6586:6:11","nodeType":"YulIdentifier","src":"6586:6:11"},{"kind":"number","nativeSrc":"6594:3:11","nodeType":"YulLiteral","src":"6594:3:11","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"6582:3:11","nodeType":"YulIdentifier","src":"6582:3:11"},"nativeSrc":"6582:16:11","nodeType":"YulFunctionCall","src":"6582:16:11"}],"functionName":{"name":"mload","nativeSrc":"6576:5:11","nodeType":"YulIdentifier","src":"6576:5:11"},"nativeSrc":"6576:23:11","nodeType":"YulFunctionCall","src":"6576:23:11"},"variables":[{"name":"memberValue0_5","nativeSrc":"6558:14:11","nodeType":"YulTypedName","src":"6558:14:11","type":""}]},{"nativeSrc":"6608:17:11","nodeType":"YulVariableDeclaration","src":"6608:17:11","value":{"arguments":[{"kind":"number","nativeSrc":"6622:2:11","nodeType":"YulLiteral","src":"6622:2:11","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"6618:3:11","nodeType":"YulIdentifier","src":"6618:3:11"},"nativeSrc":"6618:7:11","nodeType":"YulFunctionCall","src":"6618:7:11"},"variables":[{"name":"_2","nativeSrc":"6612:2:11","nodeType":"YulTypedName","src":"6612:2:11","type":""}]},{"nativeSrc":"6634:13:11","nodeType":"YulVariableDeclaration","src":"6634:13:11","value":{"kind":"number","nativeSrc":"6644:3:11","nodeType":"YulLiteral","src":"6644:3:11","type":"","value":"256"},"variables":[{"name":"_3","nativeSrc":"6638:2:11","nodeType":"YulTypedName","src":"6638:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6667:9:11","nodeType":"YulIdentifier","src":"6667:9:11"},{"name":"_3","nativeSrc":"6678:2:11","nodeType":"YulIdentifier","src":"6678:2:11"}],"functionName":{"name":"add","nativeSrc":"6663:3:11","nodeType":"YulIdentifier","src":"6663:3:11"},"nativeSrc":"6663:18:11","nodeType":"YulFunctionCall","src":"6663:18:11"},{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"6691:6:11","nodeType":"YulIdentifier","src":"6691:6:11"},{"name":"headStart","nativeSrc":"6699:9:11","nodeType":"YulIdentifier","src":"6699:9:11"}],"functionName":{"name":"sub","nativeSrc":"6687:3:11","nodeType":"YulIdentifier","src":"6687:3:11"},"nativeSrc":"6687:22:11","nodeType":"YulFunctionCall","src":"6687:22:11"},{"name":"_2","nativeSrc":"6711:2:11","nodeType":"YulIdentifier","src":"6711:2:11"}],"functionName":{"name":"add","nativeSrc":"6683:3:11","nodeType":"YulIdentifier","src":"6683:3:11"},"nativeSrc":"6683:31:11","nodeType":"YulFunctionCall","src":"6683:31:11"}],"functionName":{"name":"mstore","nativeSrc":"6656:6:11","nodeType":"YulIdentifier","src":"6656:6:11"},"nativeSrc":"6656:59:11","nodeType":"YulFunctionCall","src":"6656:59:11"},"nativeSrc":"6656:59:11","nodeType":"YulExpressionStatement","src":"6656:59:11"},{"nativeSrc":"6724:72:11","nodeType":"YulVariableDeclaration","src":"6724:72:11","value":{"arguments":[{"name":"memberValue0_5","nativeSrc":"6773:14:11","nodeType":"YulIdentifier","src":"6773:14:11"},{"name":"tail_1","nativeSrc":"6789:6:11","nodeType":"YulIdentifier","src":"6789:6:11"}],"functionName":{"name":"abi_encode_array_struct_Output_dyn","nativeSrc":"6738:34:11","nodeType":"YulIdentifier","src":"6738:34:11"},"nativeSrc":"6738:58:11","nodeType":"YulFunctionCall","src":"6738:58:11"},"variables":[{"name":"tail_2","nativeSrc":"6728:6:11","nodeType":"YulTypedName","src":"6728:6:11","type":""}]},{"nativeSrc":"6805:44:11","nodeType":"YulVariableDeclaration","src":"6805:44:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6837:6:11","nodeType":"YulIdentifier","src":"6837:6:11"},{"name":"_3","nativeSrc":"6845:2:11","nodeType":"YulIdentifier","src":"6845:2:11"}],"functionName":{"name":"add","nativeSrc":"6833:3:11","nodeType":"YulIdentifier","src":"6833:3:11"},"nativeSrc":"6833:15:11","nodeType":"YulFunctionCall","src":"6833:15:11"}],"functionName":{"name":"mload","nativeSrc":"6827:5:11","nodeType":"YulIdentifier","src":"6827:5:11"},"nativeSrc":"6827:22:11","nodeType":"YulFunctionCall","src":"6827:22:11"},"variables":[{"name":"memberValue0_6","nativeSrc":"6809:14:11","nodeType":"YulTypedName","src":"6809:14:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6869:9:11","nodeType":"YulIdentifier","src":"6869:9:11"},{"name":"_1","nativeSrc":"6880:2:11","nodeType":"YulIdentifier","src":"6880:2:11"}],"functionName":{"name":"add","nativeSrc":"6865:3:11","nodeType":"YulIdentifier","src":"6865:3:11"},"nativeSrc":"6865:18:11","nodeType":"YulFunctionCall","src":"6865:18:11"},{"arguments":[{"arguments":[{"name":"tail_2","nativeSrc":"6893:6:11","nodeType":"YulIdentifier","src":"6893:6:11"},{"name":"headStart","nativeSrc":"6901:9:11","nodeType":"YulIdentifier","src":"6901:9:11"}],"functionName":{"name":"sub","nativeSrc":"6889:3:11","nodeType":"YulIdentifier","src":"6889:3:11"},"nativeSrc":"6889:22:11","nodeType":"YulFunctionCall","src":"6889:22:11"},{"name":"_2","nativeSrc":"6913:2:11","nodeType":"YulIdentifier","src":"6913:2:11"}],"functionName":{"name":"add","nativeSrc":"6885:3:11","nodeType":"YulIdentifier","src":"6885:3:11"},"nativeSrc":"6885:31:11","nodeType":"YulFunctionCall","src":"6885:31:11"}],"functionName":{"name":"mstore","nativeSrc":"6858:6:11","nodeType":"YulIdentifier","src":"6858:6:11"},"nativeSrc":"6858:59:11","nodeType":"YulFunctionCall","src":"6858:59:11"},"nativeSrc":"6858:59:11","nodeType":"YulExpressionStatement","src":"6858:59:11"},{"nativeSrc":"6926:66:11","nodeType":"YulAssignment","src":"6926:66:11","value":{"arguments":[{"name":"memberValue0_6","nativeSrc":"6969:14:11","nodeType":"YulIdentifier","src":"6969:14:11"},{"name":"tail_2","nativeSrc":"6985:6:11","nodeType":"YulIdentifier","src":"6985:6:11"}],"functionName":{"name":"abi_encode_array_struct_Output_dyn","nativeSrc":"6934:34:11","nodeType":"YulIdentifier","src":"6934:34:11"},"nativeSrc":"6934:58:11","nodeType":"YulFunctionCall","src":"6934:58:11"},"variableNames":[{"name":"tail","nativeSrc":"6926:4:11","nodeType":"YulIdentifier","src":"6926:4:11"}]}]},"name":"abi_encode_tuple_t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr__to_t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr__fromStack_reversed","nativeSrc":"5536:1462:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5688:9:11","nodeType":"YulTypedName","src":"5688:9:11","type":""},{"name":"value0","nativeSrc":"5699:6:11","nodeType":"YulTypedName","src":"5699:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5710:4:11","nodeType":"YulTypedName","src":"5710:4:11","type":""}],"src":"5536:1462:11"},{"body":{"nativeSrc":"7073:177:11","nodeType":"YulBlock","src":"7073:177:11","statements":[{"body":{"nativeSrc":"7119:16:11","nodeType":"YulBlock","src":"7119:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7128:1:11","nodeType":"YulLiteral","src":"7128:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"7131:1:11","nodeType":"YulLiteral","src":"7131:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7121:6:11","nodeType":"YulIdentifier","src":"7121:6:11"},"nativeSrc":"7121:12:11","nodeType":"YulFunctionCall","src":"7121:12:11"},"nativeSrc":"7121:12:11","nodeType":"YulExpressionStatement","src":"7121:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7094:7:11","nodeType":"YulIdentifier","src":"7094:7:11"},{"name":"headStart","nativeSrc":"7103:9:11","nodeType":"YulIdentifier","src":"7103:9:11"}],"functionName":{"name":"sub","nativeSrc":"7090:3:11","nodeType":"YulIdentifier","src":"7090:3:11"},"nativeSrc":"7090:23:11","nodeType":"YulFunctionCall","src":"7090:23:11"},{"kind":"number","nativeSrc":"7115:2:11","nodeType":"YulLiteral","src":"7115:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7086:3:11","nodeType":"YulIdentifier","src":"7086:3:11"},"nativeSrc":"7086:32:11","nodeType":"YulFunctionCall","src":"7086:32:11"},"nativeSrc":"7083:52:11","nodeType":"YulIf","src":"7083:52:11"},{"nativeSrc":"7144:36:11","nodeType":"YulVariableDeclaration","src":"7144:36:11","value":{"arguments":[{"name":"headStart","nativeSrc":"7170:9:11","nodeType":"YulIdentifier","src":"7170:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"7157:12:11","nodeType":"YulIdentifier","src":"7157:12:11"},"nativeSrc":"7157:23:11","nodeType":"YulFunctionCall","src":"7157:23:11"},"variables":[{"name":"value","nativeSrc":"7148:5:11","nodeType":"YulTypedName","src":"7148:5:11","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7214:5:11","nodeType":"YulIdentifier","src":"7214:5:11"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7189:24:11","nodeType":"YulIdentifier","src":"7189:24:11"},"nativeSrc":"7189:31:11","nodeType":"YulFunctionCall","src":"7189:31:11"},"nativeSrc":"7189:31:11","nodeType":"YulExpressionStatement","src":"7189:31:11"},{"nativeSrc":"7229:15:11","nodeType":"YulAssignment","src":"7229:15:11","value":{"name":"value","nativeSrc":"7239:5:11","nodeType":"YulIdentifier","src":"7239:5:11"},"variableNames":[{"name":"value0","nativeSrc":"7229:6:11","nodeType":"YulIdentifier","src":"7229:6:11"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"7003:247:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7039:9:11","nodeType":"YulTypedName","src":"7039:9:11","type":""},{"name":"dataEnd","nativeSrc":"7050:7:11","nodeType":"YulTypedName","src":"7050:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7062:6:11","nodeType":"YulTypedName","src":"7062:6:11","type":""}],"src":"7003:247:11"},{"body":{"nativeSrc":"7356:76:11","nodeType":"YulBlock","src":"7356:76:11","statements":[{"nativeSrc":"7366:26:11","nodeType":"YulAssignment","src":"7366:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"7378:9:11","nodeType":"YulIdentifier","src":"7378:9:11"},{"kind":"number","nativeSrc":"7389:2:11","nodeType":"YulLiteral","src":"7389:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7374:3:11","nodeType":"YulIdentifier","src":"7374:3:11"},"nativeSrc":"7374:18:11","nodeType":"YulFunctionCall","src":"7374:18:11"},"variableNames":[{"name":"tail","nativeSrc":"7366:4:11","nodeType":"YulIdentifier","src":"7366:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7408:9:11","nodeType":"YulIdentifier","src":"7408:9:11"},{"name":"value0","nativeSrc":"7419:6:11","nodeType":"YulIdentifier","src":"7419:6:11"}],"functionName":{"name":"mstore","nativeSrc":"7401:6:11","nodeType":"YulIdentifier","src":"7401:6:11"},"nativeSrc":"7401:25:11","nodeType":"YulFunctionCall","src":"7401:25:11"},"nativeSrc":"7401:25:11","nodeType":"YulExpressionStatement","src":"7401:25:11"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"7255:177:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7325:9:11","nodeType":"YulTypedName","src":"7325:9:11","type":""},{"name":"value0","nativeSrc":"7336:6:11","nodeType":"YulTypedName","src":"7336:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7347:4:11","nodeType":"YulTypedName","src":"7347:4:11","type":""}],"src":"7255:177:11"},{"body":{"nativeSrc":"7469:95:11","nodeType":"YulBlock","src":"7469:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7486:1:11","nodeType":"YulLiteral","src":"7486:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"7493:3:11","nodeType":"YulLiteral","src":"7493:3:11","type":"","value":"224"},{"kind":"number","nativeSrc":"7498:10:11","nodeType":"YulLiteral","src":"7498:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"7489:3:11","nodeType":"YulIdentifier","src":"7489:3:11"},"nativeSrc":"7489:20:11","nodeType":"YulFunctionCall","src":"7489:20:11"}],"functionName":{"name":"mstore","nativeSrc":"7479:6:11","nodeType":"YulIdentifier","src":"7479:6:11"},"nativeSrc":"7479:31:11","nodeType":"YulFunctionCall","src":"7479:31:11"},"nativeSrc":"7479:31:11","nodeType":"YulExpressionStatement","src":"7479:31:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7526:1:11","nodeType":"YulLiteral","src":"7526:1:11","type":"","value":"4"},{"kind":"number","nativeSrc":"7529:4:11","nodeType":"YulLiteral","src":"7529:4:11","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"7519:6:11","nodeType":"YulIdentifier","src":"7519:6:11"},"nativeSrc":"7519:15:11","nodeType":"YulFunctionCall","src":"7519:15:11"},"nativeSrc":"7519:15:11","nodeType":"YulExpressionStatement","src":"7519:15:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7550:1:11","nodeType":"YulLiteral","src":"7550:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"7553:4:11","nodeType":"YulLiteral","src":"7553:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7543:6:11","nodeType":"YulIdentifier","src":"7543:6:11"},"nativeSrc":"7543:15:11","nodeType":"YulFunctionCall","src":"7543:15:11"},"nativeSrc":"7543:15:11","nodeType":"YulExpressionStatement","src":"7543:15:11"}]},"name":"panic_error_0x41","nativeSrc":"7437:127:11","nodeType":"YulFunctionDefinition","src":"7437:127:11"},{"body":{"nativeSrc":"7610:207:11","nodeType":"YulBlock","src":"7610:207:11","statements":[{"nativeSrc":"7620:19:11","nodeType":"YulAssignment","src":"7620:19:11","value":{"arguments":[{"kind":"number","nativeSrc":"7636:2:11","nodeType":"YulLiteral","src":"7636:2:11","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"7630:5:11","nodeType":"YulIdentifier","src":"7630:5:11"},"nativeSrc":"7630:9:11","nodeType":"YulFunctionCall","src":"7630:9:11"},"variableNames":[{"name":"memPtr","nativeSrc":"7620:6:11","nodeType":"YulIdentifier","src":"7620:6:11"}]},{"nativeSrc":"7648:35:11","nodeType":"YulVariableDeclaration","src":"7648:35:11","value":{"arguments":[{"name":"memPtr","nativeSrc":"7670:6:11","nodeType":"YulIdentifier","src":"7670:6:11"},{"kind":"number","nativeSrc":"7678:4:11","nodeType":"YulLiteral","src":"7678:4:11","type":"","value":"0xe0"}],"functionName":{"name":"add","nativeSrc":"7666:3:11","nodeType":"YulIdentifier","src":"7666:3:11"},"nativeSrc":"7666:17:11","nodeType":"YulFunctionCall","src":"7666:17:11"},"variables":[{"name":"newFreePtr","nativeSrc":"7652:10:11","nodeType":"YulTypedName","src":"7652:10:11","type":""}]},{"body":{"nativeSrc":"7758:22:11","nodeType":"YulBlock","src":"7758:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7760:16:11","nodeType":"YulIdentifier","src":"7760:16:11"},"nativeSrc":"7760:18:11","nodeType":"YulFunctionCall","src":"7760:18:11"},"nativeSrc":"7760:18:11","nodeType":"YulExpressionStatement","src":"7760:18:11"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"7701:10:11","nodeType":"YulIdentifier","src":"7701:10:11"},{"kind":"number","nativeSrc":"7713:18:11","nodeType":"YulLiteral","src":"7713:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7698:2:11","nodeType":"YulIdentifier","src":"7698:2:11"},"nativeSrc":"7698:34:11","nodeType":"YulFunctionCall","src":"7698:34:11"},{"arguments":[{"name":"newFreePtr","nativeSrc":"7737:10:11","nodeType":"YulIdentifier","src":"7737:10:11"},{"name":"memPtr","nativeSrc":"7749:6:11","nodeType":"YulIdentifier","src":"7749:6:11"}],"functionName":{"name":"lt","nativeSrc":"7734:2:11","nodeType":"YulIdentifier","src":"7734:2:11"},"nativeSrc":"7734:22:11","nodeType":"YulFunctionCall","src":"7734:22:11"}],"functionName":{"name":"or","nativeSrc":"7695:2:11","nodeType":"YulIdentifier","src":"7695:2:11"},"nativeSrc":"7695:62:11","nodeType":"YulFunctionCall","src":"7695:62:11"},"nativeSrc":"7692:88:11","nodeType":"YulIf","src":"7692:88:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7796:2:11","nodeType":"YulLiteral","src":"7796:2:11","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"7800:10:11","nodeType":"YulIdentifier","src":"7800:10:11"}],"functionName":{"name":"mstore","nativeSrc":"7789:6:11","nodeType":"YulIdentifier","src":"7789:6:11"},"nativeSrc":"7789:22:11","nodeType":"YulFunctionCall","src":"7789:22:11"},"nativeSrc":"7789:22:11","nodeType":"YulExpressionStatement","src":"7789:22:11"}]},"name":"allocate_memory","nativeSrc":"7569:248:11","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"7599:6:11","nodeType":"YulTypedName","src":"7599:6:11","type":""}],"src":"7569:248:11"},{"body":{"nativeSrc":"7866:77:11","nodeType":"YulBlock","src":"7866:77:11","statements":[{"body":{"nativeSrc":"7921:16:11","nodeType":"YulBlock","src":"7921:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7930:1:11","nodeType":"YulLiteral","src":"7930:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"7933:1:11","nodeType":"YulLiteral","src":"7933:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7923:6:11","nodeType":"YulIdentifier","src":"7923:6:11"},"nativeSrc":"7923:12:11","nodeType":"YulFunctionCall","src":"7923:12:11"},"nativeSrc":"7923:12:11","nodeType":"YulExpressionStatement","src":"7923:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7889:5:11","nodeType":"YulIdentifier","src":"7889:5:11"},{"arguments":[{"name":"value","nativeSrc":"7900:5:11","nodeType":"YulIdentifier","src":"7900:5:11"},{"kind":"number","nativeSrc":"7907:10:11","nodeType":"YulLiteral","src":"7907:10:11","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"7896:3:11","nodeType":"YulIdentifier","src":"7896:3:11"},"nativeSrc":"7896:22:11","nodeType":"YulFunctionCall","src":"7896:22:11"}],"functionName":{"name":"eq","nativeSrc":"7886:2:11","nodeType":"YulIdentifier","src":"7886:2:11"},"nativeSrc":"7886:33:11","nodeType":"YulFunctionCall","src":"7886:33:11"}],"functionName":{"name":"iszero","nativeSrc":"7879:6:11","nodeType":"YulIdentifier","src":"7879:6:11"},"nativeSrc":"7879:41:11","nodeType":"YulFunctionCall","src":"7879:41:11"},"nativeSrc":"7876:61:11","nodeType":"YulIf","src":"7876:61:11"}]},"name":"validator_revert_uint32","nativeSrc":"7822:121:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7855:5:11","nodeType":"YulTypedName","src":"7855:5:11","type":""}],"src":"7822:121:11"},{"body":{"nativeSrc":"7996:84:11","nodeType":"YulBlock","src":"7996:84:11","statements":[{"nativeSrc":"8006:29:11","nodeType":"YulAssignment","src":"8006:29:11","value":{"arguments":[{"name":"offset","nativeSrc":"8028:6:11","nodeType":"YulIdentifier","src":"8028:6:11"}],"functionName":{"name":"calldataload","nativeSrc":"8015:12:11","nodeType":"YulIdentifier","src":"8015:12:11"},"nativeSrc":"8015:20:11","nodeType":"YulFunctionCall","src":"8015:20:11"},"variableNames":[{"name":"value","nativeSrc":"8006:5:11","nodeType":"YulIdentifier","src":"8006:5:11"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8068:5:11","nodeType":"YulIdentifier","src":"8068:5:11"}],"functionName":{"name":"validator_revert_uint32","nativeSrc":"8044:23:11","nodeType":"YulIdentifier","src":"8044:23:11"},"nativeSrc":"8044:30:11","nodeType":"YulFunctionCall","src":"8044:30:11"},"nativeSrc":"8044:30:11","nodeType":"YulExpressionStatement","src":"8044:30:11"}]},"name":"abi_decode_uint32","nativeSrc":"7948:132:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7975:6:11","nodeType":"YulTypedName","src":"7975:6:11","type":""}],"returnVariables":[{"name":"value","nativeSrc":"7986:5:11","nodeType":"YulTypedName","src":"7986:5:11","type":""}],"src":"7948:132:11"},{"body":{"nativeSrc":"8137:666:11","nodeType":"YulBlock","src":"8137:666:11","statements":[{"body":{"nativeSrc":"8186:16:11","nodeType":"YulBlock","src":"8186:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8195:1:11","nodeType":"YulLiteral","src":"8195:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"8198:1:11","nodeType":"YulLiteral","src":"8198:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8188:6:11","nodeType":"YulIdentifier","src":"8188:6:11"},"nativeSrc":"8188:12:11","nodeType":"YulFunctionCall","src":"8188:12:11"},"nativeSrc":"8188:12:11","nodeType":"YulExpressionStatement","src":"8188:12:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8165:6:11","nodeType":"YulIdentifier","src":"8165:6:11"},{"kind":"number","nativeSrc":"8173:4:11","nodeType":"YulLiteral","src":"8173:4:11","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8161:3:11","nodeType":"YulIdentifier","src":"8161:3:11"},"nativeSrc":"8161:17:11","nodeType":"YulFunctionCall","src":"8161:17:11"},{"name":"end","nativeSrc":"8180:3:11","nodeType":"YulIdentifier","src":"8180:3:11"}],"functionName":{"name":"slt","nativeSrc":"8157:3:11","nodeType":"YulIdentifier","src":"8157:3:11"},"nativeSrc":"8157:27:11","nodeType":"YulFunctionCall","src":"8157:27:11"}],"functionName":{"name":"iszero","nativeSrc":"8150:6:11","nodeType":"YulIdentifier","src":"8150:6:11"},"nativeSrc":"8150:35:11","nodeType":"YulFunctionCall","src":"8150:35:11"},"nativeSrc":"8147:55:11","nodeType":"YulIf","src":"8147:55:11"},{"nativeSrc":"8211:30:11","nodeType":"YulVariableDeclaration","src":"8211:30:11","value":{"arguments":[{"name":"offset","nativeSrc":"8234:6:11","nodeType":"YulIdentifier","src":"8234:6:11"}],"functionName":{"name":"calldataload","nativeSrc":"8221:12:11","nodeType":"YulIdentifier","src":"8221:12:11"},"nativeSrc":"8221:20:11","nodeType":"YulFunctionCall","src":"8221:20:11"},"variables":[{"name":"_1","nativeSrc":"8215:2:11","nodeType":"YulTypedName","src":"8215:2:11","type":""}]},{"nativeSrc":"8250:28:11","nodeType":"YulVariableDeclaration","src":"8250:28:11","value":{"kind":"number","nativeSrc":"8260:18:11","nodeType":"YulLiteral","src":"8260:18:11","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"8254:2:11","nodeType":"YulTypedName","src":"8254:2:11","type":""}]},{"body":{"nativeSrc":"8301:22:11","nodeType":"YulBlock","src":"8301:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8303:16:11","nodeType":"YulIdentifier","src":"8303:16:11"},"nativeSrc":"8303:18:11","nodeType":"YulFunctionCall","src":"8303:18:11"},"nativeSrc":"8303:18:11","nodeType":"YulExpressionStatement","src":"8303:18:11"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"8293:2:11","nodeType":"YulIdentifier","src":"8293:2:11"},{"name":"_2","nativeSrc":"8297:2:11","nodeType":"YulIdentifier","src":"8297:2:11"}],"functionName":{"name":"gt","nativeSrc":"8290:2:11","nodeType":"YulIdentifier","src":"8290:2:11"},"nativeSrc":"8290:10:11","nodeType":"YulFunctionCall","src":"8290:10:11"},"nativeSrc":"8287:36:11","nodeType":"YulIf","src":"8287:36:11"},{"nativeSrc":"8332:17:11","nodeType":"YulVariableDeclaration","src":"8332:17:11","value":{"arguments":[{"kind":"number","nativeSrc":"8346:2:11","nodeType":"YulLiteral","src":"8346:2:11","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"8342:3:11","nodeType":"YulIdentifier","src":"8342:3:11"},"nativeSrc":"8342:7:11","nodeType":"YulFunctionCall","src":"8342:7:11"},"variables":[{"name":"_3","nativeSrc":"8336:2:11","nodeType":"YulTypedName","src":"8336:2:11","type":""}]},{"nativeSrc":"8358:23:11","nodeType":"YulVariableDeclaration","src":"8358:23:11","value":{"arguments":[{"kind":"number","nativeSrc":"8378:2:11","nodeType":"YulLiteral","src":"8378:2:11","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"8372:5:11","nodeType":"YulIdentifier","src":"8372:5:11"},"nativeSrc":"8372:9:11","nodeType":"YulFunctionCall","src":"8372:9:11"},"variables":[{"name":"memPtr","nativeSrc":"8362:6:11","nodeType":"YulTypedName","src":"8362:6:11","type":""}]},{"nativeSrc":"8390:71:11","nodeType":"YulVariableDeclaration","src":"8390:71:11","value":{"arguments":[{"name":"memPtr","nativeSrc":"8412:6:11","nodeType":"YulIdentifier","src":"8412:6:11"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"8436:2:11","nodeType":"YulIdentifier","src":"8436:2:11"},{"kind":"number","nativeSrc":"8440:4:11","nodeType":"YulLiteral","src":"8440:4:11","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8432:3:11","nodeType":"YulIdentifier","src":"8432:3:11"},"nativeSrc":"8432:13:11","nodeType":"YulFunctionCall","src":"8432:13:11"},{"name":"_3","nativeSrc":"8447:2:11","nodeType":"YulIdentifier","src":"8447:2:11"}],"functionName":{"name":"and","nativeSrc":"8428:3:11","nodeType":"YulIdentifier","src":"8428:3:11"},"nativeSrc":"8428:22:11","nodeType":"YulFunctionCall","src":"8428:22:11"},{"kind":"number","nativeSrc":"8452:2:11","nodeType":"YulLiteral","src":"8452:2:11","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"8424:3:11","nodeType":"YulIdentifier","src":"8424:3:11"},"nativeSrc":"8424:31:11","nodeType":"YulFunctionCall","src":"8424:31:11"},{"name":"_3","nativeSrc":"8457:2:11","nodeType":"YulIdentifier","src":"8457:2:11"}],"functionName":{"name":"and","nativeSrc":"8420:3:11","nodeType":"YulIdentifier","src":"8420:3:11"},"nativeSrc":"8420:40:11","nodeType":"YulFunctionCall","src":"8420:40:11"}],"functionName":{"name":"add","nativeSrc":"8408:3:11","nodeType":"YulIdentifier","src":"8408:3:11"},"nativeSrc":"8408:53:11","nodeType":"YulFunctionCall","src":"8408:53:11"},"variables":[{"name":"newFreePtr","nativeSrc":"8394:10:11","nodeType":"YulTypedName","src":"8394:10:11","type":""}]},{"body":{"nativeSrc":"8520:22:11","nodeType":"YulBlock","src":"8520:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8522:16:11","nodeType":"YulIdentifier","src":"8522:16:11"},"nativeSrc":"8522:18:11","nodeType":"YulFunctionCall","src":"8522:18:11"},"nativeSrc":"8522:18:11","nodeType":"YulExpressionStatement","src":"8522:18:11"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"8479:10:11","nodeType":"YulIdentifier","src":"8479:10:11"},{"name":"_2","nativeSrc":"8491:2:11","nodeType":"YulIdentifier","src":"8491:2:11"}],"functionName":{"name":"gt","nativeSrc":"8476:2:11","nodeType":"YulIdentifier","src":"8476:2:11"},"nativeSrc":"8476:18:11","nodeType":"YulFunctionCall","src":"8476:18:11"},{"arguments":[{"name":"newFreePtr","nativeSrc":"8499:10:11","nodeType":"YulIdentifier","src":"8499:10:11"},{"name":"memPtr","nativeSrc":"8511:6:11","nodeType":"YulIdentifier","src":"8511:6:11"}],"functionName":{"name":"lt","nativeSrc":"8496:2:11","nodeType":"YulIdentifier","src":"8496:2:11"},"nativeSrc":"8496:22:11","nodeType":"YulFunctionCall","src":"8496:22:11"}],"functionName":{"name":"or","nativeSrc":"8473:2:11","nodeType":"YulIdentifier","src":"8473:2:11"},"nativeSrc":"8473:46:11","nodeType":"YulFunctionCall","src":"8473:46:11"},"nativeSrc":"8470:72:11","nodeType":"YulIf","src":"8470:72:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8558:2:11","nodeType":"YulLiteral","src":"8558:2:11","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"8562:10:11","nodeType":"YulIdentifier","src":"8562:10:11"}],"functionName":{"name":"mstore","nativeSrc":"8551:6:11","nodeType":"YulIdentifier","src":"8551:6:11"},"nativeSrc":"8551:22:11","nodeType":"YulFunctionCall","src":"8551:22:11"},"nativeSrc":"8551:22:11","nodeType":"YulExpressionStatement","src":"8551:22:11"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"8589:6:11","nodeType":"YulIdentifier","src":"8589:6:11"},{"name":"_1","nativeSrc":"8597:2:11","nodeType":"YulIdentifier","src":"8597:2:11"}],"functionName":{"name":"mstore","nativeSrc":"8582:6:11","nodeType":"YulIdentifier","src":"8582:6:11"},"nativeSrc":"8582:18:11","nodeType":"YulFunctionCall","src":"8582:18:11"},"nativeSrc":"8582:18:11","nodeType":"YulExpressionStatement","src":"8582:18:11"},{"body":{"nativeSrc":"8648:16:11","nodeType":"YulBlock","src":"8648:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8657:1:11","nodeType":"YulLiteral","src":"8657:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"8660:1:11","nodeType":"YulLiteral","src":"8660:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8650:6:11","nodeType":"YulIdentifier","src":"8650:6:11"},"nativeSrc":"8650:12:11","nodeType":"YulFunctionCall","src":"8650:12:11"},"nativeSrc":"8650:12:11","nodeType":"YulExpressionStatement","src":"8650:12:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8623:6:11","nodeType":"YulIdentifier","src":"8623:6:11"},{"name":"_1","nativeSrc":"8631:2:11","nodeType":"YulIdentifier","src":"8631:2:11"}],"functionName":{"name":"add","nativeSrc":"8619:3:11","nodeType":"YulIdentifier","src":"8619:3:11"},"nativeSrc":"8619:15:11","nodeType":"YulFunctionCall","src":"8619:15:11"},{"kind":"number","nativeSrc":"8636:4:11","nodeType":"YulLiteral","src":"8636:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8615:3:11","nodeType":"YulIdentifier","src":"8615:3:11"},"nativeSrc":"8615:26:11","nodeType":"YulFunctionCall","src":"8615:26:11"},{"name":"end","nativeSrc":"8643:3:11","nodeType":"YulIdentifier","src":"8643:3:11"}],"functionName":{"name":"gt","nativeSrc":"8612:2:11","nodeType":"YulIdentifier","src":"8612:2:11"},"nativeSrc":"8612:35:11","nodeType":"YulFunctionCall","src":"8612:35:11"},"nativeSrc":"8609:55:11","nodeType":"YulIf","src":"8609:55:11"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"8690:6:11","nodeType":"YulIdentifier","src":"8690:6:11"},{"kind":"number","nativeSrc":"8698:4:11","nodeType":"YulLiteral","src":"8698:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8686:3:11","nodeType":"YulIdentifier","src":"8686:3:11"},"nativeSrc":"8686:17:11","nodeType":"YulFunctionCall","src":"8686:17:11"},{"arguments":[{"name":"offset","nativeSrc":"8709:6:11","nodeType":"YulIdentifier","src":"8709:6:11"},{"kind":"number","nativeSrc":"8717:4:11","nodeType":"YulLiteral","src":"8717:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8705:3:11","nodeType":"YulIdentifier","src":"8705:3:11"},"nativeSrc":"8705:17:11","nodeType":"YulFunctionCall","src":"8705:17:11"},{"name":"_1","nativeSrc":"8724:2:11","nodeType":"YulIdentifier","src":"8724:2:11"}],"functionName":{"name":"calldatacopy","nativeSrc":"8673:12:11","nodeType":"YulIdentifier","src":"8673:12:11"},"nativeSrc":"8673:54:11","nodeType":"YulFunctionCall","src":"8673:54:11"},"nativeSrc":"8673:54:11","nodeType":"YulExpressionStatement","src":"8673:54:11"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"8751:6:11","nodeType":"YulIdentifier","src":"8751:6:11"},{"name":"_1","nativeSrc":"8759:2:11","nodeType":"YulIdentifier","src":"8759:2:11"}],"functionName":{"name":"add","nativeSrc":"8747:3:11","nodeType":"YulIdentifier","src":"8747:3:11"},"nativeSrc":"8747:15:11","nodeType":"YulFunctionCall","src":"8747:15:11"},{"kind":"number","nativeSrc":"8764:4:11","nodeType":"YulLiteral","src":"8764:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8743:3:11","nodeType":"YulIdentifier","src":"8743:3:11"},"nativeSrc":"8743:26:11","nodeType":"YulFunctionCall","src":"8743:26:11"},{"kind":"number","nativeSrc":"8771:1:11","nodeType":"YulLiteral","src":"8771:1:11","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"8736:6:11","nodeType":"YulIdentifier","src":"8736:6:11"},"nativeSrc":"8736:37:11","nodeType":"YulFunctionCall","src":"8736:37:11"},"nativeSrc":"8736:37:11","nodeType":"YulExpressionStatement","src":"8736:37:11"},{"nativeSrc":"8782:15:11","nodeType":"YulAssignment","src":"8782:15:11","value":{"name":"memPtr","nativeSrc":"8791:6:11","nodeType":"YulIdentifier","src":"8791:6:11"},"variableNames":[{"name":"array","nativeSrc":"8782:5:11","nodeType":"YulIdentifier","src":"8782:5:11"}]}]},"name":"abi_decode_bytes","nativeSrc":"8085:718:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8111:6:11","nodeType":"YulTypedName","src":"8111:6:11","type":""},{"name":"end","nativeSrc":"8119:3:11","nodeType":"YulTypedName","src":"8119:3:11","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8127:5:11","nodeType":"YulTypedName","src":"8127:5:11","type":""}],"src":"8085:718:11"},{"body":{"nativeSrc":"8940:733:11","nodeType":"YulBlock","src":"8940:733:11","statements":[{"body":{"nativeSrc":"8991:16:11","nodeType":"YulBlock","src":"8991:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9000:1:11","nodeType":"YulLiteral","src":"9000:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"9003:1:11","nodeType":"YulLiteral","src":"9003:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8993:6:11","nodeType":"YulIdentifier","src":"8993:6:11"},"nativeSrc":"8993:12:11","nodeType":"YulFunctionCall","src":"8993:12:11"},"nativeSrc":"8993:12:11","nodeType":"YulExpressionStatement","src":"8993:12:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"8961:12:11","nodeType":"YulIdentifier","src":"8961:12:11"},"nativeSrc":"8961:14:11","nodeType":"YulFunctionCall","src":"8961:14:11"},{"name":"value","nativeSrc":"8977:5:11","nodeType":"YulIdentifier","src":"8977:5:11"}],"functionName":{"name":"sub","nativeSrc":"8957:3:11","nodeType":"YulIdentifier","src":"8957:3:11"},"nativeSrc":"8957:26:11","nodeType":"YulFunctionCall","src":"8957:26:11"},{"kind":"number","nativeSrc":"8985:4:11","nodeType":"YulLiteral","src":"8985:4:11","type":"","value":"0xe0"}],"functionName":{"name":"slt","nativeSrc":"8953:3:11","nodeType":"YulIdentifier","src":"8953:3:11"},"nativeSrc":"8953:37:11","nodeType":"YulFunctionCall","src":"8953:37:11"},"nativeSrc":"8950:57:11","nodeType":"YulIf","src":"8950:57:11"},{"nativeSrc":"9016:32:11","nodeType":"YulVariableDeclaration","src":"9016:32:11","value":{"arguments":[],"functionName":{"name":"allocate_memory","nativeSrc":"9031:15:11","nodeType":"YulIdentifier","src":"9031:15:11"},"nativeSrc":"9031:17:11","nodeType":"YulFunctionCall","src":"9031:17:11"},"variables":[{"name":"value_1","nativeSrc":"9020:7:11","nodeType":"YulTypedName","src":"9020:7:11","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"9064:7:11","nodeType":"YulIdentifier","src":"9064:7:11"},{"arguments":[{"name":"value","nativeSrc":"9092:5:11","nodeType":"YulIdentifier","src":"9092:5:11"}],"functionName":{"name":"abi_decode_address","nativeSrc":"9073:18:11","nodeType":"YulIdentifier","src":"9073:18:11"},"nativeSrc":"9073:25:11","nodeType":"YulFunctionCall","src":"9073:25:11"}],"functionName":{"name":"mstore","nativeSrc":"9057:6:11","nodeType":"YulIdentifier","src":"9057:6:11"},"nativeSrc":"9057:42:11","nodeType":"YulFunctionCall","src":"9057:42:11"},"nativeSrc":"9057:42:11","nodeType":"YulExpressionStatement","src":"9057:42:11"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"9119:7:11","nodeType":"YulIdentifier","src":"9119:7:11"},{"kind":"number","nativeSrc":"9128:2:11","nodeType":"YulLiteral","src":"9128:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9115:3:11","nodeType":"YulIdentifier","src":"9115:3:11"},"nativeSrc":"9115:16:11","nodeType":"YulFunctionCall","src":"9115:16:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9156:5:11","nodeType":"YulIdentifier","src":"9156:5:11"},{"kind":"number","nativeSrc":"9163:2:11","nodeType":"YulLiteral","src":"9163:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9152:3:11","nodeType":"YulIdentifier","src":"9152:3:11"},"nativeSrc":"9152:14:11","nodeType":"YulFunctionCall","src":"9152:14:11"}],"functionName":{"name":"abi_decode_address","nativeSrc":"9133:18:11","nodeType":"YulIdentifier","src":"9133:18:11"},"nativeSrc":"9133:34:11","nodeType":"YulFunctionCall","src":"9133:34:11"}],"functionName":{"name":"mstore","nativeSrc":"9108:6:11","nodeType":"YulIdentifier","src":"9108:6:11"},"nativeSrc":"9108:60:11","nodeType":"YulFunctionCall","src":"9108:60:11"},"nativeSrc":"9108:60:11","nodeType":"YulExpressionStatement","src":"9108:60:11"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"9188:7:11","nodeType":"YulIdentifier","src":"9188:7:11"},{"kind":"number","nativeSrc":"9197:2:11","nodeType":"YulLiteral","src":"9197:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9184:3:11","nodeType":"YulIdentifier","src":"9184:3:11"},"nativeSrc":"9184:16:11","nodeType":"YulFunctionCall","src":"9184:16:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9219:5:11","nodeType":"YulIdentifier","src":"9219:5:11"},{"kind":"number","nativeSrc":"9226:2:11","nodeType":"YulLiteral","src":"9226:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9215:3:11","nodeType":"YulIdentifier","src":"9215:3:11"},"nativeSrc":"9215:14:11","nodeType":"YulFunctionCall","src":"9215:14:11"}],"functionName":{"name":"calldataload","nativeSrc":"9202:12:11","nodeType":"YulIdentifier","src":"9202:12:11"},"nativeSrc":"9202:28:11","nodeType":"YulFunctionCall","src":"9202:28:11"}],"functionName":{"name":"mstore","nativeSrc":"9177:6:11","nodeType":"YulIdentifier","src":"9177:6:11"},"nativeSrc":"9177:54:11","nodeType":"YulFunctionCall","src":"9177:54:11"},"nativeSrc":"9177:54:11","nodeType":"YulExpressionStatement","src":"9177:54:11"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"9251:7:11","nodeType":"YulIdentifier","src":"9251:7:11"},{"kind":"number","nativeSrc":"9260:2:11","nodeType":"YulLiteral","src":"9260:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9247:3:11","nodeType":"YulIdentifier","src":"9247:3:11"},"nativeSrc":"9247:16:11","nodeType":"YulFunctionCall","src":"9247:16:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9287:5:11","nodeType":"YulIdentifier","src":"9287:5:11"},{"kind":"number","nativeSrc":"9294:2:11","nodeType":"YulLiteral","src":"9294:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9283:3:11","nodeType":"YulIdentifier","src":"9283:3:11"},"nativeSrc":"9283:14:11","nodeType":"YulFunctionCall","src":"9283:14:11"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"9265:17:11","nodeType":"YulIdentifier","src":"9265:17:11"},"nativeSrc":"9265:33:11","nodeType":"YulFunctionCall","src":"9265:33:11"}],"functionName":{"name":"mstore","nativeSrc":"9240:6:11","nodeType":"YulIdentifier","src":"9240:6:11"},"nativeSrc":"9240:59:11","nodeType":"YulFunctionCall","src":"9240:59:11"},"nativeSrc":"9240:59:11","nodeType":"YulExpressionStatement","src":"9240:59:11"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"9319:7:11","nodeType":"YulIdentifier","src":"9319:7:11"},{"kind":"number","nativeSrc":"9328:3:11","nodeType":"YulLiteral","src":"9328:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9315:3:11","nodeType":"YulIdentifier","src":"9315:3:11"},"nativeSrc":"9315:17:11","nodeType":"YulFunctionCall","src":"9315:17:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9356:5:11","nodeType":"YulIdentifier","src":"9356:5:11"},{"kind":"number","nativeSrc":"9363:3:11","nodeType":"YulLiteral","src":"9363:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9352:3:11","nodeType":"YulIdentifier","src":"9352:3:11"},"nativeSrc":"9352:15:11","nodeType":"YulFunctionCall","src":"9352:15:11"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"9334:17:11","nodeType":"YulIdentifier","src":"9334:17:11"},"nativeSrc":"9334:34:11","nodeType":"YulFunctionCall","src":"9334:34:11"}],"functionName":{"name":"mstore","nativeSrc":"9308:6:11","nodeType":"YulIdentifier","src":"9308:6:11"},"nativeSrc":"9308:61:11","nodeType":"YulFunctionCall","src":"9308:61:11"},"nativeSrc":"9308:61:11","nodeType":"YulExpressionStatement","src":"9308:61:11"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"9389:7:11","nodeType":"YulIdentifier","src":"9389:7:11"},{"kind":"number","nativeSrc":"9398:3:11","nodeType":"YulLiteral","src":"9398:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"9385:3:11","nodeType":"YulIdentifier","src":"9385:3:11"},"nativeSrc":"9385:17:11","nodeType":"YulFunctionCall","src":"9385:17:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9426:5:11","nodeType":"YulIdentifier","src":"9426:5:11"},{"kind":"number","nativeSrc":"9433:3:11","nodeType":"YulLiteral","src":"9433:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"9422:3:11","nodeType":"YulIdentifier","src":"9422:3:11"},"nativeSrc":"9422:15:11","nodeType":"YulFunctionCall","src":"9422:15:11"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"9404:17:11","nodeType":"YulIdentifier","src":"9404:17:11"},"nativeSrc":"9404:34:11","nodeType":"YulFunctionCall","src":"9404:34:11"}],"functionName":{"name":"mstore","nativeSrc":"9378:6:11","nodeType":"YulIdentifier","src":"9378:6:11"},"nativeSrc":"9378:61:11","nodeType":"YulFunctionCall","src":"9378:61:11"},"nativeSrc":"9378:61:11","nodeType":"YulExpressionStatement","src":"9378:61:11"},{"nativeSrc":"9448:43:11","nodeType":"YulVariableDeclaration","src":"9448:43:11","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9479:5:11","nodeType":"YulIdentifier","src":"9479:5:11"},{"kind":"number","nativeSrc":"9486:3:11","nodeType":"YulLiteral","src":"9486:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"9475:3:11","nodeType":"YulIdentifier","src":"9475:3:11"},"nativeSrc":"9475:15:11","nodeType":"YulFunctionCall","src":"9475:15:11"}],"functionName":{"name":"calldataload","nativeSrc":"9462:12:11","nodeType":"YulIdentifier","src":"9462:12:11"},"nativeSrc":"9462:29:11","nodeType":"YulFunctionCall","src":"9462:29:11"},"variables":[{"name":"offset","nativeSrc":"9452:6:11","nodeType":"YulTypedName","src":"9452:6:11","type":""}]},{"body":{"nativeSrc":"9534:16:11","nodeType":"YulBlock","src":"9534:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9543:1:11","nodeType":"YulLiteral","src":"9543:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"9546:1:11","nodeType":"YulLiteral","src":"9546:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9536:6:11","nodeType":"YulIdentifier","src":"9536:6:11"},"nativeSrc":"9536:12:11","nodeType":"YulFunctionCall","src":"9536:12:11"},"nativeSrc":"9536:12:11","nodeType":"YulExpressionStatement","src":"9536:12:11"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9506:6:11","nodeType":"YulIdentifier","src":"9506:6:11"},{"kind":"number","nativeSrc":"9514:18:11","nodeType":"YulLiteral","src":"9514:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9503:2:11","nodeType":"YulIdentifier","src":"9503:2:11"},"nativeSrc":"9503:30:11","nodeType":"YulFunctionCall","src":"9503:30:11"},"nativeSrc":"9500:50:11","nodeType":"YulIf","src":"9500:50:11"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"9570:7:11","nodeType":"YulIdentifier","src":"9570:7:11"},{"kind":"number","nativeSrc":"9579:3:11","nodeType":"YulLiteral","src":"9579:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"9566:3:11","nodeType":"YulIdentifier","src":"9566:3:11"},"nativeSrc":"9566:17:11","nodeType":"YulFunctionCall","src":"9566:17:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9606:5:11","nodeType":"YulIdentifier","src":"9606:5:11"},{"name":"offset","nativeSrc":"9613:6:11","nodeType":"YulIdentifier","src":"9613:6:11"}],"functionName":{"name":"add","nativeSrc":"9602:3:11","nodeType":"YulIdentifier","src":"9602:3:11"},"nativeSrc":"9602:18:11","nodeType":"YulFunctionCall","src":"9602:18:11"},{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"9622:12:11","nodeType":"YulIdentifier","src":"9622:12:11"},"nativeSrc":"9622:14:11","nodeType":"YulFunctionCall","src":"9622:14:11"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"9585:16:11","nodeType":"YulIdentifier","src":"9585:16:11"},"nativeSrc":"9585:52:11","nodeType":"YulFunctionCall","src":"9585:52:11"}],"functionName":{"name":"mstore","nativeSrc":"9559:6:11","nodeType":"YulIdentifier","src":"9559:6:11"},"nativeSrc":"9559:79:11","nodeType":"YulFunctionCall","src":"9559:79:11"},"nativeSrc":"9559:79:11","nodeType":"YulExpressionStatement","src":"9559:79:11"},{"nativeSrc":"9647:20:11","nodeType":"YulAssignment","src":"9647:20:11","value":{"name":"value_1","nativeSrc":"9660:7:11","nodeType":"YulIdentifier","src":"9660:7:11"},"variableNames":[{"name":"converted","nativeSrc":"9647:9:11","nodeType":"YulIdentifier","src":"9647:9:11"}]}]},"name":"convert_t_struct$_CrossChainOrder_$3213_calldata_ptr_to_t_struct$_CrossChainOrder_$3213_memory_ptr","nativeSrc":"8808:865:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8916:5:11","nodeType":"YulTypedName","src":"8916:5:11","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"8926:9:11","nodeType":"YulTypedName","src":"8926:9:11","type":""}],"src":"8808:865:11"},{"body":{"nativeSrc":"9733:325:11","nodeType":"YulBlock","src":"9733:325:11","statements":[{"nativeSrc":"9743:22:11","nodeType":"YulAssignment","src":"9743:22:11","value":{"arguments":[{"kind":"number","nativeSrc":"9757:1:11","nodeType":"YulLiteral","src":"9757:1:11","type":"","value":"1"},{"name":"data","nativeSrc":"9760:4:11","nodeType":"YulIdentifier","src":"9760:4:11"}],"functionName":{"name":"shr","nativeSrc":"9753:3:11","nodeType":"YulIdentifier","src":"9753:3:11"},"nativeSrc":"9753:12:11","nodeType":"YulFunctionCall","src":"9753:12:11"},"variableNames":[{"name":"length","nativeSrc":"9743:6:11","nodeType":"YulIdentifier","src":"9743:6:11"}]},{"nativeSrc":"9774:38:11","nodeType":"YulVariableDeclaration","src":"9774:38:11","value":{"arguments":[{"name":"data","nativeSrc":"9804:4:11","nodeType":"YulIdentifier","src":"9804:4:11"},{"kind":"number","nativeSrc":"9810:1:11","nodeType":"YulLiteral","src":"9810:1:11","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"9800:3:11","nodeType":"YulIdentifier","src":"9800:3:11"},"nativeSrc":"9800:12:11","nodeType":"YulFunctionCall","src":"9800:12:11"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"9778:18:11","nodeType":"YulTypedName","src":"9778:18:11","type":""}]},{"body":{"nativeSrc":"9851:31:11","nodeType":"YulBlock","src":"9851:31:11","statements":[{"nativeSrc":"9853:27:11","nodeType":"YulAssignment","src":"9853:27:11","value":{"arguments":[{"name":"length","nativeSrc":"9867:6:11","nodeType":"YulIdentifier","src":"9867:6:11"},{"kind":"number","nativeSrc":"9875:4:11","nodeType":"YulLiteral","src":"9875:4:11","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"9863:3:11","nodeType":"YulIdentifier","src":"9863:3:11"},"nativeSrc":"9863:17:11","nodeType":"YulFunctionCall","src":"9863:17:11"},"variableNames":[{"name":"length","nativeSrc":"9853:6:11","nodeType":"YulIdentifier","src":"9853:6:11"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"9831:18:11","nodeType":"YulIdentifier","src":"9831:18:11"}],"functionName":{"name":"iszero","nativeSrc":"9824:6:11","nodeType":"YulIdentifier","src":"9824:6:11"},"nativeSrc":"9824:26:11","nodeType":"YulFunctionCall","src":"9824:26:11"},"nativeSrc":"9821:61:11","nodeType":"YulIf","src":"9821:61:11"},{"body":{"nativeSrc":"9941:111:11","nodeType":"YulBlock","src":"9941:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9962:1:11","nodeType":"YulLiteral","src":"9962:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"9969:3:11","nodeType":"YulLiteral","src":"9969:3:11","type":"","value":"224"},{"kind":"number","nativeSrc":"9974:10:11","nodeType":"YulLiteral","src":"9974:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"9965:3:11","nodeType":"YulIdentifier","src":"9965:3:11"},"nativeSrc":"9965:20:11","nodeType":"YulFunctionCall","src":"9965:20:11"}],"functionName":{"name":"mstore","nativeSrc":"9955:6:11","nodeType":"YulIdentifier","src":"9955:6:11"},"nativeSrc":"9955:31:11","nodeType":"YulFunctionCall","src":"9955:31:11"},"nativeSrc":"9955:31:11","nodeType":"YulExpressionStatement","src":"9955:31:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10006:1:11","nodeType":"YulLiteral","src":"10006:1:11","type":"","value":"4"},{"kind":"number","nativeSrc":"10009:4:11","nodeType":"YulLiteral","src":"10009:4:11","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"9999:6:11","nodeType":"YulIdentifier","src":"9999:6:11"},"nativeSrc":"9999:15:11","nodeType":"YulFunctionCall","src":"9999:15:11"},"nativeSrc":"9999:15:11","nodeType":"YulExpressionStatement","src":"9999:15:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10034:1:11","nodeType":"YulLiteral","src":"10034:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"10037:4:11","nodeType":"YulLiteral","src":"10037:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10027:6:11","nodeType":"YulIdentifier","src":"10027:6:11"},"nativeSrc":"10027:15:11","nodeType":"YulFunctionCall","src":"10027:15:11"},"nativeSrc":"10027:15:11","nodeType":"YulExpressionStatement","src":"10027:15:11"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"9897:18:11","nodeType":"YulIdentifier","src":"9897:18:11"},{"arguments":[{"name":"length","nativeSrc":"9920:6:11","nodeType":"YulIdentifier","src":"9920:6:11"},{"kind":"number","nativeSrc":"9928:2:11","nodeType":"YulLiteral","src":"9928:2:11","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"9917:2:11","nodeType":"YulIdentifier","src":"9917:2:11"},"nativeSrc":"9917:14:11","nodeType":"YulFunctionCall","src":"9917:14:11"}],"functionName":{"name":"eq","nativeSrc":"9894:2:11","nodeType":"YulIdentifier","src":"9894:2:11"},"nativeSrc":"9894:38:11","nodeType":"YulFunctionCall","src":"9894:38:11"},"nativeSrc":"9891:161:11","nodeType":"YulIf","src":"9891:161:11"}]},"name":"extract_byte_array_length","nativeSrc":"9678:380:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"9713:4:11","nodeType":"YulTypedName","src":"9713:4:11","type":""}],"returnVariables":[{"name":"length","nativeSrc":"9722:6:11","nodeType":"YulTypedName","src":"9722:6:11","type":""}],"src":"9678:380:11"},{"body":{"nativeSrc":"10237:171:11","nodeType":"YulBlock","src":"10237:171:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10254:9:11","nodeType":"YulIdentifier","src":"10254:9:11"},{"kind":"number","nativeSrc":"10265:2:11","nodeType":"YulLiteral","src":"10265:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10247:6:11","nodeType":"YulIdentifier","src":"10247:6:11"},"nativeSrc":"10247:21:11","nodeType":"YulFunctionCall","src":"10247:21:11"},"nativeSrc":"10247:21:11","nodeType":"YulExpressionStatement","src":"10247:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10288:9:11","nodeType":"YulIdentifier","src":"10288:9:11"},{"kind":"number","nativeSrc":"10299:2:11","nodeType":"YulLiteral","src":"10299:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10284:3:11","nodeType":"YulIdentifier","src":"10284:3:11"},"nativeSrc":"10284:18:11","nodeType":"YulFunctionCall","src":"10284:18:11"},{"kind":"number","nativeSrc":"10304:2:11","nodeType":"YulLiteral","src":"10304:2:11","type":"","value":"21"}],"functionName":{"name":"mstore","nativeSrc":"10277:6:11","nodeType":"YulIdentifier","src":"10277:6:11"},"nativeSrc":"10277:30:11","nodeType":"YulFunctionCall","src":"10277:30:11"},"nativeSrc":"10277:30:11","nodeType":"YulExpressionStatement","src":"10277:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10327:9:11","nodeType":"YulIdentifier","src":"10327:9:11"},{"kind":"number","nativeSrc":"10338:2:11","nodeType":"YulLiteral","src":"10338:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10323:3:11","nodeType":"YulIdentifier","src":"10323:3:11"},"nativeSrc":"10323:18:11","nodeType":"YulFunctionCall","src":"10323:18:11"},{"hexValue":"6f72646572204120646f65736e2774206578697374","kind":"string","nativeSrc":"10343:23:11","nodeType":"YulLiteral","src":"10343:23:11","type":"","value":"order A doesn't exist"}],"functionName":{"name":"mstore","nativeSrc":"10316:6:11","nodeType":"YulIdentifier","src":"10316:6:11"},"nativeSrc":"10316:51:11","nodeType":"YulFunctionCall","src":"10316:51:11"},"nativeSrc":"10316:51:11","nodeType":"YulExpressionStatement","src":"10316:51:11"},{"nativeSrc":"10376:26:11","nodeType":"YulAssignment","src":"10376:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"10388:9:11","nodeType":"YulIdentifier","src":"10388:9:11"},{"kind":"number","nativeSrc":"10399:2:11","nodeType":"YulLiteral","src":"10399:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10384:3:11","nodeType":"YulIdentifier","src":"10384:3:11"},"nativeSrc":"10384:18:11","nodeType":"YulFunctionCall","src":"10384:18:11"},"variableNames":[{"name":"tail","nativeSrc":"10376:4:11","nodeType":"YulIdentifier","src":"10376:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_f1edf9865f16641a39963e24f35f76ecdd70eea17fec13ad6c5b24c4e834368e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10063:345:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10214:9:11","nodeType":"YulTypedName","src":"10214:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10228:4:11","nodeType":"YulTypedName","src":"10228:4:11","type":""}],"src":"10063:345:11"},{"body":{"nativeSrc":"10587:171:11","nodeType":"YulBlock","src":"10587:171:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10604:9:11","nodeType":"YulIdentifier","src":"10604:9:11"},{"kind":"number","nativeSrc":"10615:2:11","nodeType":"YulLiteral","src":"10615:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10597:6:11","nodeType":"YulIdentifier","src":"10597:6:11"},"nativeSrc":"10597:21:11","nodeType":"YulFunctionCall","src":"10597:21:11"},"nativeSrc":"10597:21:11","nodeType":"YulExpressionStatement","src":"10597:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10638:9:11","nodeType":"YulIdentifier","src":"10638:9:11"},{"kind":"number","nativeSrc":"10649:2:11","nodeType":"YulLiteral","src":"10649:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10634:3:11","nodeType":"YulIdentifier","src":"10634:3:11"},"nativeSrc":"10634:18:11","nodeType":"YulFunctionCall","src":"10634:18:11"},{"kind":"number","nativeSrc":"10654:2:11","nodeType":"YulLiteral","src":"10654:2:11","type":"","value":"21"}],"functionName":{"name":"mstore","nativeSrc":"10627:6:11","nodeType":"YulIdentifier","src":"10627:6:11"},"nativeSrc":"10627:30:11","nodeType":"YulFunctionCall","src":"10627:30:11"},"nativeSrc":"10627:30:11","nodeType":"YulExpressionStatement","src":"10627:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10677:9:11","nodeType":"YulIdentifier","src":"10677:9:11"},{"kind":"number","nativeSrc":"10688:2:11","nodeType":"YulLiteral","src":"10688:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10673:3:11","nodeType":"YulIdentifier","src":"10673:3:11"},"nativeSrc":"10673:18:11","nodeType":"YulFunctionCall","src":"10673:18:11"},{"hexValue":"6f72646572204220646f65736e2774206578697374","kind":"string","nativeSrc":"10693:23:11","nodeType":"YulLiteral","src":"10693:23:11","type":"","value":"order B doesn't exist"}],"functionName":{"name":"mstore","nativeSrc":"10666:6:11","nodeType":"YulIdentifier","src":"10666:6:11"},"nativeSrc":"10666:51:11","nodeType":"YulFunctionCall","src":"10666:51:11"},"nativeSrc":"10666:51:11","nodeType":"YulExpressionStatement","src":"10666:51:11"},{"nativeSrc":"10726:26:11","nodeType":"YulAssignment","src":"10726:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"10738:9:11","nodeType":"YulIdentifier","src":"10738:9:11"},{"kind":"number","nativeSrc":"10749:2:11","nodeType":"YulLiteral","src":"10749:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10734:3:11","nodeType":"YulIdentifier","src":"10734:3:11"},"nativeSrc":"10734:18:11","nodeType":"YulFunctionCall","src":"10734:18:11"},"variableNames":[{"name":"tail","nativeSrc":"10726:4:11","nodeType":"YulIdentifier","src":"10726:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_123c727286f0d9a1a0d09df42fade7a309bf152a374ee47b0ccc6d891021206e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10413:345:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10564:9:11","nodeType":"YulTypedName","src":"10564:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10578:4:11","nodeType":"YulTypedName","src":"10578:4:11","type":""}],"src":"10413:345:11"},{"body":{"nativeSrc":"10937:172:11","nodeType":"YulBlock","src":"10937:172:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10954:9:11","nodeType":"YulIdentifier","src":"10954:9:11"},{"kind":"number","nativeSrc":"10965:2:11","nodeType":"YulLiteral","src":"10965:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10947:6:11","nodeType":"YulIdentifier","src":"10947:6:11"},"nativeSrc":"10947:21:11","nodeType":"YulFunctionCall","src":"10947:21:11"},"nativeSrc":"10947:21:11","nodeType":"YulExpressionStatement","src":"10947:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10988:9:11","nodeType":"YulIdentifier","src":"10988:9:11"},{"kind":"number","nativeSrc":"10999:2:11","nodeType":"YulLiteral","src":"10999:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10984:3:11","nodeType":"YulIdentifier","src":"10984:3:11"},"nativeSrc":"10984:18:11","nodeType":"YulFunctionCall","src":"10984:18:11"},{"kind":"number","nativeSrc":"11004:2:11","nodeType":"YulLiteral","src":"11004:2:11","type":"","value":"22"}],"functionName":{"name":"mstore","nativeSrc":"10977:6:11","nodeType":"YulIdentifier","src":"10977:6:11"},"nativeSrc":"10977:30:11","nodeType":"YulFunctionCall","src":"10977:30:11"},"nativeSrc":"10977:30:11","nodeType":"YulExpressionStatement","src":"10977:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11027:9:11","nodeType":"YulIdentifier","src":"11027:9:11"},{"kind":"number","nativeSrc":"11038:2:11","nodeType":"YulLiteral","src":"11038:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11023:3:11","nodeType":"YulIdentifier","src":"11023:3:11"},"nativeSrc":"11023:18:11","nodeType":"YulFunctionCall","src":"11023:18:11"},{"hexValue":"696e76616c69642066696c6c446561646c696e652041","kind":"string","nativeSrc":"11043:24:11","nodeType":"YulLiteral","src":"11043:24:11","type":"","value":"invalid fillDeadline A"}],"functionName":{"name":"mstore","nativeSrc":"11016:6:11","nodeType":"YulIdentifier","src":"11016:6:11"},"nativeSrc":"11016:52:11","nodeType":"YulFunctionCall","src":"11016:52:11"},"nativeSrc":"11016:52:11","nodeType":"YulExpressionStatement","src":"11016:52:11"},{"nativeSrc":"11077:26:11","nodeType":"YulAssignment","src":"11077:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"11089:9:11","nodeType":"YulIdentifier","src":"11089:9:11"},{"kind":"number","nativeSrc":"11100:2:11","nodeType":"YulLiteral","src":"11100:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11085:3:11","nodeType":"YulIdentifier","src":"11085:3:11"},"nativeSrc":"11085:18:11","nodeType":"YulFunctionCall","src":"11085:18:11"},"variableNames":[{"name":"tail","nativeSrc":"11077:4:11","nodeType":"YulIdentifier","src":"11077:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_e0e949177673e9f9469e46c8ae3049453c34926e4685857495dac5707f5b2212__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10763:346:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10914:9:11","nodeType":"YulTypedName","src":"10914:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10928:4:11","nodeType":"YulTypedName","src":"10928:4:11","type":""}],"src":"10763:346:11"},{"body":{"nativeSrc":"11288:172:11","nodeType":"YulBlock","src":"11288:172:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11305:9:11","nodeType":"YulIdentifier","src":"11305:9:11"},{"kind":"number","nativeSrc":"11316:2:11","nodeType":"YulLiteral","src":"11316:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11298:6:11","nodeType":"YulIdentifier","src":"11298:6:11"},"nativeSrc":"11298:21:11","nodeType":"YulFunctionCall","src":"11298:21:11"},"nativeSrc":"11298:21:11","nodeType":"YulExpressionStatement","src":"11298:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11339:9:11","nodeType":"YulIdentifier","src":"11339:9:11"},{"kind":"number","nativeSrc":"11350:2:11","nodeType":"YulLiteral","src":"11350:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11335:3:11","nodeType":"YulIdentifier","src":"11335:3:11"},"nativeSrc":"11335:18:11","nodeType":"YulFunctionCall","src":"11335:18:11"},{"kind":"number","nativeSrc":"11355:2:11","nodeType":"YulLiteral","src":"11355:2:11","type":"","value":"22"}],"functionName":{"name":"mstore","nativeSrc":"11328:6:11","nodeType":"YulIdentifier","src":"11328:6:11"},"nativeSrc":"11328:30:11","nodeType":"YulFunctionCall","src":"11328:30:11"},"nativeSrc":"11328:30:11","nodeType":"YulExpressionStatement","src":"11328:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11378:9:11","nodeType":"YulIdentifier","src":"11378:9:11"},{"kind":"number","nativeSrc":"11389:2:11","nodeType":"YulLiteral","src":"11389:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11374:3:11","nodeType":"YulIdentifier","src":"11374:3:11"},"nativeSrc":"11374:18:11","nodeType":"YulFunctionCall","src":"11374:18:11"},{"hexValue":"696e76616c69642066696c6c446561646c696e652042","kind":"string","nativeSrc":"11394:24:11","nodeType":"YulLiteral","src":"11394:24:11","type":"","value":"invalid fillDeadline B"}],"functionName":{"name":"mstore","nativeSrc":"11367:6:11","nodeType":"YulIdentifier","src":"11367:6:11"},"nativeSrc":"11367:52:11","nodeType":"YulFunctionCall","src":"11367:52:11"},"nativeSrc":"11367:52:11","nodeType":"YulExpressionStatement","src":"11367:52:11"},{"nativeSrc":"11428:26:11","nodeType":"YulAssignment","src":"11428:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"11440:9:11","nodeType":"YulIdentifier","src":"11440:9:11"},{"kind":"number","nativeSrc":"11451:2:11","nodeType":"YulLiteral","src":"11451:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11436:3:11","nodeType":"YulIdentifier","src":"11436:3:11"},"nativeSrc":"11436:18:11","nodeType":"YulFunctionCall","src":"11436:18:11"},"variableNames":[{"name":"tail","nativeSrc":"11428:4:11","nodeType":"YulIdentifier","src":"11428:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_4b2a6d023298acd2b5802bb3023b5aa070bfec6d087d8da494bbe4444988dfa1__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11114:346:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11265:9:11","nodeType":"YulTypedName","src":"11265:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11279:4:11","nodeType":"YulTypedName","src":"11279:4:11","type":""}],"src":"11114:346:11"},{"body":{"nativeSrc":"11639:176:11","nodeType":"YulBlock","src":"11639:176:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11656:9:11","nodeType":"YulIdentifier","src":"11656:9:11"},{"kind":"number","nativeSrc":"11667:2:11","nodeType":"YulLiteral","src":"11667:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11649:6:11","nodeType":"YulIdentifier","src":"11649:6:11"},"nativeSrc":"11649:21:11","nodeType":"YulFunctionCall","src":"11649:21:11"},"nativeSrc":"11649:21:11","nodeType":"YulExpressionStatement","src":"11649:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11690:9:11","nodeType":"YulIdentifier","src":"11690:9:11"},{"kind":"number","nativeSrc":"11701:2:11","nodeType":"YulLiteral","src":"11701:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11686:3:11","nodeType":"YulIdentifier","src":"11686:3:11"},"nativeSrc":"11686:18:11","nodeType":"YulFunctionCall","src":"11686:18:11"},{"kind":"number","nativeSrc":"11706:2:11","nodeType":"YulLiteral","src":"11706:2:11","type":"","value":"26"}],"functionName":{"name":"mstore","nativeSrc":"11679:6:11","nodeType":"YulIdentifier","src":"11679:6:11"},"nativeSrc":"11679:30:11","nodeType":"YulFunctionCall","src":"11679:30:11"},"nativeSrc":"11679:30:11","nodeType":"YulExpressionStatement","src":"11679:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11729:9:11","nodeType":"YulIdentifier","src":"11729:9:11"},{"kind":"number","nativeSrc":"11740:2:11","nodeType":"YulLiteral","src":"11740:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11725:3:11","nodeType":"YulIdentifier","src":"11725:3:11"},"nativeSrc":"11725:18:11","nodeType":"YulFunctionCall","src":"11725:18:11"},{"hexValue":"696e76616c696420696e697469617465446561646c696e652041","kind":"string","nativeSrc":"11745:28:11","nodeType":"YulLiteral","src":"11745:28:11","type":"","value":"invalid initiateDeadline A"}],"functionName":{"name":"mstore","nativeSrc":"11718:6:11","nodeType":"YulIdentifier","src":"11718:6:11"},"nativeSrc":"11718:56:11","nodeType":"YulFunctionCall","src":"11718:56:11"},"nativeSrc":"11718:56:11","nodeType":"YulExpressionStatement","src":"11718:56:11"},{"nativeSrc":"11783:26:11","nodeType":"YulAssignment","src":"11783:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"11795:9:11","nodeType":"YulIdentifier","src":"11795:9:11"},{"kind":"number","nativeSrc":"11806:2:11","nodeType":"YulLiteral","src":"11806:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11791:3:11","nodeType":"YulIdentifier","src":"11791:3:11"},"nativeSrc":"11791:18:11","nodeType":"YulFunctionCall","src":"11791:18:11"},"variableNames":[{"name":"tail","nativeSrc":"11783:4:11","nodeType":"YulIdentifier","src":"11783:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_41930f0bc9780c93d2e73f4050f0ea98a23ca7d321e649e89fd452f2c05c2422__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11465:350:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11616:9:11","nodeType":"YulTypedName","src":"11616:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11630:4:11","nodeType":"YulTypedName","src":"11630:4:11","type":""}],"src":"11465:350:11"},{"body":{"nativeSrc":"11994:176:11","nodeType":"YulBlock","src":"11994:176:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12011:9:11","nodeType":"YulIdentifier","src":"12011:9:11"},{"kind":"number","nativeSrc":"12022:2:11","nodeType":"YulLiteral","src":"12022:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12004:6:11","nodeType":"YulIdentifier","src":"12004:6:11"},"nativeSrc":"12004:21:11","nodeType":"YulFunctionCall","src":"12004:21:11"},"nativeSrc":"12004:21:11","nodeType":"YulExpressionStatement","src":"12004:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12045:9:11","nodeType":"YulIdentifier","src":"12045:9:11"},{"kind":"number","nativeSrc":"12056:2:11","nodeType":"YulLiteral","src":"12056:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12041:3:11","nodeType":"YulIdentifier","src":"12041:3:11"},"nativeSrc":"12041:18:11","nodeType":"YulFunctionCall","src":"12041:18:11"},{"kind":"number","nativeSrc":"12061:2:11","nodeType":"YulLiteral","src":"12061:2:11","type":"","value":"26"}],"functionName":{"name":"mstore","nativeSrc":"12034:6:11","nodeType":"YulIdentifier","src":"12034:6:11"},"nativeSrc":"12034:30:11","nodeType":"YulFunctionCall","src":"12034:30:11"},"nativeSrc":"12034:30:11","nodeType":"YulExpressionStatement","src":"12034:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12084:9:11","nodeType":"YulIdentifier","src":"12084:9:11"},{"kind":"number","nativeSrc":"12095:2:11","nodeType":"YulLiteral","src":"12095:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12080:3:11","nodeType":"YulIdentifier","src":"12080:3:11"},"nativeSrc":"12080:18:11","nodeType":"YulFunctionCall","src":"12080:18:11"},{"hexValue":"696e76616c696420696e697469617465446561646c696e652042","kind":"string","nativeSrc":"12100:28:11","nodeType":"YulLiteral","src":"12100:28:11","type":"","value":"invalid initiateDeadline B"}],"functionName":{"name":"mstore","nativeSrc":"12073:6:11","nodeType":"YulIdentifier","src":"12073:6:11"},"nativeSrc":"12073:56:11","nodeType":"YulFunctionCall","src":"12073:56:11"},"nativeSrc":"12073:56:11","nodeType":"YulExpressionStatement","src":"12073:56:11"},{"nativeSrc":"12138:26:11","nodeType":"YulAssignment","src":"12138:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"12150:9:11","nodeType":"YulIdentifier","src":"12150:9:11"},{"kind":"number","nativeSrc":"12161:2:11","nodeType":"YulLiteral","src":"12161:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12146:3:11","nodeType":"YulIdentifier","src":"12146:3:11"},"nativeSrc":"12146:18:11","nodeType":"YulFunctionCall","src":"12146:18:11"},"variableNames":[{"name":"tail","nativeSrc":"12138:4:11","nodeType":"YulIdentifier","src":"12138:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_b8c550279d114b340bb9c11ac21ef4ce617440fdfd628c2d0b20759e38868d08__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11820:350:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11971:9:11","nodeType":"YulTypedName","src":"11971:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11985:4:11","nodeType":"YulTypedName","src":"11985:4:11","type":""}],"src":"11820:350:11"},{"body":{"nativeSrc":"12256:103:11","nodeType":"YulBlock","src":"12256:103:11","statements":[{"body":{"nativeSrc":"12302:16:11","nodeType":"YulBlock","src":"12302:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12311:1:11","nodeType":"YulLiteral","src":"12311:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"12314:1:11","nodeType":"YulLiteral","src":"12314:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12304:6:11","nodeType":"YulIdentifier","src":"12304:6:11"},"nativeSrc":"12304:12:11","nodeType":"YulFunctionCall","src":"12304:12:11"},"nativeSrc":"12304:12:11","nodeType":"YulExpressionStatement","src":"12304:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12277:7:11","nodeType":"YulIdentifier","src":"12277:7:11"},{"name":"headStart","nativeSrc":"12286:9:11","nodeType":"YulIdentifier","src":"12286:9:11"}],"functionName":{"name":"sub","nativeSrc":"12273:3:11","nodeType":"YulIdentifier","src":"12273:3:11"},"nativeSrc":"12273:23:11","nodeType":"YulFunctionCall","src":"12273:23:11"},{"kind":"number","nativeSrc":"12298:2:11","nodeType":"YulLiteral","src":"12298:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12269:3:11","nodeType":"YulIdentifier","src":"12269:3:11"},"nativeSrc":"12269:32:11","nodeType":"YulFunctionCall","src":"12269:32:11"},"nativeSrc":"12266:52:11","nodeType":"YulIf","src":"12266:52:11"},{"nativeSrc":"12327:26:11","nodeType":"YulAssignment","src":"12327:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"12343:9:11","nodeType":"YulIdentifier","src":"12343:9:11"}],"functionName":{"name":"mload","nativeSrc":"12337:5:11","nodeType":"YulIdentifier","src":"12337:5:11"},"nativeSrc":"12337:16:11","nodeType":"YulFunctionCall","src":"12337:16:11"},"variableNames":[{"name":"value0","nativeSrc":"12327:6:11","nodeType":"YulIdentifier","src":"12327:6:11"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"12175:184:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12222:9:11","nodeType":"YulTypedName","src":"12222:9:11","type":""},{"name":"dataEnd","nativeSrc":"12233:7:11","nodeType":"YulTypedName","src":"12233:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12245:6:11","nodeType":"YulTypedName","src":"12245:6:11","type":""}],"src":"12175:184:11"},{"body":{"nativeSrc":"12538:172:11","nodeType":"YulBlock","src":"12538:172:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12555:9:11","nodeType":"YulIdentifier","src":"12555:9:11"},{"kind":"number","nativeSrc":"12566:2:11","nodeType":"YulLiteral","src":"12566:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12548:6:11","nodeType":"YulIdentifier","src":"12548:6:11"},"nativeSrc":"12548:21:11","nodeType":"YulFunctionCall","src":"12548:21:11"},"nativeSrc":"12548:21:11","nodeType":"YulExpressionStatement","src":"12548:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12589:9:11","nodeType":"YulIdentifier","src":"12589:9:11"},{"kind":"number","nativeSrc":"12600:2:11","nodeType":"YulLiteral","src":"12600:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12585:3:11","nodeType":"YulIdentifier","src":"12585:3:11"},"nativeSrc":"12585:18:11","nodeType":"YulFunctionCall","src":"12585:18:11"},{"kind":"number","nativeSrc":"12605:2:11","nodeType":"YulLiteral","src":"12605:2:11","type":"","value":"22"}],"functionName":{"name":"mstore","nativeSrc":"12578:6:11","nodeType":"YulIdentifier","src":"12578:6:11"},"nativeSrc":"12578:30:11","nodeType":"YulFunctionCall","src":"12578:30:11"},"nativeSrc":"12578:30:11","nodeType":"YulExpressionStatement","src":"12578:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12628:9:11","nodeType":"YulIdentifier","src":"12628:9:11"},{"kind":"number","nativeSrc":"12639:2:11","nodeType":"YulLiteral","src":"12639:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12624:3:11","nodeType":"YulIdentifier","src":"12624:3:11"},"nativeSrc":"12624:18:11","nodeType":"YulFunctionCall","src":"12624:18:11"},{"hexValue":"696e70757420616d6f756e7473206d69736d61746368","kind":"string","nativeSrc":"12644:24:11","nodeType":"YulLiteral","src":"12644:24:11","type":"","value":"input amounts mismatch"}],"functionName":{"name":"mstore","nativeSrc":"12617:6:11","nodeType":"YulIdentifier","src":"12617:6:11"},"nativeSrc":"12617:52:11","nodeType":"YulFunctionCall","src":"12617:52:11"},"nativeSrc":"12617:52:11","nodeType":"YulExpressionStatement","src":"12617:52:11"},{"nativeSrc":"12678:26:11","nodeType":"YulAssignment","src":"12678:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"12690:9:11","nodeType":"YulIdentifier","src":"12690:9:11"},{"kind":"number","nativeSrc":"12701:2:11","nodeType":"YulLiteral","src":"12701:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12686:3:11","nodeType":"YulIdentifier","src":"12686:3:11"},"nativeSrc":"12686:18:11","nodeType":"YulFunctionCall","src":"12686:18:11"},"variableNames":[{"name":"tail","nativeSrc":"12678:4:11","nodeType":"YulIdentifier","src":"12678:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_d601796037cf370c0b2e35f1db1ed868476fb5bfaa1033509fefa177fa42ac5e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12364:346:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12515:9:11","nodeType":"YulTypedName","src":"12515:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12529:4:11","nodeType":"YulTypedName","src":"12529:4:11","type":""}],"src":"12364:346:11"},{"body":{"nativeSrc":"12889:177:11","nodeType":"YulBlock","src":"12889:177:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12906:9:11","nodeType":"YulIdentifier","src":"12906:9:11"},{"kind":"number","nativeSrc":"12917:2:11","nodeType":"YulLiteral","src":"12917:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12899:6:11","nodeType":"YulIdentifier","src":"12899:6:11"},"nativeSrc":"12899:21:11","nodeType":"YulFunctionCall","src":"12899:21:11"},"nativeSrc":"12899:21:11","nodeType":"YulExpressionStatement","src":"12899:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12940:9:11","nodeType":"YulIdentifier","src":"12940:9:11"},{"kind":"number","nativeSrc":"12951:2:11","nodeType":"YulLiteral","src":"12951:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12936:3:11","nodeType":"YulIdentifier","src":"12936:3:11"},"nativeSrc":"12936:18:11","nodeType":"YulFunctionCall","src":"12936:18:11"},{"kind":"number","nativeSrc":"12956:2:11","nodeType":"YulLiteral","src":"12956:2:11","type":"","value":"27"}],"functionName":{"name":"mstore","nativeSrc":"12929:6:11","nodeType":"YulIdentifier","src":"12929:6:11"},"nativeSrc":"12929:30:11","nodeType":"YulFunctionCall","src":"12929:30:11"},"nativeSrc":"12929:30:11","nodeType":"YulExpressionStatement","src":"12929:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12979:9:11","nodeType":"YulIdentifier","src":"12979:9:11"},{"kind":"number","nativeSrc":"12990:2:11","nodeType":"YulLiteral","src":"12990:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12975:3:11","nodeType":"YulIdentifier","src":"12975:3:11"},"nativeSrc":"12975:18:11","nodeType":"YulFunctionCall","src":"12975:18:11"},{"hexValue":"64657374696e6174696f6e20636861696e73206d69736d61746368","kind":"string","nativeSrc":"12995:29:11","nodeType":"YulLiteral","src":"12995:29:11","type":"","value":"destination chains mismatch"}],"functionName":{"name":"mstore","nativeSrc":"12968:6:11","nodeType":"YulIdentifier","src":"12968:6:11"},"nativeSrc":"12968:57:11","nodeType":"YulFunctionCall","src":"12968:57:11"},"nativeSrc":"12968:57:11","nodeType":"YulExpressionStatement","src":"12968:57:11"},{"nativeSrc":"13034:26:11","nodeType":"YulAssignment","src":"13034:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"13046:9:11","nodeType":"YulIdentifier","src":"13046:9:11"},{"kind":"number","nativeSrc":"13057:2:11","nodeType":"YulLiteral","src":"13057:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13042:3:11","nodeType":"YulIdentifier","src":"13042:3:11"},"nativeSrc":"13042:18:11","nodeType":"YulFunctionCall","src":"13042:18:11"},"variableNames":[{"name":"tail","nativeSrc":"13034:4:11","nodeType":"YulIdentifier","src":"13034:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_40a0cee58853198d8542bc2a4a4e21eb2e185d8c974ab5afa5d6a3b8ef76a161__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12715:351:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12866:9:11","nodeType":"YulTypedName","src":"12866:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12880:4:11","nodeType":"YulTypedName","src":"12880:4:11","type":""}],"src":"12715:351:11"},{"body":{"nativeSrc":"13245:165:11","nodeType":"YulBlock","src":"13245:165:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13262:9:11","nodeType":"YulIdentifier","src":"13262:9:11"},{"kind":"number","nativeSrc":"13273:2:11","nodeType":"YulLiteral","src":"13273:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13255:6:11","nodeType":"YulIdentifier","src":"13255:6:11"},"nativeSrc":"13255:21:11","nodeType":"YulFunctionCall","src":"13255:21:11"},"nativeSrc":"13255:21:11","nodeType":"YulExpressionStatement","src":"13255:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13296:9:11","nodeType":"YulIdentifier","src":"13296:9:11"},{"kind":"number","nativeSrc":"13307:2:11","nodeType":"YulLiteral","src":"13307:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13292:3:11","nodeType":"YulIdentifier","src":"13292:3:11"},"nativeSrc":"13292:18:11","nodeType":"YulFunctionCall","src":"13292:18:11"},{"kind":"number","nativeSrc":"13312:2:11","nodeType":"YulLiteral","src":"13312:2:11","type":"","value":"15"}],"functionName":{"name":"mstore","nativeSrc":"13285:6:11","nodeType":"YulIdentifier","src":"13285:6:11"},"nativeSrc":"13285:30:11","nodeType":"YulFunctionCall","src":"13285:30:11"},"nativeSrc":"13285:30:11","nodeType":"YulExpressionStatement","src":"13285:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13335:9:11","nodeType":"YulIdentifier","src":"13335:9:11"},{"kind":"number","nativeSrc":"13346:2:11","nodeType":"YulLiteral","src":"13346:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13331:3:11","nodeType":"YulIdentifier","src":"13331:3:11"},"nativeSrc":"13331:18:11","nodeType":"YulFunctionCall","src":"13331:18:11"},{"hexValue":"696e76616c69642073776170706572","kind":"string","nativeSrc":"13351:17:11","nodeType":"YulLiteral","src":"13351:17:11","type":"","value":"invalid swapper"}],"functionName":{"name":"mstore","nativeSrc":"13324:6:11","nodeType":"YulIdentifier","src":"13324:6:11"},"nativeSrc":"13324:45:11","nodeType":"YulFunctionCall","src":"13324:45:11"},"nativeSrc":"13324:45:11","nodeType":"YulExpressionStatement","src":"13324:45:11"},{"nativeSrc":"13378:26:11","nodeType":"YulAssignment","src":"13378:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"13390:9:11","nodeType":"YulIdentifier","src":"13390:9:11"},{"kind":"number","nativeSrc":"13401:2:11","nodeType":"YulLiteral","src":"13401:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13386:3:11","nodeType":"YulIdentifier","src":"13386:3:11"},"nativeSrc":"13386:18:11","nodeType":"YulFunctionCall","src":"13386:18:11"},"variableNames":[{"name":"tail","nativeSrc":"13378:4:11","nodeType":"YulIdentifier","src":"13378:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb945459f1ea11798f739f23fe4369bb80c608b965f9afe5e22273b75bc11aa3__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13071:339:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13222:9:11","nodeType":"YulTypedName","src":"13222:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13236:4:11","nodeType":"YulTypedName","src":"13236:4:11","type":""}],"src":"13071:339:11"},{"body":{"nativeSrc":"13589:170:11","nodeType":"YulBlock","src":"13589:170:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13606:9:11","nodeType":"YulIdentifier","src":"13606:9:11"},{"kind":"number","nativeSrc":"13617:2:11","nodeType":"YulLiteral","src":"13617:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13599:6:11","nodeType":"YulIdentifier","src":"13599:6:11"},"nativeSrc":"13599:21:11","nodeType":"YulFunctionCall","src":"13599:21:11"},"nativeSrc":"13599:21:11","nodeType":"YulExpressionStatement","src":"13599:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13640:9:11","nodeType":"YulIdentifier","src":"13640:9:11"},{"kind":"number","nativeSrc":"13651:2:11","nodeType":"YulLiteral","src":"13651:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13636:3:11","nodeType":"YulIdentifier","src":"13636:3:11"},"nativeSrc":"13636:18:11","nodeType":"YulFunctionCall","src":"13636:18:11"},{"kind":"number","nativeSrc":"13656:2:11","nodeType":"YulLiteral","src":"13656:2:11","type":"","value":"20"}],"functionName":{"name":"mstore","nativeSrc":"13629:6:11","nodeType":"YulIdentifier","src":"13629:6:11"},"nativeSrc":"13629:30:11","nodeType":"YulFunctionCall","src":"13629:30:11"},"nativeSrc":"13629:30:11","nodeType":"YulExpressionStatement","src":"13629:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13679:9:11","nodeType":"YulIdentifier","src":"13679:9:11"},{"kind":"number","nativeSrc":"13690:2:11","nodeType":"YulLiteral","src":"13690:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13675:3:11","nodeType":"YulIdentifier","src":"13675:3:11"},"nativeSrc":"13675:18:11","nodeType":"YulFunctionCall","src":"13675:18:11"},{"hexValue":"696e76616c6964206f726967696e20636861696e","kind":"string","nativeSrc":"13695:22:11","nodeType":"YulLiteral","src":"13695:22:11","type":"","value":"invalid origin chain"}],"functionName":{"name":"mstore","nativeSrc":"13668:6:11","nodeType":"YulIdentifier","src":"13668:6:11"},"nativeSrc":"13668:50:11","nodeType":"YulFunctionCall","src":"13668:50:11"},"nativeSrc":"13668:50:11","nodeType":"YulExpressionStatement","src":"13668:50:11"},{"nativeSrc":"13727:26:11","nodeType":"YulAssignment","src":"13727:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"13739:9:11","nodeType":"YulIdentifier","src":"13739:9:11"},{"kind":"number","nativeSrc":"13750:2:11","nodeType":"YulLiteral","src":"13750:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13735:3:11","nodeType":"YulIdentifier","src":"13735:3:11"},"nativeSrc":"13735:18:11","nodeType":"YulFunctionCall","src":"13735:18:11"},"variableNames":[{"name":"tail","nativeSrc":"13727:4:11","nodeType":"YulIdentifier","src":"13727:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_e358f80d0950f2cb5516a6006839c8bd21fda25e2e8da03ae1d7e884e2f7f463__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13415:344:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13566:9:11","nodeType":"YulTypedName","src":"13566:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13580:4:11","nodeType":"YulTypedName","src":"13580:4:11","type":""}],"src":"13415:344:11"},{"body":{"nativeSrc":"13938:166:11","nodeType":"YulBlock","src":"13938:166:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13955:9:11","nodeType":"YulIdentifier","src":"13955:9:11"},{"kind":"number","nativeSrc":"13966:2:11","nodeType":"YulLiteral","src":"13966:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13948:6:11","nodeType":"YulIdentifier","src":"13948:6:11"},"nativeSrc":"13948:21:11","nodeType":"YulFunctionCall","src":"13948:21:11"},"nativeSrc":"13948:21:11","nodeType":"YulExpressionStatement","src":"13948:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13989:9:11","nodeType":"YulIdentifier","src":"13989:9:11"},{"kind":"number","nativeSrc":"14000:2:11","nodeType":"YulLiteral","src":"14000:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13985:3:11","nodeType":"YulIdentifier","src":"13985:3:11"},"nativeSrc":"13985:18:11","nodeType":"YulFunctionCall","src":"13985:18:11"},{"kind":"number","nativeSrc":"14005:2:11","nodeType":"YulLiteral","src":"14005:2:11","type":"","value":"16"}],"functionName":{"name":"mstore","nativeSrc":"13978:6:11","nodeType":"YulIdentifier","src":"13978:6:11"},"nativeSrc":"13978:30:11","nodeType":"YulFunctionCall","src":"13978:30:11"},"nativeSrc":"13978:30:11","nodeType":"YulExpressionStatement","src":"13978:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14028:9:11","nodeType":"YulIdentifier","src":"14028:9:11"},{"kind":"number","nativeSrc":"14039:2:11","nodeType":"YulLiteral","src":"14039:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14024:3:11","nodeType":"YulIdentifier","src":"14024:3:11"},"nativeSrc":"14024:18:11","nodeType":"YulFunctionCall","src":"14024:18:11"},{"hexValue":"6f72646572206973206d617463686564","kind":"string","nativeSrc":"14044:18:11","nodeType":"YulLiteral","src":"14044:18:11","type":"","value":"order is matched"}],"functionName":{"name":"mstore","nativeSrc":"14017:6:11","nodeType":"YulIdentifier","src":"14017:6:11"},"nativeSrc":"14017:46:11","nodeType":"YulFunctionCall","src":"14017:46:11"},"nativeSrc":"14017:46:11","nodeType":"YulExpressionStatement","src":"14017:46:11"},{"nativeSrc":"14072:26:11","nodeType":"YulAssignment","src":"14072:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"14084:9:11","nodeType":"YulIdentifier","src":"14084:9:11"},{"kind":"number","nativeSrc":"14095:2:11","nodeType":"YulLiteral","src":"14095:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14080:3:11","nodeType":"YulIdentifier","src":"14080:3:11"},"nativeSrc":"14080:18:11","nodeType":"YulFunctionCall","src":"14080:18:11"},"variableNames":[{"name":"tail","nativeSrc":"14072:4:11","nodeType":"YulIdentifier","src":"14072:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_f68dea25b2121ef63f16cbf66fb1ce6a288f88167942e5cf0162311f9fdd2158__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13764:340:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13915:9:11","nodeType":"YulTypedName","src":"13915:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13929:4:11","nodeType":"YulTypedName","src":"13929:4:11","type":""}],"src":"13764:340:11"},{"body":{"nativeSrc":"14283:167:11","nodeType":"YulBlock","src":"14283:167:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14300:9:11","nodeType":"YulIdentifier","src":"14300:9:11"},{"kind":"number","nativeSrc":"14311:2:11","nodeType":"YulLiteral","src":"14311:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14293:6:11","nodeType":"YulIdentifier","src":"14293:6:11"},"nativeSrc":"14293:21:11","nodeType":"YulFunctionCall","src":"14293:21:11"},"nativeSrc":"14293:21:11","nodeType":"YulExpressionStatement","src":"14293:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14334:9:11","nodeType":"YulIdentifier","src":"14334:9:11"},{"kind":"number","nativeSrc":"14345:2:11","nodeType":"YulLiteral","src":"14345:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14330:3:11","nodeType":"YulIdentifier","src":"14330:3:11"},"nativeSrc":"14330:18:11","nodeType":"YulFunctionCall","src":"14330:18:11"},{"kind":"number","nativeSrc":"14350:2:11","nodeType":"YulLiteral","src":"14350:2:11","type":"","value":"17"}],"functionName":{"name":"mstore","nativeSrc":"14323:6:11","nodeType":"YulIdentifier","src":"14323:6:11"},"nativeSrc":"14323:30:11","nodeType":"YulFunctionCall","src":"14323:30:11"},"nativeSrc":"14323:30:11","nodeType":"YulExpressionStatement","src":"14323:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14373:9:11","nodeType":"YulIdentifier","src":"14373:9:11"},{"kind":"number","nativeSrc":"14384:2:11","nodeType":"YulLiteral","src":"14384:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14369:3:11","nodeType":"YulIdentifier","src":"14369:3:11"},"nativeSrc":"14369:18:11","nodeType":"YulFunctionCall","src":"14369:18:11"},{"hexValue":"696e76616c6964207369676e6174757265","kind":"string","nativeSrc":"14389:19:11","nodeType":"YulLiteral","src":"14389:19:11","type":"","value":"invalid signature"}],"functionName":{"name":"mstore","nativeSrc":"14362:6:11","nodeType":"YulIdentifier","src":"14362:6:11"},"nativeSrc":"14362:47:11","nodeType":"YulFunctionCall","src":"14362:47:11"},"nativeSrc":"14362:47:11","nodeType":"YulExpressionStatement","src":"14362:47:11"},{"nativeSrc":"14418:26:11","nodeType":"YulAssignment","src":"14418:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"14430:9:11","nodeType":"YulIdentifier","src":"14430:9:11"},{"kind":"number","nativeSrc":"14441:2:11","nodeType":"YulLiteral","src":"14441:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14426:3:11","nodeType":"YulIdentifier","src":"14426:3:11"},"nativeSrc":"14426:18:11","nodeType":"YulFunctionCall","src":"14426:18:11"},"variableNames":[{"name":"tail","nativeSrc":"14418:4:11","nodeType":"YulIdentifier","src":"14418:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14109:341:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14260:9:11","nodeType":"YulTypedName","src":"14260:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14274:4:11","nodeType":"YulTypedName","src":"14274:4:11","type":""}],"src":"14109:341:11"},{"body":{"nativeSrc":"14629:174:11","nodeType":"YulBlock","src":"14629:174:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14646:9:11","nodeType":"YulIdentifier","src":"14646:9:11"},{"kind":"number","nativeSrc":"14657:2:11","nodeType":"YulLiteral","src":"14657:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14639:6:11","nodeType":"YulIdentifier","src":"14639:6:11"},"nativeSrc":"14639:21:11","nodeType":"YulFunctionCall","src":"14639:21:11"},"nativeSrc":"14639:21:11","nodeType":"YulExpressionStatement","src":"14639:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14680:9:11","nodeType":"YulIdentifier","src":"14680:9:11"},{"kind":"number","nativeSrc":"14691:2:11","nodeType":"YulLiteral","src":"14691:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14676:3:11","nodeType":"YulIdentifier","src":"14676:3:11"},"nativeSrc":"14676:18:11","nodeType":"YulFunctionCall","src":"14676:18:11"},{"kind":"number","nativeSrc":"14696:2:11","nodeType":"YulLiteral","src":"14696:2:11","type":"","value":"24"}],"functionName":{"name":"mstore","nativeSrc":"14669:6:11","nodeType":"YulIdentifier","src":"14669:6:11"},"nativeSrc":"14669:30:11","nodeType":"YulFunctionCall","src":"14669:30:11"},"nativeSrc":"14669:30:11","nodeType":"YulExpressionStatement","src":"14669:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14719:9:11","nodeType":"YulIdentifier","src":"14719:9:11"},{"kind":"number","nativeSrc":"14730:2:11","nodeType":"YulLiteral","src":"14730:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14715:3:11","nodeType":"YulIdentifier","src":"14715:3:11"},"nativeSrc":"14715:18:11","nodeType":"YulFunctionCall","src":"14715:18:11"},{"hexValue":"736574746c656d656e74206e6f7420737570706f72746564","kind":"string","nativeSrc":"14735:26:11","nodeType":"YulLiteral","src":"14735:26:11","type":"","value":"settlement not supported"}],"functionName":{"name":"mstore","nativeSrc":"14708:6:11","nodeType":"YulIdentifier","src":"14708:6:11"},"nativeSrc":"14708:54:11","nodeType":"YulFunctionCall","src":"14708:54:11"},"nativeSrc":"14708:54:11","nodeType":"YulExpressionStatement","src":"14708:54:11"},{"nativeSrc":"14771:26:11","nodeType":"YulAssignment","src":"14771:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"14783:9:11","nodeType":"YulIdentifier","src":"14783:9:11"},{"kind":"number","nativeSrc":"14794:2:11","nodeType":"YulLiteral","src":"14794:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14779:3:11","nodeType":"YulIdentifier","src":"14779:3:11"},"nativeSrc":"14779:18:11","nodeType":"YulFunctionCall","src":"14779:18:11"},"variableNames":[{"name":"tail","nativeSrc":"14771:4:11","nodeType":"YulIdentifier","src":"14771:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_a2271675b9d54702be65073dac4017cbbc09dc6b96183137f4b1a06492bbf0e9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14455:348:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14606:9:11","nodeType":"YulTypedName","src":"14606:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14620:4:11","nodeType":"YulTypedName","src":"14620:4:11","type":""}],"src":"14455:348:11"},{"body":{"nativeSrc":"14877:176:11","nodeType":"YulBlock","src":"14877:176:11","statements":[{"body":{"nativeSrc":"14923:16:11","nodeType":"YulBlock","src":"14923:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14932:1:11","nodeType":"YulLiteral","src":"14932:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"14935:1:11","nodeType":"YulLiteral","src":"14935:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14925:6:11","nodeType":"YulIdentifier","src":"14925:6:11"},"nativeSrc":"14925:12:11","nodeType":"YulFunctionCall","src":"14925:12:11"},"nativeSrc":"14925:12:11","nodeType":"YulExpressionStatement","src":"14925:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14898:7:11","nodeType":"YulIdentifier","src":"14898:7:11"},{"name":"headStart","nativeSrc":"14907:9:11","nodeType":"YulIdentifier","src":"14907:9:11"}],"functionName":{"name":"sub","nativeSrc":"14894:3:11","nodeType":"YulIdentifier","src":"14894:3:11"},"nativeSrc":"14894:23:11","nodeType":"YulFunctionCall","src":"14894:23:11"},{"kind":"number","nativeSrc":"14919:2:11","nodeType":"YulLiteral","src":"14919:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"14890:3:11","nodeType":"YulIdentifier","src":"14890:3:11"},"nativeSrc":"14890:32:11","nodeType":"YulFunctionCall","src":"14890:32:11"},"nativeSrc":"14887:52:11","nodeType":"YulIf","src":"14887:52:11"},{"nativeSrc":"14948:36:11","nodeType":"YulVariableDeclaration","src":"14948:36:11","value":{"arguments":[{"name":"headStart","nativeSrc":"14974:9:11","nodeType":"YulIdentifier","src":"14974:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"14961:12:11","nodeType":"YulIdentifier","src":"14961:12:11"},"nativeSrc":"14961:23:11","nodeType":"YulFunctionCall","src":"14961:23:11"},"variables":[{"name":"value","nativeSrc":"14952:5:11","nodeType":"YulTypedName","src":"14952:5:11","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"15017:5:11","nodeType":"YulIdentifier","src":"15017:5:11"}],"functionName":{"name":"validator_revert_uint32","nativeSrc":"14993:23:11","nodeType":"YulIdentifier","src":"14993:23:11"},"nativeSrc":"14993:30:11","nodeType":"YulFunctionCall","src":"14993:30:11"},"nativeSrc":"14993:30:11","nodeType":"YulExpressionStatement","src":"14993:30:11"},{"nativeSrc":"15032:15:11","nodeType":"YulAssignment","src":"15032:15:11","value":{"name":"value","nativeSrc":"15042:5:11","nodeType":"YulIdentifier","src":"15042:5:11"},"variableNames":[{"name":"value0","nativeSrc":"15032:6:11","nodeType":"YulIdentifier","src":"15032:6:11"}]}]},"name":"abi_decode_tuple_t_uint32","nativeSrc":"14808:245:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14843:9:11","nodeType":"YulTypedName","src":"14843:9:11","type":""},{"name":"dataEnd","nativeSrc":"14854:7:11","nodeType":"YulTypedName","src":"14854:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"14866:6:11","nodeType":"YulTypedName","src":"14866:6:11","type":""}],"src":"14808:245:11"},{"body":{"nativeSrc":"15232:170:11","nodeType":"YulBlock","src":"15232:170:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15249:9:11","nodeType":"YulIdentifier","src":"15249:9:11"},{"kind":"number","nativeSrc":"15260:2:11","nodeType":"YulLiteral","src":"15260:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15242:6:11","nodeType":"YulIdentifier","src":"15242:6:11"},"nativeSrc":"15242:21:11","nodeType":"YulFunctionCall","src":"15242:21:11"},"nativeSrc":"15242:21:11","nodeType":"YulExpressionStatement","src":"15242:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15283:9:11","nodeType":"YulIdentifier","src":"15283:9:11"},{"kind":"number","nativeSrc":"15294:2:11","nodeType":"YulLiteral","src":"15294:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15279:3:11","nodeType":"YulIdentifier","src":"15279:3:11"},"nativeSrc":"15279:18:11","nodeType":"YulFunctionCall","src":"15279:18:11"},{"kind":"number","nativeSrc":"15299:2:11","nodeType":"YulLiteral","src":"15299:2:11","type":"","value":"20"}],"functionName":{"name":"mstore","nativeSrc":"15272:6:11","nodeType":"YulIdentifier","src":"15272:6:11"},"nativeSrc":"15272:30:11","nodeType":"YulFunctionCall","src":"15272:30:11"},"nativeSrc":"15272:30:11","nodeType":"YulExpressionStatement","src":"15272:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15322:9:11","nodeType":"YulIdentifier","src":"15322:9:11"},{"kind":"number","nativeSrc":"15333:2:11","nodeType":"YulLiteral","src":"15333:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15318:3:11","nodeType":"YulIdentifier","src":"15318:3:11"},"nativeSrc":"15318:18:11","nodeType":"YulFunctionCall","src":"15318:18:11"},{"hexValue":"696e76616c69642066696c6c446561646c696e65","kind":"string","nativeSrc":"15338:22:11","nodeType":"YulLiteral","src":"15338:22:11","type":"","value":"invalid fillDeadline"}],"functionName":{"name":"mstore","nativeSrc":"15311:6:11","nodeType":"YulIdentifier","src":"15311:6:11"},"nativeSrc":"15311:50:11","nodeType":"YulFunctionCall","src":"15311:50:11"},"nativeSrc":"15311:50:11","nodeType":"YulExpressionStatement","src":"15311:50:11"},{"nativeSrc":"15370:26:11","nodeType":"YulAssignment","src":"15370:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"15382:9:11","nodeType":"YulIdentifier","src":"15382:9:11"},{"kind":"number","nativeSrc":"15393:2:11","nodeType":"YulLiteral","src":"15393:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15378:3:11","nodeType":"YulIdentifier","src":"15378:3:11"},"nativeSrc":"15378:18:11","nodeType":"YulFunctionCall","src":"15378:18:11"},"variableNames":[{"name":"tail","nativeSrc":"15370:4:11","nodeType":"YulIdentifier","src":"15370:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_b283f66470cf7c2f0aef23a92d46510a6f1eeaf88649fbf9d7a2a2000f193b95__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15058:344:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15209:9:11","nodeType":"YulTypedName","src":"15209:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15223:4:11","nodeType":"YulTypedName","src":"15223:4:11","type":""}],"src":"15058:344:11"},{"body":{"nativeSrc":"15581:174:11","nodeType":"YulBlock","src":"15581:174:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15598:9:11","nodeType":"YulIdentifier","src":"15598:9:11"},{"kind":"number","nativeSrc":"15609:2:11","nodeType":"YulLiteral","src":"15609:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15591:6:11","nodeType":"YulIdentifier","src":"15591:6:11"},"nativeSrc":"15591:21:11","nodeType":"YulFunctionCall","src":"15591:21:11"},"nativeSrc":"15591:21:11","nodeType":"YulExpressionStatement","src":"15591:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15632:9:11","nodeType":"YulIdentifier","src":"15632:9:11"},{"kind":"number","nativeSrc":"15643:2:11","nodeType":"YulLiteral","src":"15643:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15628:3:11","nodeType":"YulIdentifier","src":"15628:3:11"},"nativeSrc":"15628:18:11","nodeType":"YulFunctionCall","src":"15628:18:11"},{"kind":"number","nativeSrc":"15648:2:11","nodeType":"YulLiteral","src":"15648:2:11","type":"","value":"24"}],"functionName":{"name":"mstore","nativeSrc":"15621:6:11","nodeType":"YulIdentifier","src":"15621:6:11"},"nativeSrc":"15621:30:11","nodeType":"YulFunctionCall","src":"15621:30:11"},"nativeSrc":"15621:30:11","nodeType":"YulExpressionStatement","src":"15621:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15671:9:11","nodeType":"YulIdentifier","src":"15671:9:11"},{"kind":"number","nativeSrc":"15682:2:11","nodeType":"YulLiteral","src":"15682:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15667:3:11","nodeType":"YulIdentifier","src":"15667:3:11"},"nativeSrc":"15667:18:11","nodeType":"YulFunctionCall","src":"15667:18:11"},{"hexValue":"696e76616c696420696e697469617465446561646c696e65","kind":"string","nativeSrc":"15687:26:11","nodeType":"YulLiteral","src":"15687:26:11","type":"","value":"invalid initiateDeadline"}],"functionName":{"name":"mstore","nativeSrc":"15660:6:11","nodeType":"YulIdentifier","src":"15660:6:11"},"nativeSrc":"15660:54:11","nodeType":"YulFunctionCall","src":"15660:54:11"},"nativeSrc":"15660:54:11","nodeType":"YulExpressionStatement","src":"15660:54:11"},{"nativeSrc":"15723:26:11","nodeType":"YulAssignment","src":"15723:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"15735:9:11","nodeType":"YulIdentifier","src":"15735:9:11"},{"kind":"number","nativeSrc":"15746:2:11","nodeType":"YulLiteral","src":"15746:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15731:3:11","nodeType":"YulIdentifier","src":"15731:3:11"},"nativeSrc":"15731:18:11","nodeType":"YulFunctionCall","src":"15731:18:11"},"variableNames":[{"name":"tail","nativeSrc":"15723:4:11","nodeType":"YulIdentifier","src":"15723:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_aac48e8ef1da4bf3b3f872975626dc66a9c0ab710743fa45b4916128c158ec38__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15407:348:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15558:9:11","nodeType":"YulTypedName","src":"15558:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15572:4:11","nodeType":"YulTypedName","src":"15572:4:11","type":""}],"src":"15407:348:11"},{"body":{"nativeSrc":"15934:163:11","nodeType":"YulBlock","src":"15934:163:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15951:9:11","nodeType":"YulIdentifier","src":"15951:9:11"},{"kind":"number","nativeSrc":"15962:2:11","nodeType":"YulLiteral","src":"15962:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15944:6:11","nodeType":"YulIdentifier","src":"15944:6:11"},"nativeSrc":"15944:21:11","nodeType":"YulFunctionCall","src":"15944:21:11"},"nativeSrc":"15944:21:11","nodeType":"YulExpressionStatement","src":"15944:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15985:9:11","nodeType":"YulIdentifier","src":"15985:9:11"},{"kind":"number","nativeSrc":"15996:2:11","nodeType":"YulLiteral","src":"15996:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15981:3:11","nodeType":"YulIdentifier","src":"15981:3:11"},"nativeSrc":"15981:18:11","nodeType":"YulFunctionCall","src":"15981:18:11"},{"kind":"number","nativeSrc":"16001:2:11","nodeType":"YulLiteral","src":"16001:2:11","type":"","value":"13"}],"functionName":{"name":"mstore","nativeSrc":"15974:6:11","nodeType":"YulIdentifier","src":"15974:6:11"},"nativeSrc":"15974:30:11","nodeType":"YulFunctionCall","src":"15974:30:11"},"nativeSrc":"15974:30:11","nodeType":"YulExpressionStatement","src":"15974:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16024:9:11","nodeType":"YulIdentifier","src":"16024:9:11"},{"kind":"number","nativeSrc":"16035:2:11","nodeType":"YulLiteral","src":"16035:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16020:3:11","nodeType":"YulIdentifier","src":"16020:3:11"},"nativeSrc":"16020:18:11","nodeType":"YulFunctionCall","src":"16020:18:11"},{"hexValue":"696e76616c6964206e6f6e6365","kind":"string","nativeSrc":"16040:15:11","nodeType":"YulLiteral","src":"16040:15:11","type":"","value":"invalid nonce"}],"functionName":{"name":"mstore","nativeSrc":"16013:6:11","nodeType":"YulIdentifier","src":"16013:6:11"},"nativeSrc":"16013:43:11","nodeType":"YulFunctionCall","src":"16013:43:11"},"nativeSrc":"16013:43:11","nodeType":"YulExpressionStatement","src":"16013:43:11"},{"nativeSrc":"16065:26:11","nodeType":"YulAssignment","src":"16065:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"16077:9:11","nodeType":"YulIdentifier","src":"16077:9:11"},{"kind":"number","nativeSrc":"16088:2:11","nodeType":"YulLiteral","src":"16088:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16073:3:11","nodeType":"YulIdentifier","src":"16073:3:11"},"nativeSrc":"16073:18:11","nodeType":"YulFunctionCall","src":"16073:18:11"},"variableNames":[{"name":"tail","nativeSrc":"16065:4:11","nodeType":"YulIdentifier","src":"16065:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_71713bd5478b586cac708caace92720e83db31d1de15cf938f760684d5501e10__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15760:337:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15911:9:11","nodeType":"YulTypedName","src":"15911:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15925:4:11","nodeType":"YulTypedName","src":"15925:4:11","type":""}],"src":"15760:337:11"},{"body":{"nativeSrc":"16276:171:11","nodeType":"YulBlock","src":"16276:171:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16293:9:11","nodeType":"YulIdentifier","src":"16293:9:11"},{"kind":"number","nativeSrc":"16304:2:11","nodeType":"YulLiteral","src":"16304:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16286:6:11","nodeType":"YulIdentifier","src":"16286:6:11"},"nativeSrc":"16286:21:11","nodeType":"YulFunctionCall","src":"16286:21:11"},"nativeSrc":"16286:21:11","nodeType":"YulExpressionStatement","src":"16286:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16327:9:11","nodeType":"YulIdentifier","src":"16327:9:11"},{"kind":"number","nativeSrc":"16338:2:11","nodeType":"YulLiteral","src":"16338:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16323:3:11","nodeType":"YulIdentifier","src":"16323:3:11"},"nativeSrc":"16323:18:11","nodeType":"YulFunctionCall","src":"16323:18:11"},{"kind":"number","nativeSrc":"16343:2:11","nodeType":"YulLiteral","src":"16343:2:11","type":"","value":"21"}],"functionName":{"name":"mstore","nativeSrc":"16316:6:11","nodeType":"YulIdentifier","src":"16316:6:11"},"nativeSrc":"16316:30:11","nodeType":"YulFunctionCall","src":"16316:30:11"},"nativeSrc":"16316:30:11","nodeType":"YulExpressionStatement","src":"16316:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16366:9:11","nodeType":"YulIdentifier","src":"16366:9:11"},{"kind":"number","nativeSrc":"16377:2:11","nodeType":"YulLiteral","src":"16377:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16362:3:11","nodeType":"YulIdentifier","src":"16362:3:11"},"nativeSrc":"16362:18:11","nodeType":"YulFunctionCall","src":"16362:18:11"},{"hexValue":"696e76616c6964206f726967696e436861696e4964","kind":"string","nativeSrc":"16382:23:11","nodeType":"YulLiteral","src":"16382:23:11","type":"","value":"invalid originChainId"}],"functionName":{"name":"mstore","nativeSrc":"16355:6:11","nodeType":"YulIdentifier","src":"16355:6:11"},"nativeSrc":"16355:51:11","nodeType":"YulFunctionCall","src":"16355:51:11"},"nativeSrc":"16355:51:11","nodeType":"YulExpressionStatement","src":"16355:51:11"},{"nativeSrc":"16415:26:11","nodeType":"YulAssignment","src":"16415:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"16427:9:11","nodeType":"YulIdentifier","src":"16427:9:11"},{"kind":"number","nativeSrc":"16438:2:11","nodeType":"YulLiteral","src":"16438:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16423:3:11","nodeType":"YulIdentifier","src":"16423:3:11"},"nativeSrc":"16423:18:11","nodeType":"YulFunctionCall","src":"16423:18:11"},"variableNames":[{"name":"tail","nativeSrc":"16415:4:11","nodeType":"YulIdentifier","src":"16415:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_03924fc90aefba9a192d3b85b327d4c7172ad1107e2c1e65b2790c92b092cdc0__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16102:345:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16253:9:11","nodeType":"YulTypedName","src":"16253:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16267:4:11","nodeType":"YulTypedName","src":"16267:4:11","type":""}],"src":"16102:345:11"},{"body":{"nativeSrc":"16546:427:11","nodeType":"YulBlock","src":"16546:427:11","statements":[{"nativeSrc":"16556:51:11","nodeType":"YulVariableDeclaration","src":"16556:51:11","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"16595:11:11","nodeType":"YulIdentifier","src":"16595:11:11"}],"functionName":{"name":"calldataload","nativeSrc":"16582:12:11","nodeType":"YulIdentifier","src":"16582:12:11"},"nativeSrc":"16582:25:11","nodeType":"YulFunctionCall","src":"16582:25:11"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"16560:18:11","nodeType":"YulTypedName","src":"16560:18:11","type":""}]},{"body":{"nativeSrc":"16696:16:11","nodeType":"YulBlock","src":"16696:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16705:1:11","nodeType":"YulLiteral","src":"16705:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"16708:1:11","nodeType":"YulLiteral","src":"16708:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16698:6:11","nodeType":"YulIdentifier","src":"16698:6:11"},"nativeSrc":"16698:12:11","nodeType":"YulFunctionCall","src":"16698:12:11"},"nativeSrc":"16698:12:11","nodeType":"YulExpressionStatement","src":"16698:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"16630:18:11","nodeType":"YulIdentifier","src":"16630:18:11"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"16658:12:11","nodeType":"YulIdentifier","src":"16658:12:11"},"nativeSrc":"16658:14:11","nodeType":"YulFunctionCall","src":"16658:14:11"},{"name":"base_ref","nativeSrc":"16674:8:11","nodeType":"YulIdentifier","src":"16674:8:11"}],"functionName":{"name":"sub","nativeSrc":"16654:3:11","nodeType":"YulIdentifier","src":"16654:3:11"},"nativeSrc":"16654:29:11","nodeType":"YulFunctionCall","src":"16654:29:11"},{"arguments":[{"kind":"number","nativeSrc":"16689:2:11","nodeType":"YulLiteral","src":"16689:2:11","type":"","value":"30"}],"functionName":{"name":"not","nativeSrc":"16685:3:11","nodeType":"YulIdentifier","src":"16685:3:11"},"nativeSrc":"16685:7:11","nodeType":"YulFunctionCall","src":"16685:7:11"}],"functionName":{"name":"add","nativeSrc":"16650:3:11","nodeType":"YulIdentifier","src":"16650:3:11"},"nativeSrc":"16650:43:11","nodeType":"YulFunctionCall","src":"16650:43:11"}],"functionName":{"name":"slt","nativeSrc":"16626:3:11","nodeType":"YulIdentifier","src":"16626:3:11"},"nativeSrc":"16626:68:11","nodeType":"YulFunctionCall","src":"16626:68:11"}],"functionName":{"name":"iszero","nativeSrc":"16619:6:11","nodeType":"YulIdentifier","src":"16619:6:11"},"nativeSrc":"16619:76:11","nodeType":"YulFunctionCall","src":"16619:76:11"},"nativeSrc":"16616:96:11","nodeType":"YulIf","src":"16616:96:11"},{"nativeSrc":"16721:47:11","nodeType":"YulVariableDeclaration","src":"16721:47:11","value":{"arguments":[{"name":"base_ref","nativeSrc":"16739:8:11","nodeType":"YulIdentifier","src":"16739:8:11"},{"name":"rel_offset_of_tail","nativeSrc":"16749:18:11","nodeType":"YulIdentifier","src":"16749:18:11"}],"functionName":{"name":"add","nativeSrc":"16735:3:11","nodeType":"YulIdentifier","src":"16735:3:11"},"nativeSrc":"16735:33:11","nodeType":"YulFunctionCall","src":"16735:33:11"},"variables":[{"name":"addr_1","nativeSrc":"16725:6:11","nodeType":"YulTypedName","src":"16725:6:11","type":""}]},{"nativeSrc":"16777:30:11","nodeType":"YulAssignment","src":"16777:30:11","value":{"arguments":[{"name":"addr_1","nativeSrc":"16800:6:11","nodeType":"YulIdentifier","src":"16800:6:11"}],"functionName":{"name":"calldataload","nativeSrc":"16787:12:11","nodeType":"YulIdentifier","src":"16787:12:11"},"nativeSrc":"16787:20:11","nodeType":"YulFunctionCall","src":"16787:20:11"},"variableNames":[{"name":"length","nativeSrc":"16777:6:11","nodeType":"YulIdentifier","src":"16777:6:11"}]},{"body":{"nativeSrc":"16850:16:11","nodeType":"YulBlock","src":"16850:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16859:1:11","nodeType":"YulLiteral","src":"16859:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"16862:1:11","nodeType":"YulLiteral","src":"16862:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16852:6:11","nodeType":"YulIdentifier","src":"16852:6:11"},"nativeSrc":"16852:12:11","nodeType":"YulFunctionCall","src":"16852:12:11"},"nativeSrc":"16852:12:11","nodeType":"YulExpressionStatement","src":"16852:12:11"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"16822:6:11","nodeType":"YulIdentifier","src":"16822:6:11"},{"kind":"number","nativeSrc":"16830:18:11","nodeType":"YulLiteral","src":"16830:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"16819:2:11","nodeType":"YulIdentifier","src":"16819:2:11"},"nativeSrc":"16819:30:11","nodeType":"YulFunctionCall","src":"16819:30:11"},"nativeSrc":"16816:50:11","nodeType":"YulIf","src":"16816:50:11"},{"nativeSrc":"16875:25:11","nodeType":"YulAssignment","src":"16875:25:11","value":{"arguments":[{"name":"addr_1","nativeSrc":"16887:6:11","nodeType":"YulIdentifier","src":"16887:6:11"},{"kind":"number","nativeSrc":"16895:4:11","nodeType":"YulLiteral","src":"16895:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16883:3:11","nodeType":"YulIdentifier","src":"16883:3:11"},"nativeSrc":"16883:17:11","nodeType":"YulFunctionCall","src":"16883:17:11"},"variableNames":[{"name":"addr","nativeSrc":"16875:4:11","nodeType":"YulIdentifier","src":"16875:4:11"}]},{"body":{"nativeSrc":"16951:16:11","nodeType":"YulBlock","src":"16951:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16960:1:11","nodeType":"YulLiteral","src":"16960:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"16963:1:11","nodeType":"YulLiteral","src":"16963:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16953:6:11","nodeType":"YulIdentifier","src":"16953:6:11"},"nativeSrc":"16953:12:11","nodeType":"YulFunctionCall","src":"16953:12:11"},"nativeSrc":"16953:12:11","nodeType":"YulExpressionStatement","src":"16953:12:11"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"16916:4:11","nodeType":"YulIdentifier","src":"16916:4:11"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"16926:12:11","nodeType":"YulIdentifier","src":"16926:12:11"},"nativeSrc":"16926:14:11","nodeType":"YulFunctionCall","src":"16926:14:11"},{"name":"length","nativeSrc":"16942:6:11","nodeType":"YulIdentifier","src":"16942:6:11"}],"functionName":{"name":"sub","nativeSrc":"16922:3:11","nodeType":"YulIdentifier","src":"16922:3:11"},"nativeSrc":"16922:27:11","nodeType":"YulFunctionCall","src":"16922:27:11"}],"functionName":{"name":"sgt","nativeSrc":"16912:3:11","nodeType":"YulIdentifier","src":"16912:3:11"},"nativeSrc":"16912:38:11","nodeType":"YulFunctionCall","src":"16912:38:11"},"nativeSrc":"16909:58:11","nodeType":"YulIf","src":"16909:58:11"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nativeSrc":"16452:521:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"16503:8:11","nodeType":"YulTypedName","src":"16503:8:11","type":""},{"name":"ptr_to_tail","nativeSrc":"16513:11:11","nodeType":"YulTypedName","src":"16513:11:11","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"16529:4:11","nodeType":"YulTypedName","src":"16529:4:11","type":""},{"name":"length","nativeSrc":"16535:6:11","nodeType":"YulTypedName","src":"16535:6:11","type":""}],"src":"16452:521:11"},{"body":{"nativeSrc":"17048:110:11","nodeType":"YulBlock","src":"17048:110:11","statements":[{"body":{"nativeSrc":"17094:16:11","nodeType":"YulBlock","src":"17094:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17103:1:11","nodeType":"YulLiteral","src":"17103:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"17106:1:11","nodeType":"YulLiteral","src":"17106:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17096:6:11","nodeType":"YulIdentifier","src":"17096:6:11"},"nativeSrc":"17096:12:11","nodeType":"YulFunctionCall","src":"17096:12:11"},"nativeSrc":"17096:12:11","nodeType":"YulExpressionStatement","src":"17096:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17069:7:11","nodeType":"YulIdentifier","src":"17069:7:11"},{"name":"headStart","nativeSrc":"17078:9:11","nodeType":"YulIdentifier","src":"17078:9:11"}],"functionName":{"name":"sub","nativeSrc":"17065:3:11","nodeType":"YulIdentifier","src":"17065:3:11"},"nativeSrc":"17065:23:11","nodeType":"YulFunctionCall","src":"17065:23:11"},{"kind":"number","nativeSrc":"17090:2:11","nodeType":"YulLiteral","src":"17090:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"17061:3:11","nodeType":"YulIdentifier","src":"17061:3:11"},"nativeSrc":"17061:32:11","nodeType":"YulFunctionCall","src":"17061:32:11"},"nativeSrc":"17058:52:11","nodeType":"YulIf","src":"17058:52:11"},{"nativeSrc":"17119:33:11","nodeType":"YulAssignment","src":"17119:33:11","value":{"arguments":[{"name":"headStart","nativeSrc":"17142:9:11","nodeType":"YulIdentifier","src":"17142:9:11"}],"functionName":{"name":"calldataload","nativeSrc":"17129:12:11","nodeType":"YulIdentifier","src":"17129:12:11"},"nativeSrc":"17129:23:11","nodeType":"YulFunctionCall","src":"17129:23:11"},"variableNames":[{"name":"value0","nativeSrc":"17119:6:11","nodeType":"YulIdentifier","src":"17119:6:11"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"16978:180:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17014:9:11","nodeType":"YulTypedName","src":"17014:9:11","type":""},{"name":"dataEnd","nativeSrc":"17025:7:11","nodeType":"YulTypedName","src":"17025:7:11","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17037:6:11","nodeType":"YulTypedName","src":"17037:6:11","type":""}],"src":"16978:180:11"},{"body":{"nativeSrc":"17337:175:11","nodeType":"YulBlock","src":"17337:175:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17354:9:11","nodeType":"YulIdentifier","src":"17354:9:11"},{"kind":"number","nativeSrc":"17365:2:11","nodeType":"YulLiteral","src":"17365:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17347:6:11","nodeType":"YulIdentifier","src":"17347:6:11"},"nativeSrc":"17347:21:11","nodeType":"YulFunctionCall","src":"17347:21:11"},"nativeSrc":"17347:21:11","nodeType":"YulExpressionStatement","src":"17347:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17388:9:11","nodeType":"YulIdentifier","src":"17388:9:11"},{"kind":"number","nativeSrc":"17399:2:11","nodeType":"YulLiteral","src":"17399:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17384:3:11","nodeType":"YulIdentifier","src":"17384:3:11"},"nativeSrc":"17384:18:11","nodeType":"YulFunctionCall","src":"17384:18:11"},{"kind":"number","nativeSrc":"17404:2:11","nodeType":"YulLiteral","src":"17404:2:11","type":"","value":"25"}],"functionName":{"name":"mstore","nativeSrc":"17377:6:11","nodeType":"YulIdentifier","src":"17377:6:11"},"nativeSrc":"17377:30:11","nodeType":"YulFunctionCall","src":"17377:30:11"},"nativeSrc":"17377:30:11","nodeType":"YulExpressionStatement","src":"17377:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17427:9:11","nodeType":"YulIdentifier","src":"17427:9:11"},{"kind":"number","nativeSrc":"17438:2:11","nodeType":"YulLiteral","src":"17438:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17423:3:11","nodeType":"YulIdentifier","src":"17423:3:11"},"nativeSrc":"17423:18:11","nodeType":"YulFunctionCall","src":"17423:18:11"},{"hexValue":"696e73756666696369656e7420696e70757420616d6f756e74","kind":"string","nativeSrc":"17443:27:11","nodeType":"YulLiteral","src":"17443:27:11","type":"","value":"insufficient input amount"}],"functionName":{"name":"mstore","nativeSrc":"17416:6:11","nodeType":"YulIdentifier","src":"17416:6:11"},"nativeSrc":"17416:55:11","nodeType":"YulFunctionCall","src":"17416:55:11"},"nativeSrc":"17416:55:11","nodeType":"YulExpressionStatement","src":"17416:55:11"},{"nativeSrc":"17480:26:11","nodeType":"YulAssignment","src":"17480:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"17492:9:11","nodeType":"YulIdentifier","src":"17492:9:11"},{"kind":"number","nativeSrc":"17503:2:11","nodeType":"YulLiteral","src":"17503:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17488:3:11","nodeType":"YulIdentifier","src":"17488:3:11"},"nativeSrc":"17488:18:11","nodeType":"YulFunctionCall","src":"17488:18:11"},"variableNames":[{"name":"tail","nativeSrc":"17480:4:11","nodeType":"YulIdentifier","src":"17480:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_b601b48934a5e0ad22058b921e0e8f54236eeea2ad7a294b6399a5167ec92ad4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17163:349:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17314:9:11","nodeType":"YulTypedName","src":"17314:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17328:4:11","nodeType":"YulTypedName","src":"17328:4:11","type":""}],"src":"17163:349:11"},{"body":{"nativeSrc":"17691:172:11","nodeType":"YulBlock","src":"17691:172:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17708:9:11","nodeType":"YulIdentifier","src":"17708:9:11"},{"kind":"number","nativeSrc":"17719:2:11","nodeType":"YulLiteral","src":"17719:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17701:6:11","nodeType":"YulIdentifier","src":"17701:6:11"},"nativeSrc":"17701:21:11","nodeType":"YulFunctionCall","src":"17701:21:11"},"nativeSrc":"17701:21:11","nodeType":"YulExpressionStatement","src":"17701:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17742:9:11","nodeType":"YulIdentifier","src":"17742:9:11"},{"kind":"number","nativeSrc":"17753:2:11","nodeType":"YulLiteral","src":"17753:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17738:3:11","nodeType":"YulIdentifier","src":"17738:3:11"},"nativeSrc":"17738:18:11","nodeType":"YulFunctionCall","src":"17738:18:11"},{"kind":"number","nativeSrc":"17758:2:11","nodeType":"YulLiteral","src":"17758:2:11","type":"","value":"22"}],"functionName":{"name":"mstore","nativeSrc":"17731:6:11","nodeType":"YulIdentifier","src":"17731:6:11"},"nativeSrc":"17731:30:11","nodeType":"YulFunctionCall","src":"17731:30:11"},"nativeSrc":"17731:30:11","nodeType":"YulExpressionStatement","src":"17731:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17781:9:11","nodeType":"YulIdentifier","src":"17781:9:11"},{"kind":"number","nativeSrc":"17792:2:11","nodeType":"YulLiteral","src":"17792:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17777:3:11","nodeType":"YulIdentifier","src":"17777:3:11"},"nativeSrc":"17777:18:11","nodeType":"YulFunctionCall","src":"17777:18:11"},{"hexValue":"696e73756666696369656e74206d73672e76616c7565","kind":"string","nativeSrc":"17797:24:11","nodeType":"YulLiteral","src":"17797:24:11","type":"","value":"insufficient msg.value"}],"functionName":{"name":"mstore","nativeSrc":"17770:6:11","nodeType":"YulIdentifier","src":"17770:6:11"},"nativeSrc":"17770:52:11","nodeType":"YulFunctionCall","src":"17770:52:11"},"nativeSrc":"17770:52:11","nodeType":"YulExpressionStatement","src":"17770:52:11"},{"nativeSrc":"17831:26:11","nodeType":"YulAssignment","src":"17831:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"17843:9:11","nodeType":"YulIdentifier","src":"17843:9:11"},{"kind":"number","nativeSrc":"17854:2:11","nodeType":"YulLiteral","src":"17854:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17839:3:11","nodeType":"YulIdentifier","src":"17839:3:11"},"nativeSrc":"17839:18:11","nodeType":"YulFunctionCall","src":"17839:18:11"},"variableNames":[{"name":"tail","nativeSrc":"17831:4:11","nodeType":"YulIdentifier","src":"17831:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_26a676b15b71d69e34107575030101aa26f954c7dfedd11c91bef20b7eaa6a6e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17517:346:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17668:9:11","nodeType":"YulTypedName","src":"17668:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17682:4:11","nodeType":"YulTypedName","src":"17682:4:11","type":""}],"src":"17517:346:11"},{"body":{"nativeSrc":"18042:181:11","nodeType":"YulBlock","src":"18042:181:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18059:9:11","nodeType":"YulIdentifier","src":"18059:9:11"},{"kind":"number","nativeSrc":"18070:2:11","nodeType":"YulLiteral","src":"18070:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18052:6:11","nodeType":"YulIdentifier","src":"18052:6:11"},"nativeSrc":"18052:21:11","nodeType":"YulFunctionCall","src":"18052:21:11"},"nativeSrc":"18052:21:11","nodeType":"YulExpressionStatement","src":"18052:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18093:9:11","nodeType":"YulIdentifier","src":"18093:9:11"},{"kind":"number","nativeSrc":"18104:2:11","nodeType":"YulLiteral","src":"18104:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18089:3:11","nodeType":"YulIdentifier","src":"18089:3:11"},"nativeSrc":"18089:18:11","nodeType":"YulFunctionCall","src":"18089:18:11"},{"kind":"number","nativeSrc":"18109:2:11","nodeType":"YulLiteral","src":"18109:2:11","type":"","value":"31"}],"functionName":{"name":"mstore","nativeSrc":"18082:6:11","nodeType":"YulIdentifier","src":"18082:6:11"},"nativeSrc":"18082:30:11","nodeType":"YulFunctionCall","src":"18082:30:11"},"nativeSrc":"18082:30:11","nodeType":"YulExpressionStatement","src":"18082:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18132:9:11","nodeType":"YulIdentifier","src":"18132:9:11"},{"kind":"number","nativeSrc":"18143:2:11","nodeType":"YulLiteral","src":"18143:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18128:3:11","nodeType":"YulIdentifier","src":"18128:3:11"},"nativeSrc":"18128:18:11","nodeType":"YulFunctionCall","src":"18128:18:11"},{"hexValue":"6465737420636861696e206964206d75737420626520646966666572656e74","kind":"string","nativeSrc":"18148:33:11","nodeType":"YulLiteral","src":"18148:33:11","type":"","value":"dest chain id must be different"}],"functionName":{"name":"mstore","nativeSrc":"18121:6:11","nodeType":"YulIdentifier","src":"18121:6:11"},"nativeSrc":"18121:61:11","nodeType":"YulFunctionCall","src":"18121:61:11"},"nativeSrc":"18121:61:11","nodeType":"YulExpressionStatement","src":"18121:61:11"},{"nativeSrc":"18191:26:11","nodeType":"YulAssignment","src":"18191:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"18203:9:11","nodeType":"YulIdentifier","src":"18203:9:11"},{"kind":"number","nativeSrc":"18214:2:11","nodeType":"YulLiteral","src":"18214:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18199:3:11","nodeType":"YulIdentifier","src":"18199:3:11"},"nativeSrc":"18199:18:11","nodeType":"YulFunctionCall","src":"18199:18:11"},"variableNames":[{"name":"tail","nativeSrc":"18191:4:11","nodeType":"YulIdentifier","src":"18191:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8d87f63b84b62e30747d02f72298fa13930e340255f9c84a9c9f504965b6f64__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17868:355:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18019:9:11","nodeType":"YulTypedName","src":"18019:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18033:4:11","nodeType":"YulTypedName","src":"18033:4:11","type":""}],"src":"17868:355:11"},{"body":{"nativeSrc":"18402:171:11","nodeType":"YulBlock","src":"18402:171:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18419:9:11","nodeType":"YulIdentifier","src":"18419:9:11"},{"kind":"number","nativeSrc":"18430:2:11","nodeType":"YulLiteral","src":"18430:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18412:6:11","nodeType":"YulIdentifier","src":"18412:6:11"},"nativeSrc":"18412:21:11","nodeType":"YulFunctionCall","src":"18412:21:11"},"nativeSrc":"18412:21:11","nodeType":"YulExpressionStatement","src":"18412:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18453:9:11","nodeType":"YulIdentifier","src":"18453:9:11"},{"kind":"number","nativeSrc":"18464:2:11","nodeType":"YulLiteral","src":"18464:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18449:3:11","nodeType":"YulIdentifier","src":"18449:3:11"},"nativeSrc":"18449:18:11","nodeType":"YulFunctionCall","src":"18449:18:11"},{"kind":"number","nativeSrc":"18469:2:11","nodeType":"YulLiteral","src":"18469:2:11","type":"","value":"21"}],"functionName":{"name":"mstore","nativeSrc":"18442:6:11","nodeType":"YulIdentifier","src":"18442:6:11"},"nativeSrc":"18442:30:11","nodeType":"YulFunctionCall","src":"18442:30:11"},"nativeSrc":"18442:30:11","nodeType":"YulExpressionStatement","src":"18442:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18492:9:11","nodeType":"YulIdentifier","src":"18492:9:11"},{"kind":"number","nativeSrc":"18503:2:11","nodeType":"YulLiteral","src":"18503:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18488:3:11","nodeType":"YulIdentifier","src":"18488:3:11"},"nativeSrc":"18488:18:11","nodeType":"YulFunctionCall","src":"18488:18:11"},{"hexValue":"696e76616c6964206465737420636861696e206964","kind":"string","nativeSrc":"18508:23:11","nodeType":"YulLiteral","src":"18508:23:11","type":"","value":"invalid dest chain id"}],"functionName":{"name":"mstore","nativeSrc":"18481:6:11","nodeType":"YulIdentifier","src":"18481:6:11"},"nativeSrc":"18481:51:11","nodeType":"YulFunctionCall","src":"18481:51:11"},"nativeSrc":"18481:51:11","nodeType":"YulExpressionStatement","src":"18481:51:11"},{"nativeSrc":"18541:26:11","nodeType":"YulAssignment","src":"18541:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"18553:9:11","nodeType":"YulIdentifier","src":"18553:9:11"},{"kind":"number","nativeSrc":"18564:2:11","nodeType":"YulLiteral","src":"18564:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18549:3:11","nodeType":"YulIdentifier","src":"18549:3:11"},"nativeSrc":"18549:18:11","nodeType":"YulFunctionCall","src":"18549:18:11"},"variableNames":[{"name":"tail","nativeSrc":"18541:4:11","nodeType":"YulIdentifier","src":"18541:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_139653279c350dbad7cac2e107facefd8c97c47e2cbefb2b7a62cb70e605a12e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18228:345:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18379:9:11","nodeType":"YulTypedName","src":"18379:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18393:4:11","nodeType":"YulTypedName","src":"18393:4:11","type":""}],"src":"18228:345:11"},{"body":{"nativeSrc":"18652:121:11","nodeType":"YulBlock","src":"18652:121:11","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"18669:4:11","nodeType":"YulIdentifier","src":"18669:4:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"18688:4:11","nodeType":"YulIdentifier","src":"18688:4:11"}],"functionName":{"name":"sload","nativeSrc":"18682:5:11","nodeType":"YulIdentifier","src":"18682:5:11"},"nativeSrc":"18682:11:11","nodeType":"YulFunctionCall","src":"18682:11:11"},{"arguments":[{"kind":"number","nativeSrc":"18699:3:11","nodeType":"YulLiteral","src":"18699:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"18704:26:11","nodeType":"YulLiteral","src":"18704:26:11","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"shl","nativeSrc":"18695:3:11","nodeType":"YulIdentifier","src":"18695:3:11"},"nativeSrc":"18695:36:11","nodeType":"YulFunctionCall","src":"18695:36:11"}],"functionName":{"name":"and","nativeSrc":"18678:3:11","nodeType":"YulIdentifier","src":"18678:3:11"},"nativeSrc":"18678:54:11","nodeType":"YulFunctionCall","src":"18678:54:11"},{"arguments":[{"name":"value","nativeSrc":"18738:5:11","nodeType":"YulIdentifier","src":"18738:5:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"18753:3:11","nodeType":"YulLiteral","src":"18753:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"18758:1:11","nodeType":"YulLiteral","src":"18758:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"18749:3:11","nodeType":"YulIdentifier","src":"18749:3:11"},"nativeSrc":"18749:11:11","nodeType":"YulFunctionCall","src":"18749:11:11"},{"kind":"number","nativeSrc":"18762:1:11","nodeType":"YulLiteral","src":"18762:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"18745:3:11","nodeType":"YulIdentifier","src":"18745:3:11"},"nativeSrc":"18745:19:11","nodeType":"YulFunctionCall","src":"18745:19:11"}],"functionName":{"name":"and","nativeSrc":"18734:3:11","nodeType":"YulIdentifier","src":"18734:3:11"},"nativeSrc":"18734:31:11","nodeType":"YulFunctionCall","src":"18734:31:11"}],"functionName":{"name":"or","nativeSrc":"18675:2:11","nodeType":"YulIdentifier","src":"18675:2:11"},"nativeSrc":"18675:91:11","nodeType":"YulFunctionCall","src":"18675:91:11"}],"functionName":{"name":"sstore","nativeSrc":"18662:6:11","nodeType":"YulIdentifier","src":"18662:6:11"},"nativeSrc":"18662:105:11","nodeType":"YulFunctionCall","src":"18662:105:11"},"nativeSrc":"18662:105:11","nodeType":"YulExpressionStatement","src":"18662:105:11"}]},"name":"update_storage_value_offsett_address_to_address","nativeSrc":"18578:195:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"18635:4:11","nodeType":"YulTypedName","src":"18635:4:11","type":""},{"name":"value","nativeSrc":"18641:5:11","nodeType":"YulTypedName","src":"18641:5:11","type":""}],"src":"18578:195:11"},{"body":{"nativeSrc":"18838:114:11","nodeType":"YulBlock","src":"18838:114:11","statements":[{"nativeSrc":"18848:30:11","nodeType":"YulVariableDeclaration","src":"18848:30:11","value":{"arguments":[{"name":"ptr","nativeSrc":"18874:3:11","nodeType":"YulIdentifier","src":"18874:3:11"}],"functionName":{"name":"calldataload","nativeSrc":"18861:12:11","nodeType":"YulIdentifier","src":"18861:12:11"},"nativeSrc":"18861:17:11","nodeType":"YulFunctionCall","src":"18861:17:11"},"variables":[{"name":"value","nativeSrc":"18852:5:11","nodeType":"YulTypedName","src":"18852:5:11","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"18911:5:11","nodeType":"YulIdentifier","src":"18911:5:11"}],"functionName":{"name":"validator_revert_uint32","nativeSrc":"18887:23:11","nodeType":"YulIdentifier","src":"18887:23:11"},"nativeSrc":"18887:30:11","nodeType":"YulFunctionCall","src":"18887:30:11"},"nativeSrc":"18887:30:11","nodeType":"YulExpressionStatement","src":"18887:30:11"},{"nativeSrc":"18926:20:11","nodeType":"YulAssignment","src":"18926:20:11","value":{"name":"value","nativeSrc":"18941:5:11","nodeType":"YulIdentifier","src":"18941:5:11"},"variableNames":[{"name":"returnValue","nativeSrc":"18926:11:11","nodeType":"YulIdentifier","src":"18926:11:11"}]}]},"name":"read_from_calldatat_uint32","nativeSrc":"18778:174:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"18814:3:11","nodeType":"YulTypedName","src":"18814:3:11","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"18822:11:11","nodeType":"YulTypedName","src":"18822:11:11","type":""}],"src":"18778:174:11"},{"body":{"nativeSrc":"19029:153:11","nodeType":"YulBlock","src":"19029:153:11","statements":[{"nativeSrc":"19039:21:11","nodeType":"YulVariableDeclaration","src":"19039:21:11","value":{"arguments":[{"name":"slot","nativeSrc":"19055:4:11","nodeType":"YulIdentifier","src":"19055:4:11"}],"functionName":{"name":"sload","nativeSrc":"19049:5:11","nodeType":"YulIdentifier","src":"19049:5:11"},"nativeSrc":"19049:11:11","nodeType":"YulFunctionCall","src":"19049:11:11"},"variables":[{"name":"_1","nativeSrc":"19043:2:11","nodeType":"YulTypedName","src":"19043:2:11","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"19076:4:11","nodeType":"YulIdentifier","src":"19076:4:11"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"19089:2:11","nodeType":"YulIdentifier","src":"19089:2:11"},{"arguments":[{"kind":"number","nativeSrc":"19097:26:11","nodeType":"YulLiteral","src":"19097:26:11","type":"","value":"0xffffffff0000000000000000"}],"functionName":{"name":"not","nativeSrc":"19093:3:11","nodeType":"YulIdentifier","src":"19093:3:11"},"nativeSrc":"19093:31:11","nodeType":"YulFunctionCall","src":"19093:31:11"}],"functionName":{"name":"and","nativeSrc":"19085:3:11","nodeType":"YulIdentifier","src":"19085:3:11"},"nativeSrc":"19085:40:11","nodeType":"YulFunctionCall","src":"19085:40:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"19135:2:11","nodeType":"YulLiteral","src":"19135:2:11","type":"","value":"64"},{"name":"value","nativeSrc":"19139:5:11","nodeType":"YulIdentifier","src":"19139:5:11"}],"functionName":{"name":"shl","nativeSrc":"19131:3:11","nodeType":"YulIdentifier","src":"19131:3:11"},"nativeSrc":"19131:14:11","nodeType":"YulFunctionCall","src":"19131:14:11"},{"kind":"number","nativeSrc":"19147:26:11","nodeType":"YulLiteral","src":"19147:26:11","type":"","value":"0xffffffff0000000000000000"}],"functionName":{"name":"and","nativeSrc":"19127:3:11","nodeType":"YulIdentifier","src":"19127:3:11"},"nativeSrc":"19127:47:11","nodeType":"YulFunctionCall","src":"19127:47:11"}],"functionName":{"name":"or","nativeSrc":"19082:2:11","nodeType":"YulIdentifier","src":"19082:2:11"},"nativeSrc":"19082:93:11","nodeType":"YulFunctionCall","src":"19082:93:11"}],"functionName":{"name":"sstore","nativeSrc":"19069:6:11","nodeType":"YulIdentifier","src":"19069:6:11"},"nativeSrc":"19069:107:11","nodeType":"YulFunctionCall","src":"19069:107:11"},"nativeSrc":"19069:107:11","nodeType":"YulExpressionStatement","src":"19069:107:11"}]},"name":"update_storage_value_offsett_uint32_to_uint32","nativeSrc":"18957:225:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"19012:4:11","nodeType":"YulTypedName","src":"19012:4:11","type":""},{"name":"value","nativeSrc":"19018:5:11","nodeType":"YulTypedName","src":"19018:5:11","type":""}],"src":"18957:225:11"},{"body":{"nativeSrc":"19242:65:11","nodeType":"YulBlock","src":"19242:65:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19259:1:11","nodeType":"YulLiteral","src":"19259:1:11","type":"","value":"0"},{"name":"ptr","nativeSrc":"19262:3:11","nodeType":"YulIdentifier","src":"19262:3:11"}],"functionName":{"name":"mstore","nativeSrc":"19252:6:11","nodeType":"YulIdentifier","src":"19252:6:11"},"nativeSrc":"19252:14:11","nodeType":"YulFunctionCall","src":"19252:14:11"},"nativeSrc":"19252:14:11","nodeType":"YulExpressionStatement","src":"19252:14:11"},{"nativeSrc":"19275:26:11","nodeType":"YulAssignment","src":"19275:26:11","value":{"arguments":[{"kind":"number","nativeSrc":"19293:1:11","nodeType":"YulLiteral","src":"19293:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"19296:4:11","nodeType":"YulLiteral","src":"19296:4:11","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"19283:9:11","nodeType":"YulIdentifier","src":"19283:9:11"},"nativeSrc":"19283:18:11","nodeType":"YulFunctionCall","src":"19283:18:11"},"variableNames":[{"name":"data","nativeSrc":"19275:4:11","nodeType":"YulIdentifier","src":"19275:4:11"}]}]},"name":"array_dataslot_bytes_storage","nativeSrc":"19187:120:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"19225:3:11","nodeType":"YulTypedName","src":"19225:3:11","type":""}],"returnVariables":[{"name":"data","nativeSrc":"19233:4:11","nodeType":"YulTypedName","src":"19233:4:11","type":""}],"src":"19187:120:11"},{"body":{"nativeSrc":"19392:462:11","nodeType":"YulBlock","src":"19392:462:11","statements":[{"body":{"nativeSrc":"19425:423:11","nodeType":"YulBlock","src":"19425:423:11","statements":[{"nativeSrc":"19439:11:11","nodeType":"YulVariableDeclaration","src":"19439:11:11","value":{"kind":"number","nativeSrc":"19449:1:11","nodeType":"YulLiteral","src":"19449:1:11","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"19443:2:11","nodeType":"YulTypedName","src":"19443:2:11","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19470:1:11","nodeType":"YulLiteral","src":"19470:1:11","type":"","value":"0"},{"name":"array","nativeSrc":"19473:5:11","nodeType":"YulIdentifier","src":"19473:5:11"}],"functionName":{"name":"mstore","nativeSrc":"19463:6:11","nodeType":"YulIdentifier","src":"19463:6:11"},"nativeSrc":"19463:16:11","nodeType":"YulFunctionCall","src":"19463:16:11"},"nativeSrc":"19463:16:11","nodeType":"YulExpressionStatement","src":"19463:16:11"},{"nativeSrc":"19492:30:11","nodeType":"YulVariableDeclaration","src":"19492:30:11","value":{"arguments":[{"kind":"number","nativeSrc":"19514:1:11","nodeType":"YulLiteral","src":"19514:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"19517:4:11","nodeType":"YulLiteral","src":"19517:4:11","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"19504:9:11","nodeType":"YulIdentifier","src":"19504:9:11"},"nativeSrc":"19504:18:11","nodeType":"YulFunctionCall","src":"19504:18:11"},"variables":[{"name":"data","nativeSrc":"19496:4:11","nodeType":"YulTypedName","src":"19496:4:11","type":""}]},{"nativeSrc":"19535:57:11","nodeType":"YulVariableDeclaration","src":"19535:57:11","value":{"arguments":[{"name":"data","nativeSrc":"19558:4:11","nodeType":"YulIdentifier","src":"19558:4:11"},{"arguments":[{"kind":"number","nativeSrc":"19568:1:11","nodeType":"YulLiteral","src":"19568:1:11","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"19575:10:11","nodeType":"YulIdentifier","src":"19575:10:11"},{"kind":"number","nativeSrc":"19587:2:11","nodeType":"YulLiteral","src":"19587:2:11","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"19571:3:11","nodeType":"YulIdentifier","src":"19571:3:11"},"nativeSrc":"19571:19:11","nodeType":"YulFunctionCall","src":"19571:19:11"}],"functionName":{"name":"shr","nativeSrc":"19564:3:11","nodeType":"YulIdentifier","src":"19564:3:11"},"nativeSrc":"19564:27:11","nodeType":"YulFunctionCall","src":"19564:27:11"}],"functionName":{"name":"add","nativeSrc":"19554:3:11","nodeType":"YulIdentifier","src":"19554:3:11"},"nativeSrc":"19554:38:11","nodeType":"YulFunctionCall","src":"19554:38:11"},"variables":[{"name":"deleteStart","nativeSrc":"19539:11:11","nodeType":"YulTypedName","src":"19539:11:11","type":""}]},{"body":{"nativeSrc":"19629:23:11","nodeType":"YulBlock","src":"19629:23:11","statements":[{"nativeSrc":"19631:19:11","nodeType":"YulAssignment","src":"19631:19:11","value":{"name":"data","nativeSrc":"19646:4:11","nodeType":"YulIdentifier","src":"19646:4:11"},"variableNames":[{"name":"deleteStart","nativeSrc":"19631:11:11","nodeType":"YulIdentifier","src":"19631:11:11"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"19611:10:11","nodeType":"YulIdentifier","src":"19611:10:11"},{"kind":"number","nativeSrc":"19623:4:11","nodeType":"YulLiteral","src":"19623:4:11","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"19608:2:11","nodeType":"YulIdentifier","src":"19608:2:11"},"nativeSrc":"19608:20:11","nodeType":"YulFunctionCall","src":"19608:20:11"},"nativeSrc":"19605:47:11","nodeType":"YulIf","src":"19605:47:11"},{"nativeSrc":"19665:41:11","nodeType":"YulVariableDeclaration","src":"19665:41:11","value":{"arguments":[{"name":"data","nativeSrc":"19679:4:11","nodeType":"YulIdentifier","src":"19679:4:11"},{"arguments":[{"kind":"number","nativeSrc":"19689:1:11","nodeType":"YulLiteral","src":"19689:1:11","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"19696:3:11","nodeType":"YulIdentifier","src":"19696:3:11"},{"kind":"number","nativeSrc":"19701:2:11","nodeType":"YulLiteral","src":"19701:2:11","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"19692:3:11","nodeType":"YulIdentifier","src":"19692:3:11"},"nativeSrc":"19692:12:11","nodeType":"YulFunctionCall","src":"19692:12:11"}],"functionName":{"name":"shr","nativeSrc":"19685:3:11","nodeType":"YulIdentifier","src":"19685:3:11"},"nativeSrc":"19685:20:11","nodeType":"YulFunctionCall","src":"19685:20:11"}],"functionName":{"name":"add","nativeSrc":"19675:3:11","nodeType":"YulIdentifier","src":"19675:3:11"},"nativeSrc":"19675:31:11","nodeType":"YulFunctionCall","src":"19675:31:11"},"variables":[{"name":"_2","nativeSrc":"19669:2:11","nodeType":"YulTypedName","src":"19669:2:11","type":""}]},{"nativeSrc":"19719:24:11","nodeType":"YulVariableDeclaration","src":"19719:24:11","value":{"name":"deleteStart","nativeSrc":"19732:11:11","nodeType":"YulIdentifier","src":"19732:11:11"},"variables":[{"name":"start","nativeSrc":"19723:5:11","nodeType":"YulTypedName","src":"19723:5:11","type":""}]},{"body":{"nativeSrc":"19817:21:11","nodeType":"YulBlock","src":"19817:21:11","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"19826:5:11","nodeType":"YulIdentifier","src":"19826:5:11"},{"name":"_1","nativeSrc":"19833:2:11","nodeType":"YulIdentifier","src":"19833:2:11"}],"functionName":{"name":"sstore","nativeSrc":"19819:6:11","nodeType":"YulIdentifier","src":"19819:6:11"},"nativeSrc":"19819:17:11","nodeType":"YulFunctionCall","src":"19819:17:11"},"nativeSrc":"19819:17:11","nodeType":"YulExpressionStatement","src":"19819:17:11"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"19767:5:11","nodeType":"YulIdentifier","src":"19767:5:11"},{"name":"_2","nativeSrc":"19774:2:11","nodeType":"YulIdentifier","src":"19774:2:11"}],"functionName":{"name":"lt","nativeSrc":"19764:2:11","nodeType":"YulIdentifier","src":"19764:2:11"},"nativeSrc":"19764:13:11","nodeType":"YulFunctionCall","src":"19764:13:11"},"nativeSrc":"19756:82:11","nodeType":"YulForLoop","post":{"nativeSrc":"19778:26:11","nodeType":"YulBlock","src":"19778:26:11","statements":[{"nativeSrc":"19780:22:11","nodeType":"YulAssignment","src":"19780:22:11","value":{"arguments":[{"name":"start","nativeSrc":"19793:5:11","nodeType":"YulIdentifier","src":"19793:5:11"},{"kind":"number","nativeSrc":"19800:1:11","nodeType":"YulLiteral","src":"19800:1:11","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"19789:3:11","nodeType":"YulIdentifier","src":"19789:3:11"},"nativeSrc":"19789:13:11","nodeType":"YulFunctionCall","src":"19789:13:11"},"variableNames":[{"name":"start","nativeSrc":"19780:5:11","nodeType":"YulIdentifier","src":"19780:5:11"}]}]},"pre":{"nativeSrc":"19760:3:11","nodeType":"YulBlock","src":"19760:3:11","statements":[]},"src":"19756:82:11"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"19408:3:11","nodeType":"YulIdentifier","src":"19408:3:11"},{"kind":"number","nativeSrc":"19413:2:11","nodeType":"YulLiteral","src":"19413:2:11","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"19405:2:11","nodeType":"YulIdentifier","src":"19405:2:11"},"nativeSrc":"19405:11:11","nodeType":"YulFunctionCall","src":"19405:11:11"},"nativeSrc":"19402:446:11","nodeType":"YulIf","src":"19402:446:11"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nativeSrc":"19312:542:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"19364:5:11","nodeType":"YulTypedName","src":"19364:5:11","type":""},{"name":"len","nativeSrc":"19371:3:11","nodeType":"YulTypedName","src":"19371:3:11","type":""},{"name":"startIndex","nativeSrc":"19376:10:11","nodeType":"YulTypedName","src":"19376:10:11","type":""}],"src":"19312:542:11"},{"body":{"nativeSrc":"19944:81:11","nodeType":"YulBlock","src":"19944:81:11","statements":[{"nativeSrc":"19954:65:11","nodeType":"YulAssignment","src":"19954:65:11","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"19969:4:11","nodeType":"YulIdentifier","src":"19969:4:11"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"19987:1:11","nodeType":"YulLiteral","src":"19987:1:11","type":"","value":"3"},{"name":"len","nativeSrc":"19990:3:11","nodeType":"YulIdentifier","src":"19990:3:11"}],"functionName":{"name":"shl","nativeSrc":"19983:3:11","nodeType":"YulIdentifier","src":"19983:3:11"},"nativeSrc":"19983:11:11","nodeType":"YulFunctionCall","src":"19983:11:11"},{"arguments":[{"kind":"number","nativeSrc":"20000:1:11","nodeType":"YulLiteral","src":"20000:1:11","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"19996:3:11","nodeType":"YulIdentifier","src":"19996:3:11"},"nativeSrc":"19996:6:11","nodeType":"YulFunctionCall","src":"19996:6:11"}],"functionName":{"name":"shr","nativeSrc":"19979:3:11","nodeType":"YulIdentifier","src":"19979:3:11"},"nativeSrc":"19979:24:11","nodeType":"YulFunctionCall","src":"19979:24:11"}],"functionName":{"name":"not","nativeSrc":"19975:3:11","nodeType":"YulIdentifier","src":"19975:3:11"},"nativeSrc":"19975:29:11","nodeType":"YulFunctionCall","src":"19975:29:11"}],"functionName":{"name":"and","nativeSrc":"19965:3:11","nodeType":"YulIdentifier","src":"19965:3:11"},"nativeSrc":"19965:40:11","nodeType":"YulFunctionCall","src":"19965:40:11"},{"arguments":[{"kind":"number","nativeSrc":"20011:1:11","nodeType":"YulLiteral","src":"20011:1:11","type":"","value":"1"},{"name":"len","nativeSrc":"20014:3:11","nodeType":"YulIdentifier","src":"20014:3:11"}],"functionName":{"name":"shl","nativeSrc":"20007:3:11","nodeType":"YulIdentifier","src":"20007:3:11"},"nativeSrc":"20007:11:11","nodeType":"YulFunctionCall","src":"20007:11:11"}],"functionName":{"name":"or","nativeSrc":"19962:2:11","nodeType":"YulIdentifier","src":"19962:2:11"},"nativeSrc":"19962:57:11","nodeType":"YulFunctionCall","src":"19962:57:11"},"variableNames":[{"name":"used","nativeSrc":"19954:4:11","nodeType":"YulIdentifier","src":"19954:4:11"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"19859:166:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"19921:4:11","nodeType":"YulTypedName","src":"19921:4:11","type":""},{"name":"len","nativeSrc":"19927:3:11","nodeType":"YulTypedName","src":"19927:3:11","type":""}],"returnVariables":[{"name":"used","nativeSrc":"19935:4:11","nodeType":"YulTypedName","src":"19935:4:11","type":""}],"src":"19859:166:11"},{"body":{"nativeSrc":"20115:1101:11","nodeType":"YulBlock","src":"20115:1101:11","statements":[{"body":{"nativeSrc":"20156:22:11","nodeType":"YulBlock","src":"20156:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"20158:16:11","nodeType":"YulIdentifier","src":"20158:16:11"},"nativeSrc":"20158:18:11","nodeType":"YulFunctionCall","src":"20158:18:11"},"nativeSrc":"20158:18:11","nodeType":"YulExpressionStatement","src":"20158:18:11"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"20131:3:11","nodeType":"YulIdentifier","src":"20131:3:11"},{"kind":"number","nativeSrc":"20136:18:11","nodeType":"YulLiteral","src":"20136:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"20128:2:11","nodeType":"YulIdentifier","src":"20128:2:11"},"nativeSrc":"20128:27:11","nodeType":"YulFunctionCall","src":"20128:27:11"},"nativeSrc":"20125:53:11","nodeType":"YulIf","src":"20125:53:11"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"20230:4:11","nodeType":"YulIdentifier","src":"20230:4:11"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"20268:4:11","nodeType":"YulIdentifier","src":"20268:4:11"}],"functionName":{"name":"sload","nativeSrc":"20262:5:11","nodeType":"YulIdentifier","src":"20262:5:11"},"nativeSrc":"20262:11:11","nodeType":"YulFunctionCall","src":"20262:11:11"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"20236:25:11","nodeType":"YulIdentifier","src":"20236:25:11"},"nativeSrc":"20236:38:11","nodeType":"YulFunctionCall","src":"20236:38:11"},{"name":"len","nativeSrc":"20276:3:11","nodeType":"YulIdentifier","src":"20276:3:11"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nativeSrc":"20187:42:11","nodeType":"YulIdentifier","src":"20187:42:11"},"nativeSrc":"20187:93:11","nodeType":"YulFunctionCall","src":"20187:93:11"},"nativeSrc":"20187:93:11","nodeType":"YulExpressionStatement","src":"20187:93:11"},{"nativeSrc":"20289:18:11","nodeType":"YulVariableDeclaration","src":"20289:18:11","value":{"kind":"number","nativeSrc":"20306:1:11","nodeType":"YulLiteral","src":"20306:1:11","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"20293:9:11","nodeType":"YulTypedName","src":"20293:9:11","type":""}]},{"cases":[{"body":{"nativeSrc":"20350:608:11","nodeType":"YulBlock","src":"20350:608:11","statements":[{"nativeSrc":"20364:32:11","nodeType":"YulVariableDeclaration","src":"20364:32:11","value":{"arguments":[{"name":"len","nativeSrc":"20383:3:11","nodeType":"YulIdentifier","src":"20383:3:11"},{"arguments":[{"kind":"number","nativeSrc":"20392:2:11","nodeType":"YulLiteral","src":"20392:2:11","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"20388:3:11","nodeType":"YulIdentifier","src":"20388:3:11"},"nativeSrc":"20388:7:11","nodeType":"YulFunctionCall","src":"20388:7:11"}],"functionName":{"name":"and","nativeSrc":"20379:3:11","nodeType":"YulIdentifier","src":"20379:3:11"},"nativeSrc":"20379:17:11","nodeType":"YulFunctionCall","src":"20379:17:11"},"variables":[{"name":"loopEnd","nativeSrc":"20368:7:11","nodeType":"YulTypedName","src":"20368:7:11","type":""}]},{"nativeSrc":"20409:48:11","nodeType":"YulVariableDeclaration","src":"20409:48:11","value":{"arguments":[{"name":"slot","nativeSrc":"20452:4:11","nodeType":"YulIdentifier","src":"20452:4:11"}],"functionName":{"name":"array_dataslot_bytes_storage","nativeSrc":"20423:28:11","nodeType":"YulIdentifier","src":"20423:28:11"},"nativeSrc":"20423:34:11","nodeType":"YulFunctionCall","src":"20423:34:11"},"variables":[{"name":"dstPtr","nativeSrc":"20413:6:11","nodeType":"YulTypedName","src":"20413:6:11","type":""}]},{"nativeSrc":"20470:18:11","nodeType":"YulVariableDeclaration","src":"20470:18:11","value":{"name":"srcOffset","nativeSrc":"20479:9:11","nodeType":"YulIdentifier","src":"20479:9:11"},"variables":[{"name":"i","nativeSrc":"20474:1:11","nodeType":"YulTypedName","src":"20474:1:11","type":""}]},{"body":{"nativeSrc":"20558:172:11","nodeType":"YulBlock","src":"20558:172:11","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"20583:6:11","nodeType":"YulIdentifier","src":"20583:6:11"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"20608:3:11","nodeType":"YulIdentifier","src":"20608:3:11"},{"name":"srcOffset","nativeSrc":"20613:9:11","nodeType":"YulIdentifier","src":"20613:9:11"}],"functionName":{"name":"add","nativeSrc":"20604:3:11","nodeType":"YulIdentifier","src":"20604:3:11"},"nativeSrc":"20604:19:11","nodeType":"YulFunctionCall","src":"20604:19:11"}],"functionName":{"name":"calldataload","nativeSrc":"20591:12:11","nodeType":"YulIdentifier","src":"20591:12:11"},"nativeSrc":"20591:33:11","nodeType":"YulFunctionCall","src":"20591:33:11"}],"functionName":{"name":"sstore","nativeSrc":"20576:6:11","nodeType":"YulIdentifier","src":"20576:6:11"},"nativeSrc":"20576:49:11","nodeType":"YulFunctionCall","src":"20576:49:11"},"nativeSrc":"20576:49:11","nodeType":"YulExpressionStatement","src":"20576:49:11"},{"nativeSrc":"20642:24:11","nodeType":"YulAssignment","src":"20642:24:11","value":{"arguments":[{"name":"dstPtr","nativeSrc":"20656:6:11","nodeType":"YulIdentifier","src":"20656:6:11"},{"kind":"number","nativeSrc":"20664:1:11","nodeType":"YulLiteral","src":"20664:1:11","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"20652:3:11","nodeType":"YulIdentifier","src":"20652:3:11"},"nativeSrc":"20652:14:11","nodeType":"YulFunctionCall","src":"20652:14:11"},"variableNames":[{"name":"dstPtr","nativeSrc":"20642:6:11","nodeType":"YulIdentifier","src":"20642:6:11"}]},{"nativeSrc":"20683:33:11","nodeType":"YulAssignment","src":"20683:33:11","value":{"arguments":[{"name":"srcOffset","nativeSrc":"20700:9:11","nodeType":"YulIdentifier","src":"20700:9:11"},{"kind":"number","nativeSrc":"20711:4:11","nodeType":"YulLiteral","src":"20711:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"20696:3:11","nodeType":"YulIdentifier","src":"20696:3:11"},"nativeSrc":"20696:20:11","nodeType":"YulFunctionCall","src":"20696:20:11"},"variableNames":[{"name":"srcOffset","nativeSrc":"20683:9:11","nodeType":"YulIdentifier","src":"20683:9:11"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"20512:1:11","nodeType":"YulIdentifier","src":"20512:1:11"},{"name":"loopEnd","nativeSrc":"20515:7:11","nodeType":"YulIdentifier","src":"20515:7:11"}],"functionName":{"name":"lt","nativeSrc":"20509:2:11","nodeType":"YulIdentifier","src":"20509:2:11"},"nativeSrc":"20509:14:11","nodeType":"YulFunctionCall","src":"20509:14:11"},"nativeSrc":"20501:229:11","nodeType":"YulForLoop","post":{"nativeSrc":"20524:21:11","nodeType":"YulBlock","src":"20524:21:11","statements":[{"nativeSrc":"20526:17:11","nodeType":"YulAssignment","src":"20526:17:11","value":{"arguments":[{"name":"i","nativeSrc":"20535:1:11","nodeType":"YulIdentifier","src":"20535:1:11"},{"kind":"number","nativeSrc":"20538:4:11","nodeType":"YulLiteral","src":"20538:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"20531:3:11","nodeType":"YulIdentifier","src":"20531:3:11"},"nativeSrc":"20531:12:11","nodeType":"YulFunctionCall","src":"20531:12:11"},"variableNames":[{"name":"i","nativeSrc":"20526:1:11","nodeType":"YulIdentifier","src":"20526:1:11"}]}]},"pre":{"nativeSrc":"20505:3:11","nodeType":"YulBlock","src":"20505:3:11","statements":[]},"src":"20501:229:11"},{"body":{"nativeSrc":"20775:127:11","nodeType":"YulBlock","src":"20775:127:11","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"20800:6:11","nodeType":"YulIdentifier","src":"20800:6:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nativeSrc":"20829:3:11","nodeType":"YulIdentifier","src":"20829:3:11"},{"name":"srcOffset","nativeSrc":"20834:9:11","nodeType":"YulIdentifier","src":"20834:9:11"}],"functionName":{"name":"add","nativeSrc":"20825:3:11","nodeType":"YulIdentifier","src":"20825:3:11"},"nativeSrc":"20825:19:11","nodeType":"YulFunctionCall","src":"20825:19:11"}],"functionName":{"name":"calldataload","nativeSrc":"20812:12:11","nodeType":"YulIdentifier","src":"20812:12:11"},"nativeSrc":"20812:33:11","nodeType":"YulFunctionCall","src":"20812:33:11"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"20863:1:11","nodeType":"YulLiteral","src":"20863:1:11","type":"","value":"3"},{"name":"len","nativeSrc":"20866:3:11","nodeType":"YulIdentifier","src":"20866:3:11"}],"functionName":{"name":"shl","nativeSrc":"20859:3:11","nodeType":"YulIdentifier","src":"20859:3:11"},"nativeSrc":"20859:11:11","nodeType":"YulFunctionCall","src":"20859:11:11"},{"kind":"number","nativeSrc":"20872:3:11","nodeType":"YulLiteral","src":"20872:3:11","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"20855:3:11","nodeType":"YulIdentifier","src":"20855:3:11"},"nativeSrc":"20855:21:11","nodeType":"YulFunctionCall","src":"20855:21:11"},{"arguments":[{"kind":"number","nativeSrc":"20882:1:11","nodeType":"YulLiteral","src":"20882:1:11","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"20878:3:11","nodeType":"YulIdentifier","src":"20878:3:11"},"nativeSrc":"20878:6:11","nodeType":"YulFunctionCall","src":"20878:6:11"}],"functionName":{"name":"shr","nativeSrc":"20851:3:11","nodeType":"YulIdentifier","src":"20851:3:11"},"nativeSrc":"20851:34:11","nodeType":"YulFunctionCall","src":"20851:34:11"}],"functionName":{"name":"not","nativeSrc":"20847:3:11","nodeType":"YulIdentifier","src":"20847:3:11"},"nativeSrc":"20847:39:11","nodeType":"YulFunctionCall","src":"20847:39:11"}],"functionName":{"name":"and","nativeSrc":"20808:3:11","nodeType":"YulIdentifier","src":"20808:3:11"},"nativeSrc":"20808:79:11","nodeType":"YulFunctionCall","src":"20808:79:11"}],"functionName":{"name":"sstore","nativeSrc":"20793:6:11","nodeType":"YulIdentifier","src":"20793:6:11"},"nativeSrc":"20793:95:11","nodeType":"YulFunctionCall","src":"20793:95:11"},"nativeSrc":"20793:95:11","nodeType":"YulExpressionStatement","src":"20793:95:11"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"20749:7:11","nodeType":"YulIdentifier","src":"20749:7:11"},{"name":"len","nativeSrc":"20758:3:11","nodeType":"YulIdentifier","src":"20758:3:11"}],"functionName":{"name":"lt","nativeSrc":"20746:2:11","nodeType":"YulIdentifier","src":"20746:2:11"},"nativeSrc":"20746:16:11","nodeType":"YulFunctionCall","src":"20746:16:11"},"nativeSrc":"20743:159:11","nodeType":"YulIf","src":"20743:159:11"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"20922:4:11","nodeType":"YulIdentifier","src":"20922:4:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"20936:1:11","nodeType":"YulLiteral","src":"20936:1:11","type":"","value":"1"},{"name":"len","nativeSrc":"20939:3:11","nodeType":"YulIdentifier","src":"20939:3:11"}],"functionName":{"name":"shl","nativeSrc":"20932:3:11","nodeType":"YulIdentifier","src":"20932:3:11"},"nativeSrc":"20932:11:11","nodeType":"YulFunctionCall","src":"20932:11:11"},{"kind":"number","nativeSrc":"20945:1:11","nodeType":"YulLiteral","src":"20945:1:11","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"20928:3:11","nodeType":"YulIdentifier","src":"20928:3:11"},"nativeSrc":"20928:19:11","nodeType":"YulFunctionCall","src":"20928:19:11"}],"functionName":{"name":"sstore","nativeSrc":"20915:6:11","nodeType":"YulIdentifier","src":"20915:6:11"},"nativeSrc":"20915:33:11","nodeType":"YulFunctionCall","src":"20915:33:11"},"nativeSrc":"20915:33:11","nodeType":"YulExpressionStatement","src":"20915:33:11"}]},"nativeSrc":"20343:615:11","nodeType":"YulCase","src":"20343:615:11","value":{"kind":"number","nativeSrc":"20348:1:11","nodeType":"YulLiteral","src":"20348:1:11","type":"","value":"1"}},{"body":{"nativeSrc":"20975:235:11","nodeType":"YulBlock","src":"20975:235:11","statements":[{"nativeSrc":"20989:14:11","nodeType":"YulVariableDeclaration","src":"20989:14:11","value":{"kind":"number","nativeSrc":"21002:1:11","nodeType":"YulLiteral","src":"21002:1:11","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"20993:5:11","nodeType":"YulTypedName","src":"20993:5:11","type":""}]},{"body":{"nativeSrc":"21035:74:11","nodeType":"YulBlock","src":"21035:74:11","statements":[{"nativeSrc":"21053:42:11","nodeType":"YulAssignment","src":"21053:42:11","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"21079:3:11","nodeType":"YulIdentifier","src":"21079:3:11"},{"name":"srcOffset","nativeSrc":"21084:9:11","nodeType":"YulIdentifier","src":"21084:9:11"}],"functionName":{"name":"add","nativeSrc":"21075:3:11","nodeType":"YulIdentifier","src":"21075:3:11"},"nativeSrc":"21075:19:11","nodeType":"YulFunctionCall","src":"21075:19:11"}],"functionName":{"name":"calldataload","nativeSrc":"21062:12:11","nodeType":"YulIdentifier","src":"21062:12:11"},"nativeSrc":"21062:33:11","nodeType":"YulFunctionCall","src":"21062:33:11"},"variableNames":[{"name":"value","nativeSrc":"21053:5:11","nodeType":"YulIdentifier","src":"21053:5:11"}]}]},"condition":{"name":"len","nativeSrc":"21019:3:11","nodeType":"YulIdentifier","src":"21019:3:11"},"nativeSrc":"21016:93:11","nodeType":"YulIf","src":"21016:93:11"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"21129:4:11","nodeType":"YulIdentifier","src":"21129:4:11"},{"arguments":[{"name":"value","nativeSrc":"21188:5:11","nodeType":"YulIdentifier","src":"21188:5:11"},{"name":"len","nativeSrc":"21195:3:11","nodeType":"YulIdentifier","src":"21195:3:11"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"21135:52:11","nodeType":"YulIdentifier","src":"21135:52:11"},"nativeSrc":"21135:64:11","nodeType":"YulFunctionCall","src":"21135:64:11"}],"functionName":{"name":"sstore","nativeSrc":"21122:6:11","nodeType":"YulIdentifier","src":"21122:6:11"},"nativeSrc":"21122:78:11","nodeType":"YulFunctionCall","src":"21122:78:11"},"nativeSrc":"21122:78:11","nodeType":"YulExpressionStatement","src":"21122:78:11"}]},"nativeSrc":"20967:243:11","nodeType":"YulCase","src":"20967:243:11","value":"default"}],"expression":{"arguments":[{"name":"len","nativeSrc":"20326:3:11","nodeType":"YulIdentifier","src":"20326:3:11"},{"kind":"number","nativeSrc":"20331:2:11","nodeType":"YulLiteral","src":"20331:2:11","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"20323:2:11","nodeType":"YulIdentifier","src":"20323:2:11"},"nativeSrc":"20323:11:11","nodeType":"YulFunctionCall","src":"20323:11:11"},"nativeSrc":"20316:894:11","nodeType":"YulSwitch","src":"20316:894:11"}]},"name":"copy_byte_array_to_storage_from_bytes_calldata_to_bytes","nativeSrc":"20030:1186:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"20095:4:11","nodeType":"YulTypedName","src":"20095:4:11","type":""},{"name":"src","nativeSrc":"20101:3:11","nodeType":"YulTypedName","src":"20101:3:11","type":""},{"name":"len","nativeSrc":"20106:3:11","nodeType":"YulTypedName","src":"20106:3:11","type":""}],"src":"20030:1186:11"},{"body":{"nativeSrc":"21364:1120:11","nodeType":"YulBlock","src":"21364:1120:11","statements":[{"nativeSrc":"21374:34:11","nodeType":"YulVariableDeclaration","src":"21374:34:11","value":{"arguments":[{"name":"value","nativeSrc":"21402:5:11","nodeType":"YulIdentifier","src":"21402:5:11"}],"functionName":{"name":"calldataload","nativeSrc":"21389:12:11","nodeType":"YulIdentifier","src":"21389:12:11"},"nativeSrc":"21389:19:11","nodeType":"YulFunctionCall","src":"21389:19:11"},"variables":[{"name":"value_1","nativeSrc":"21378:7:11","nodeType":"YulTypedName","src":"21378:7:11","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"21442:7:11","nodeType":"YulIdentifier","src":"21442:7:11"}],"functionName":{"name":"validator_revert_address","nativeSrc":"21417:24:11","nodeType":"YulIdentifier","src":"21417:24:11"},"nativeSrc":"21417:33:11","nodeType":"YulFunctionCall","src":"21417:33:11"},"nativeSrc":"21417:33:11","nodeType":"YulExpressionStatement","src":"21417:33:11"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"21507:4:11","nodeType":"YulIdentifier","src":"21507:4:11"},{"name":"value_1","nativeSrc":"21513:7:11","nodeType":"YulIdentifier","src":"21513:7:11"}],"functionName":{"name":"update_storage_value_offsett_address_to_address","nativeSrc":"21459:47:11","nodeType":"YulIdentifier","src":"21459:47:11"},"nativeSrc":"21459:62:11","nodeType":"YulFunctionCall","src":"21459:62:11"},"nativeSrc":"21459:62:11","nodeType":"YulExpressionStatement","src":"21459:62:11"},{"nativeSrc":"21530:43:11","nodeType":"YulVariableDeclaration","src":"21530:43:11","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21562:5:11","nodeType":"YulIdentifier","src":"21562:5:11"},{"kind":"number","nativeSrc":"21569:2:11","nodeType":"YulLiteral","src":"21569:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21558:3:11","nodeType":"YulIdentifier","src":"21558:3:11"},"nativeSrc":"21558:14:11","nodeType":"YulFunctionCall","src":"21558:14:11"}],"functionName":{"name":"calldataload","nativeSrc":"21545:12:11","nodeType":"YulIdentifier","src":"21545:12:11"},"nativeSrc":"21545:28:11","nodeType":"YulFunctionCall","src":"21545:28:11"},"variables":[{"name":"value_2","nativeSrc":"21534:7:11","nodeType":"YulTypedName","src":"21534:7:11","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"21607:7:11","nodeType":"YulIdentifier","src":"21607:7:11"}],"functionName":{"name":"validator_revert_address","nativeSrc":"21582:24:11","nodeType":"YulIdentifier","src":"21582:24:11"},"nativeSrc":"21582:33:11","nodeType":"YulFunctionCall","src":"21582:33:11"},"nativeSrc":"21582:33:11","nodeType":"YulExpressionStatement","src":"21582:33:11"},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"21676:4:11","nodeType":"YulIdentifier","src":"21676:4:11"},{"kind":"number","nativeSrc":"21682:1:11","nodeType":"YulLiteral","src":"21682:1:11","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"21672:3:11","nodeType":"YulIdentifier","src":"21672:3:11"},"nativeSrc":"21672:12:11","nodeType":"YulFunctionCall","src":"21672:12:11"},{"name":"value_2","nativeSrc":"21686:7:11","nodeType":"YulIdentifier","src":"21686:7:11"}],"functionName":{"name":"update_storage_value_offsett_address_to_address","nativeSrc":"21624:47:11","nodeType":"YulIdentifier","src":"21624:47:11"},"nativeSrc":"21624:70:11","nodeType":"YulFunctionCall","src":"21624:70:11"},"nativeSrc":"21624:70:11","nodeType":"YulExpressionStatement","src":"21624:70:11"},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"21714:4:11","nodeType":"YulIdentifier","src":"21714:4:11"},{"kind":"number","nativeSrc":"21720:1:11","nodeType":"YulLiteral","src":"21720:1:11","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"21710:3:11","nodeType":"YulIdentifier","src":"21710:3:11"},"nativeSrc":"21710:12:11","nodeType":"YulFunctionCall","src":"21710:12:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21741:5:11","nodeType":"YulIdentifier","src":"21741:5:11"},{"kind":"number","nativeSrc":"21748:2:11","nodeType":"YulLiteral","src":"21748:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21737:3:11","nodeType":"YulIdentifier","src":"21737:3:11"},"nativeSrc":"21737:14:11","nodeType":"YulFunctionCall","src":"21737:14:11"}],"functionName":{"name":"calldataload","nativeSrc":"21724:12:11","nodeType":"YulIdentifier","src":"21724:12:11"},"nativeSrc":"21724:28:11","nodeType":"YulFunctionCall","src":"21724:28:11"}],"functionName":{"name":"sstore","nativeSrc":"21703:6:11","nodeType":"YulIdentifier","src":"21703:6:11"},"nativeSrc":"21703:50:11","nodeType":"YulFunctionCall","src":"21703:50:11"},"nativeSrc":"21703:50:11","nodeType":"YulExpressionStatement","src":"21703:50:11"},{"nativeSrc":"21762:30:11","nodeType":"YulVariableDeclaration","src":"21762:30:11","value":{"arguments":[{"name":"slot","nativeSrc":"21784:4:11","nodeType":"YulIdentifier","src":"21784:4:11"},{"kind":"number","nativeSrc":"21790:1:11","nodeType":"YulLiteral","src":"21790:1:11","type":"","value":"3"}],"functionName":{"name":"add","nativeSrc":"21780:3:11","nodeType":"YulIdentifier","src":"21780:3:11"},"nativeSrc":"21780:12:11","nodeType":"YulFunctionCall","src":"21780:12:11"},"variables":[{"name":"memberSlot","nativeSrc":"21766:10:11","nodeType":"YulTypedName","src":"21766:10:11","type":""}]},{"nativeSrc":"21801:43:11","nodeType":"YulVariableDeclaration","src":"21801:43:11","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21833:5:11","nodeType":"YulIdentifier","src":"21833:5:11"},{"kind":"number","nativeSrc":"21840:2:11","nodeType":"YulLiteral","src":"21840:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21829:3:11","nodeType":"YulIdentifier","src":"21829:3:11"},"nativeSrc":"21829:14:11","nodeType":"YulFunctionCall","src":"21829:14:11"}],"functionName":{"name":"calldataload","nativeSrc":"21816:12:11","nodeType":"YulIdentifier","src":"21816:12:11"},"nativeSrc":"21816:28:11","nodeType":"YulFunctionCall","src":"21816:28:11"},"variables":[{"name":"value_3","nativeSrc":"21805:7:11","nodeType":"YulTypedName","src":"21805:7:11","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"21877:7:11","nodeType":"YulIdentifier","src":"21877:7:11"}],"functionName":{"name":"validator_revert_uint32","nativeSrc":"21853:23:11","nodeType":"YulIdentifier","src":"21853:23:11"},"nativeSrc":"21853:32:11","nodeType":"YulFunctionCall","src":"21853:32:11"},"nativeSrc":"21853:32:11","nodeType":"YulExpressionStatement","src":"21853:32:11"},{"nativeSrc":"21894:27:11","nodeType":"YulVariableDeclaration","src":"21894:27:11","value":{"arguments":[{"name":"memberSlot","nativeSrc":"21910:10:11","nodeType":"YulIdentifier","src":"21910:10:11"}],"functionName":{"name":"sload","nativeSrc":"21904:5:11","nodeType":"YulIdentifier","src":"21904:5:11"},"nativeSrc":"21904:17:11","nodeType":"YulFunctionCall","src":"21904:17:11"},"variables":[{"name":"_1","nativeSrc":"21898:2:11","nodeType":"YulTypedName","src":"21898:2:11","type":""}]},{"nativeSrc":"21930:44:11","nodeType":"YulVariableDeclaration","src":"21930:44:11","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21962:5:11","nodeType":"YulIdentifier","src":"21962:5:11"},{"kind":"number","nativeSrc":"21969:3:11","nodeType":"YulLiteral","src":"21969:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"21958:3:11","nodeType":"YulIdentifier","src":"21958:3:11"},"nativeSrc":"21958:15:11","nodeType":"YulFunctionCall","src":"21958:15:11"}],"functionName":{"name":"calldataload","nativeSrc":"21945:12:11","nodeType":"YulIdentifier","src":"21945:12:11"},"nativeSrc":"21945:29:11","nodeType":"YulFunctionCall","src":"21945:29:11"},"variables":[{"name":"value_4","nativeSrc":"21934:7:11","nodeType":"YulTypedName","src":"21934:7:11","type":""}]},{"expression":{"arguments":[{"name":"value_4","nativeSrc":"22007:7:11","nodeType":"YulIdentifier","src":"22007:7:11"}],"functionName":{"name":"validator_revert_uint32","nativeSrc":"21983:23:11","nodeType":"YulIdentifier","src":"21983:23:11"},"nativeSrc":"21983:32:11","nodeType":"YulFunctionCall","src":"21983:32:11"},"nativeSrc":"21983:32:11","nodeType":"YulExpressionStatement","src":"21983:32:11"},{"expression":{"arguments":[{"name":"memberSlot","nativeSrc":"22031:10:11","nodeType":"YulIdentifier","src":"22031:10:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"22053:2:11","nodeType":"YulIdentifier","src":"22053:2:11"},{"arguments":[{"kind":"number","nativeSrc":"22061:18:11","nodeType":"YulLiteral","src":"22061:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"not","nativeSrc":"22057:3:11","nodeType":"YulIdentifier","src":"22057:3:11"},"nativeSrc":"22057:23:11","nodeType":"YulFunctionCall","src":"22057:23:11"}],"functionName":{"name":"and","nativeSrc":"22049:3:11","nodeType":"YulIdentifier","src":"22049:3:11"},"nativeSrc":"22049:32:11","nodeType":"YulFunctionCall","src":"22049:32:11"},{"arguments":[{"name":"value_3","nativeSrc":"22087:7:11","nodeType":"YulIdentifier","src":"22087:7:11"},{"kind":"number","nativeSrc":"22096:10:11","nodeType":"YulLiteral","src":"22096:10:11","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"22083:3:11","nodeType":"YulIdentifier","src":"22083:3:11"},"nativeSrc":"22083:24:11","nodeType":"YulFunctionCall","src":"22083:24:11"}],"functionName":{"name":"or","nativeSrc":"22046:2:11","nodeType":"YulIdentifier","src":"22046:2:11"},"nativeSrc":"22046:62:11","nodeType":"YulFunctionCall","src":"22046:62:11"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"22118:2:11","nodeType":"YulLiteral","src":"22118:2:11","type":"","value":"32"},{"name":"value_4","nativeSrc":"22122:7:11","nodeType":"YulIdentifier","src":"22122:7:11"}],"functionName":{"name":"shl","nativeSrc":"22114:3:11","nodeType":"YulIdentifier","src":"22114:3:11"},"nativeSrc":"22114:16:11","nodeType":"YulFunctionCall","src":"22114:16:11"},{"kind":"number","nativeSrc":"22132:18:11","nodeType":"YulLiteral","src":"22132:18:11","type":"","value":"0xffffffff00000000"}],"functionName":{"name":"and","nativeSrc":"22110:3:11","nodeType":"YulIdentifier","src":"22110:3:11"},"nativeSrc":"22110:41:11","nodeType":"YulFunctionCall","src":"22110:41:11"}],"functionName":{"name":"or","nativeSrc":"22043:2:11","nodeType":"YulIdentifier","src":"22043:2:11"},"nativeSrc":"22043:109:11","nodeType":"YulFunctionCall","src":"22043:109:11"}],"functionName":{"name":"sstore","nativeSrc":"22024:6:11","nodeType":"YulIdentifier","src":"22024:6:11"},"nativeSrc":"22024:129:11","nodeType":"YulFunctionCall","src":"22024:129:11"},"nativeSrc":"22024:129:11","nodeType":"YulExpressionStatement","src":"22024:129:11"},{"expression":{"arguments":[{"name":"memberSlot","nativeSrc":"22208:10:11","nodeType":"YulIdentifier","src":"22208:10:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"22251:5:11","nodeType":"YulIdentifier","src":"22251:5:11"},{"kind":"number","nativeSrc":"22258:3:11","nodeType":"YulLiteral","src":"22258:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"22247:3:11","nodeType":"YulIdentifier","src":"22247:3:11"},"nativeSrc":"22247:15:11","nodeType":"YulFunctionCall","src":"22247:15:11"}],"functionName":{"name":"read_from_calldatat_uint32","nativeSrc":"22220:26:11","nodeType":"YulIdentifier","src":"22220:26:11"},"nativeSrc":"22220:43:11","nodeType":"YulFunctionCall","src":"22220:43:11"}],"functionName":{"name":"update_storage_value_offsett_uint32_to_uint32","nativeSrc":"22162:45:11","nodeType":"YulIdentifier","src":"22162:45:11"},"nativeSrc":"22162:102:11","nodeType":"YulFunctionCall","src":"22162:102:11"},"nativeSrc":"22162:102:11","nodeType":"YulExpressionStatement","src":"22162:102:11"},{"nativeSrc":"22273:99:11","nodeType":"YulVariableDeclaration","src":"22273:99:11","value":{"arguments":[{"name":"value","nativeSrc":"22349:5:11","nodeType":"YulIdentifier","src":"22349:5:11"},{"arguments":[{"name":"value","nativeSrc":"22360:5:11","nodeType":"YulIdentifier","src":"22360:5:11"},{"kind":"number","nativeSrc":"22367:3:11","nodeType":"YulLiteral","src":"22367:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"22356:3:11","nodeType":"YulIdentifier","src":"22356:3:11"},"nativeSrc":"22356:15:11","nodeType":"YulFunctionCall","src":"22356:15:11"}],"functionName":{"name":"access_calldata_tail_t_bytes_calldata_ptr","nativeSrc":"22307:41:11","nodeType":"YulIdentifier","src":"22307:41:11"},"nativeSrc":"22307:65:11","nodeType":"YulFunctionCall","src":"22307:65:11"},"variables":[{"name":"memberValue","nativeSrc":"22277:11:11","nodeType":"YulTypedName","src":"22277:11:11","type":""},{"name":"memberValue_1","nativeSrc":"22290:13:11","nodeType":"YulTypedName","src":"22290:13:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"22441:4:11","nodeType":"YulIdentifier","src":"22441:4:11"},{"kind":"number","nativeSrc":"22447:1:11","nodeType":"YulLiteral","src":"22447:1:11","type":"","value":"4"}],"functionName":{"name":"add","nativeSrc":"22437:3:11","nodeType":"YulIdentifier","src":"22437:3:11"},"nativeSrc":"22437:12:11","nodeType":"YulFunctionCall","src":"22437:12:11"},{"name":"memberValue","nativeSrc":"22451:11:11","nodeType":"YulIdentifier","src":"22451:11:11"},{"name":"memberValue_1","nativeSrc":"22464:13:11","nodeType":"YulIdentifier","src":"22464:13:11"}],"functionName":{"name":"copy_byte_array_to_storage_from_bytes_calldata_to_bytes","nativeSrc":"22381:55:11","nodeType":"YulIdentifier","src":"22381:55:11"},"nativeSrc":"22381:97:11","nodeType":"YulFunctionCall","src":"22381:97:11"},"nativeSrc":"22381:97:11","nodeType":"YulExpressionStatement","src":"22381:97:11"}]},"name":"update_storage_value_offset_0t_struct$_CrossChainOrder_$3213_calldata_ptr_to_t_struct$_CrossChainOrder_$3213_storage","nativeSrc":"21221:1263:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"21347:4:11","nodeType":"YulTypedName","src":"21347:4:11","type":""},{"name":"value","nativeSrc":"21353:5:11","nodeType":"YulTypedName","src":"21353:5:11","type":""}],"src":"21221:1263:11"},{"body":{"nativeSrc":"22537:174:11","nodeType":"YulBlock","src":"22537:174:11","statements":[{"nativeSrc":"22547:16:11","nodeType":"YulAssignment","src":"22547:16:11","value":{"arguments":[{"name":"x","nativeSrc":"22558:1:11","nodeType":"YulIdentifier","src":"22558:1:11"},{"name":"y","nativeSrc":"22561:1:11","nodeType":"YulIdentifier","src":"22561:1:11"}],"functionName":{"name":"add","nativeSrc":"22554:3:11","nodeType":"YulIdentifier","src":"22554:3:11"},"nativeSrc":"22554:9:11","nodeType":"YulFunctionCall","src":"22554:9:11"},"variableNames":[{"name":"sum","nativeSrc":"22547:3:11","nodeType":"YulIdentifier","src":"22547:3:11"}]},{"body":{"nativeSrc":"22594:111:11","nodeType":"YulBlock","src":"22594:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"22615:1:11","nodeType":"YulLiteral","src":"22615:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"22622:3:11","nodeType":"YulLiteral","src":"22622:3:11","type":"","value":"224"},{"kind":"number","nativeSrc":"22627:10:11","nodeType":"YulLiteral","src":"22627:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"22618:3:11","nodeType":"YulIdentifier","src":"22618:3:11"},"nativeSrc":"22618:20:11","nodeType":"YulFunctionCall","src":"22618:20:11"}],"functionName":{"name":"mstore","nativeSrc":"22608:6:11","nodeType":"YulIdentifier","src":"22608:6:11"},"nativeSrc":"22608:31:11","nodeType":"YulFunctionCall","src":"22608:31:11"},"nativeSrc":"22608:31:11","nodeType":"YulExpressionStatement","src":"22608:31:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22659:1:11","nodeType":"YulLiteral","src":"22659:1:11","type":"","value":"4"},{"kind":"number","nativeSrc":"22662:4:11","nodeType":"YulLiteral","src":"22662:4:11","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"22652:6:11","nodeType":"YulIdentifier","src":"22652:6:11"},"nativeSrc":"22652:15:11","nodeType":"YulFunctionCall","src":"22652:15:11"},"nativeSrc":"22652:15:11","nodeType":"YulExpressionStatement","src":"22652:15:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22687:1:11","nodeType":"YulLiteral","src":"22687:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"22690:4:11","nodeType":"YulLiteral","src":"22690:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"22680:6:11","nodeType":"YulIdentifier","src":"22680:6:11"},"nativeSrc":"22680:15:11","nodeType":"YulFunctionCall","src":"22680:15:11"},"nativeSrc":"22680:15:11","nodeType":"YulExpressionStatement","src":"22680:15:11"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"22578:1:11","nodeType":"YulIdentifier","src":"22578:1:11"},{"name":"sum","nativeSrc":"22581:3:11","nodeType":"YulIdentifier","src":"22581:3:11"}],"functionName":{"name":"gt","nativeSrc":"22575:2:11","nodeType":"YulIdentifier","src":"22575:2:11"},"nativeSrc":"22575:10:11","nodeType":"YulFunctionCall","src":"22575:10:11"},"nativeSrc":"22572:133:11","nodeType":"YulIf","src":"22572:133:11"}]},"name":"checked_add_t_uint256","nativeSrc":"22489:222:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"22520:1:11","nodeType":"YulTypedName","src":"22520:1:11","type":""},{"name":"y","nativeSrc":"22523:1:11","nodeType":"YulTypedName","src":"22523:1:11","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"22529:3:11","nodeType":"YulTypedName","src":"22529:3:11","type":""}],"src":"22489:222:11"},{"body":{"nativeSrc":"22792:424:11","nodeType":"YulBlock","src":"22792:424:11","statements":[{"nativeSrc":"22802:43:11","nodeType":"YulVariableDeclaration","src":"22802:43:11","value":{"arguments":[{"name":"ptr","nativeSrc":"22841:3:11","nodeType":"YulIdentifier","src":"22841:3:11"}],"functionName":{"name":"calldataload","nativeSrc":"22828:12:11","nodeType":"YulIdentifier","src":"22828:12:11"},"nativeSrc":"22828:17:11","nodeType":"YulFunctionCall","src":"22828:17:11"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"22806:18:11","nodeType":"YulTypedName","src":"22806:18:11","type":""}]},{"body":{"nativeSrc":"22934:16:11","nodeType":"YulBlock","src":"22934:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"22943:1:11","nodeType":"YulLiteral","src":"22943:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"22946:1:11","nodeType":"YulLiteral","src":"22946:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"22936:6:11","nodeType":"YulIdentifier","src":"22936:6:11"},"nativeSrc":"22936:12:11","nodeType":"YulFunctionCall","src":"22936:12:11"},"nativeSrc":"22936:12:11","nodeType":"YulExpressionStatement","src":"22936:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"22868:18:11","nodeType":"YulIdentifier","src":"22868:18:11"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"22896:12:11","nodeType":"YulIdentifier","src":"22896:12:11"},"nativeSrc":"22896:14:11","nodeType":"YulFunctionCall","src":"22896:14:11"},{"name":"base_ref","nativeSrc":"22912:8:11","nodeType":"YulIdentifier","src":"22912:8:11"}],"functionName":{"name":"sub","nativeSrc":"22892:3:11","nodeType":"YulIdentifier","src":"22892:3:11"},"nativeSrc":"22892:29:11","nodeType":"YulFunctionCall","src":"22892:29:11"},{"arguments":[{"kind":"number","nativeSrc":"22927:2:11","nodeType":"YulLiteral","src":"22927:2:11","type":"","value":"30"}],"functionName":{"name":"not","nativeSrc":"22923:3:11","nodeType":"YulIdentifier","src":"22923:3:11"},"nativeSrc":"22923:7:11","nodeType":"YulFunctionCall","src":"22923:7:11"}],"functionName":{"name":"add","nativeSrc":"22888:3:11","nodeType":"YulIdentifier","src":"22888:3:11"},"nativeSrc":"22888:43:11","nodeType":"YulFunctionCall","src":"22888:43:11"}],"functionName":{"name":"slt","nativeSrc":"22864:3:11","nodeType":"YulIdentifier","src":"22864:3:11"},"nativeSrc":"22864:68:11","nodeType":"YulFunctionCall","src":"22864:68:11"}],"functionName":{"name":"iszero","nativeSrc":"22857:6:11","nodeType":"YulIdentifier","src":"22857:6:11"},"nativeSrc":"22857:76:11","nodeType":"YulFunctionCall","src":"22857:76:11"},"nativeSrc":"22854:96:11","nodeType":"YulIf","src":"22854:96:11"},{"nativeSrc":"22959:48:11","nodeType":"YulVariableDeclaration","src":"22959:48:11","value":{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"22978:18:11","nodeType":"YulIdentifier","src":"22978:18:11"},{"name":"base_ref","nativeSrc":"22998:8:11","nodeType":"YulIdentifier","src":"22998:8:11"}],"functionName":{"name":"add","nativeSrc":"22974:3:11","nodeType":"YulIdentifier","src":"22974:3:11"},"nativeSrc":"22974:33:11","nodeType":"YulFunctionCall","src":"22974:33:11"},"variables":[{"name":"value_1","nativeSrc":"22963:7:11","nodeType":"YulTypedName","src":"22963:7:11","type":""}]},{"nativeSrc":"23016:31:11","nodeType":"YulAssignment","src":"23016:31:11","value":{"arguments":[{"name":"value_1","nativeSrc":"23039:7:11","nodeType":"YulIdentifier","src":"23039:7:11"}],"functionName":{"name":"calldataload","nativeSrc":"23026:12:11","nodeType":"YulIdentifier","src":"23026:12:11"},"nativeSrc":"23026:21:11","nodeType":"YulFunctionCall","src":"23026:21:11"},"variableNames":[{"name":"length","nativeSrc":"23016:6:11","nodeType":"YulIdentifier","src":"23016:6:11"}]},{"nativeSrc":"23056:27:11","nodeType":"YulAssignment","src":"23056:27:11","value":{"arguments":[{"name":"value_1","nativeSrc":"23069:7:11","nodeType":"YulIdentifier","src":"23069:7:11"},{"kind":"number","nativeSrc":"23078:4:11","nodeType":"YulLiteral","src":"23078:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"23065:3:11","nodeType":"YulIdentifier","src":"23065:3:11"},"nativeSrc":"23065:18:11","nodeType":"YulFunctionCall","src":"23065:18:11"},"variableNames":[{"name":"value","nativeSrc":"23056:5:11","nodeType":"YulIdentifier","src":"23056:5:11"}]},{"body":{"nativeSrc":"23126:16:11","nodeType":"YulBlock","src":"23126:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23135:1:11","nodeType":"YulLiteral","src":"23135:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"23138:1:11","nodeType":"YulLiteral","src":"23138:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"23128:6:11","nodeType":"YulIdentifier","src":"23128:6:11"},"nativeSrc":"23128:12:11","nodeType":"YulFunctionCall","src":"23128:12:11"},"nativeSrc":"23128:12:11","nodeType":"YulExpressionStatement","src":"23128:12:11"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"23098:6:11","nodeType":"YulIdentifier","src":"23098:6:11"},{"kind":"number","nativeSrc":"23106:18:11","nodeType":"YulLiteral","src":"23106:18:11","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"23095:2:11","nodeType":"YulIdentifier","src":"23095:2:11"},"nativeSrc":"23095:30:11","nodeType":"YulFunctionCall","src":"23095:30:11"},"nativeSrc":"23092:50:11","nodeType":"YulIf","src":"23092:50:11"},{"body":{"nativeSrc":"23194:16:11","nodeType":"YulBlock","src":"23194:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23203:1:11","nodeType":"YulLiteral","src":"23203:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"23206:1:11","nodeType":"YulLiteral","src":"23206:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"23196:6:11","nodeType":"YulIdentifier","src":"23196:6:11"},"nativeSrc":"23196:12:11","nodeType":"YulFunctionCall","src":"23196:12:11"},"nativeSrc":"23196:12:11","nodeType":"YulExpressionStatement","src":"23196:12:11"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"23158:5:11","nodeType":"YulIdentifier","src":"23158:5:11"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"23169:12:11","nodeType":"YulIdentifier","src":"23169:12:11"},"nativeSrc":"23169:14:11","nodeType":"YulFunctionCall","src":"23169:14:11"},{"name":"length","nativeSrc":"23185:6:11","nodeType":"YulIdentifier","src":"23185:6:11"}],"functionName":{"name":"sub","nativeSrc":"23165:3:11","nodeType":"YulIdentifier","src":"23165:3:11"},"nativeSrc":"23165:27:11","nodeType":"YulFunctionCall","src":"23165:27:11"}],"functionName":{"name":"sgt","nativeSrc":"23154:3:11","nodeType":"YulIdentifier","src":"23154:3:11"},"nativeSrc":"23154:39:11","nodeType":"YulFunctionCall","src":"23154:39:11"},"nativeSrc":"23151:59:11","nodeType":"YulIf","src":"23151:59:11"}]},"name":"calldata_access_bytes_calldata","nativeSrc":"22716:500:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"22756:8:11","nodeType":"YulTypedName","src":"22756:8:11","type":""},{"name":"ptr","nativeSrc":"22766:3:11","nodeType":"YulTypedName","src":"22766:3:11","type":""}],"returnVariables":[{"name":"value","nativeSrc":"22774:5:11","nodeType":"YulTypedName","src":"22774:5:11","type":""},{"name":"length","nativeSrc":"22781:6:11","nodeType":"YulTypedName","src":"22781:6:11","type":""}],"src":"22716:500:11"},{"body":{"nativeSrc":"23287:200:11","nodeType":"YulBlock","src":"23287:200:11","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"23304:3:11","nodeType":"YulIdentifier","src":"23304:3:11"},{"name":"length","nativeSrc":"23309:6:11","nodeType":"YulIdentifier","src":"23309:6:11"}],"functionName":{"name":"mstore","nativeSrc":"23297:6:11","nodeType":"YulIdentifier","src":"23297:6:11"},"nativeSrc":"23297:19:11","nodeType":"YulFunctionCall","src":"23297:19:11"},"nativeSrc":"23297:19:11","nodeType":"YulExpressionStatement","src":"23297:19:11"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"23342:3:11","nodeType":"YulIdentifier","src":"23342:3:11"},{"kind":"number","nativeSrc":"23347:4:11","nodeType":"YulLiteral","src":"23347:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"23338:3:11","nodeType":"YulIdentifier","src":"23338:3:11"},"nativeSrc":"23338:14:11","nodeType":"YulFunctionCall","src":"23338:14:11"},{"name":"start","nativeSrc":"23354:5:11","nodeType":"YulIdentifier","src":"23354:5:11"},{"name":"length","nativeSrc":"23361:6:11","nodeType":"YulIdentifier","src":"23361:6:11"}],"functionName":{"name":"calldatacopy","nativeSrc":"23325:12:11","nodeType":"YulIdentifier","src":"23325:12:11"},"nativeSrc":"23325:43:11","nodeType":"YulFunctionCall","src":"23325:43:11"},"nativeSrc":"23325:43:11","nodeType":"YulExpressionStatement","src":"23325:43:11"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"23392:3:11","nodeType":"YulIdentifier","src":"23392:3:11"},{"name":"length","nativeSrc":"23397:6:11","nodeType":"YulIdentifier","src":"23397:6:11"}],"functionName":{"name":"add","nativeSrc":"23388:3:11","nodeType":"YulIdentifier","src":"23388:3:11"},"nativeSrc":"23388:16:11","nodeType":"YulFunctionCall","src":"23388:16:11"},{"kind":"number","nativeSrc":"23406:4:11","nodeType":"YulLiteral","src":"23406:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"23384:3:11","nodeType":"YulIdentifier","src":"23384:3:11"},"nativeSrc":"23384:27:11","nodeType":"YulFunctionCall","src":"23384:27:11"},{"kind":"number","nativeSrc":"23413:1:11","nodeType":"YulLiteral","src":"23413:1:11","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"23377:6:11","nodeType":"YulIdentifier","src":"23377:6:11"},"nativeSrc":"23377:38:11","nodeType":"YulFunctionCall","src":"23377:38:11"},"nativeSrc":"23377:38:11","nodeType":"YulExpressionStatement","src":"23377:38:11"},{"nativeSrc":"23424:57:11","nodeType":"YulAssignment","src":"23424:57:11","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"23439:3:11","nodeType":"YulIdentifier","src":"23439:3:11"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"23452:6:11","nodeType":"YulIdentifier","src":"23452:6:11"},{"kind":"number","nativeSrc":"23460:2:11","nodeType":"YulLiteral","src":"23460:2:11","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"23448:3:11","nodeType":"YulIdentifier","src":"23448:3:11"},"nativeSrc":"23448:15:11","nodeType":"YulFunctionCall","src":"23448:15:11"},{"arguments":[{"kind":"number","nativeSrc":"23469:2:11","nodeType":"YulLiteral","src":"23469:2:11","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"23465:3:11","nodeType":"YulIdentifier","src":"23465:3:11"},"nativeSrc":"23465:7:11","nodeType":"YulFunctionCall","src":"23465:7:11"}],"functionName":{"name":"and","nativeSrc":"23444:3:11","nodeType":"YulIdentifier","src":"23444:3:11"},"nativeSrc":"23444:29:11","nodeType":"YulFunctionCall","src":"23444:29:11"}],"functionName":{"name":"add","nativeSrc":"23435:3:11","nodeType":"YulIdentifier","src":"23435:3:11"},"nativeSrc":"23435:39:11","nodeType":"YulFunctionCall","src":"23435:39:11"},{"kind":"number","nativeSrc":"23476:4:11","nodeType":"YulLiteral","src":"23476:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"23431:3:11","nodeType":"YulIdentifier","src":"23431:3:11"},"nativeSrc":"23431:50:11","nodeType":"YulFunctionCall","src":"23431:50:11"},"variableNames":[{"name":"end","nativeSrc":"23424:3:11","nodeType":"YulIdentifier","src":"23424:3:11"}]}]},"name":"abi_encode_bytes_calldata","nativeSrc":"23221:266:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"23256:5:11","nodeType":"YulTypedName","src":"23256:5:11","type":""},{"name":"length","nativeSrc":"23263:6:11","nodeType":"YulTypedName","src":"23263:6:11","type":""},{"name":"pos","nativeSrc":"23271:3:11","nodeType":"YulTypedName","src":"23271:3:11","type":""}],"returnVariables":[{"name":"end","nativeSrc":"23279:3:11","nodeType":"YulTypedName","src":"23279:3:11","type":""}],"src":"23221:266:11"},{"body":{"nativeSrc":"23661:1069:11","nodeType":"YulBlock","src":"23661:1069:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23678:9:11","nodeType":"YulIdentifier","src":"23678:9:11"},{"kind":"number","nativeSrc":"23689:2:11","nodeType":"YulLiteral","src":"23689:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"23671:6:11","nodeType":"YulIdentifier","src":"23671:6:11"},"nativeSrc":"23671:21:11","nodeType":"YulFunctionCall","src":"23671:21:11"},"nativeSrc":"23671:21:11","nodeType":"YulExpressionStatement","src":"23671:21:11"},{"nativeSrc":"23701:33:11","nodeType":"YulVariableDeclaration","src":"23701:33:11","value":{"arguments":[{"name":"value0","nativeSrc":"23727:6:11","nodeType":"YulIdentifier","src":"23727:6:11"}],"functionName":{"name":"calldataload","nativeSrc":"23714:12:11","nodeType":"YulIdentifier","src":"23714:12:11"},"nativeSrc":"23714:20:11","nodeType":"YulFunctionCall","src":"23714:20:11"},"variables":[{"name":"value","nativeSrc":"23705:5:11","nodeType":"YulTypedName","src":"23705:5:11","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"23768:5:11","nodeType":"YulIdentifier","src":"23768:5:11"}],"functionName":{"name":"validator_revert_address","nativeSrc":"23743:24:11","nodeType":"YulIdentifier","src":"23743:24:11"},"nativeSrc":"23743:31:11","nodeType":"YulFunctionCall","src":"23743:31:11"},"nativeSrc":"23743:31:11","nodeType":"YulExpressionStatement","src":"23743:31:11"},{"nativeSrc":"23783:29:11","nodeType":"YulVariableDeclaration","src":"23783:29:11","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"23801:3:11","nodeType":"YulLiteral","src":"23801:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"23806:1:11","nodeType":"YulLiteral","src":"23806:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"23797:3:11","nodeType":"YulIdentifier","src":"23797:3:11"},"nativeSrc":"23797:11:11","nodeType":"YulFunctionCall","src":"23797:11:11"},{"kind":"number","nativeSrc":"23810:1:11","nodeType":"YulLiteral","src":"23810:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"23793:3:11","nodeType":"YulIdentifier","src":"23793:3:11"},"nativeSrc":"23793:19:11","nodeType":"YulFunctionCall","src":"23793:19:11"},"variables":[{"name":"_1","nativeSrc":"23787:2:11","nodeType":"YulTypedName","src":"23787:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23832:9:11","nodeType":"YulIdentifier","src":"23832:9:11"},{"kind":"number","nativeSrc":"23843:2:11","nodeType":"YulLiteral","src":"23843:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23828:3:11","nodeType":"YulIdentifier","src":"23828:3:11"},"nativeSrc":"23828:18:11","nodeType":"YulFunctionCall","src":"23828:18:11"},{"arguments":[{"name":"value","nativeSrc":"23852:5:11","nodeType":"YulIdentifier","src":"23852:5:11"},{"name":"_1","nativeSrc":"23859:2:11","nodeType":"YulIdentifier","src":"23859:2:11"}],"functionName":{"name":"and","nativeSrc":"23848:3:11","nodeType":"YulIdentifier","src":"23848:3:11"},"nativeSrc":"23848:14:11","nodeType":"YulFunctionCall","src":"23848:14:11"}],"functionName":{"name":"mstore","nativeSrc":"23821:6:11","nodeType":"YulIdentifier","src":"23821:6:11"},"nativeSrc":"23821:42:11","nodeType":"YulFunctionCall","src":"23821:42:11"},"nativeSrc":"23821:42:11","nodeType":"YulExpressionStatement","src":"23821:42:11"},{"nativeSrc":"23872:44:11","nodeType":"YulVariableDeclaration","src":"23872:44:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"23904:6:11","nodeType":"YulIdentifier","src":"23904:6:11"},{"kind":"number","nativeSrc":"23912:2:11","nodeType":"YulLiteral","src":"23912:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23900:3:11","nodeType":"YulIdentifier","src":"23900:3:11"},"nativeSrc":"23900:15:11","nodeType":"YulFunctionCall","src":"23900:15:11"}],"functionName":{"name":"calldataload","nativeSrc":"23887:12:11","nodeType":"YulIdentifier","src":"23887:12:11"},"nativeSrc":"23887:29:11","nodeType":"YulFunctionCall","src":"23887:29:11"},"variables":[{"name":"value_1","nativeSrc":"23876:7:11","nodeType":"YulTypedName","src":"23876:7:11","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"23950:7:11","nodeType":"YulIdentifier","src":"23950:7:11"}],"functionName":{"name":"validator_revert_address","nativeSrc":"23925:24:11","nodeType":"YulIdentifier","src":"23925:24:11"},"nativeSrc":"23925:33:11","nodeType":"YulFunctionCall","src":"23925:33:11"},"nativeSrc":"23925:33:11","nodeType":"YulExpressionStatement","src":"23925:33:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23978:9:11","nodeType":"YulIdentifier","src":"23978:9:11"},{"kind":"number","nativeSrc":"23989:2:11","nodeType":"YulLiteral","src":"23989:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23974:3:11","nodeType":"YulIdentifier","src":"23974:3:11"},"nativeSrc":"23974:18:11","nodeType":"YulFunctionCall","src":"23974:18:11"},{"arguments":[{"name":"value_1","nativeSrc":"23998:7:11","nodeType":"YulIdentifier","src":"23998:7:11"},{"name":"_1","nativeSrc":"24007:2:11","nodeType":"YulIdentifier","src":"24007:2:11"}],"functionName":{"name":"and","nativeSrc":"23994:3:11","nodeType":"YulIdentifier","src":"23994:3:11"},"nativeSrc":"23994:16:11","nodeType":"YulFunctionCall","src":"23994:16:11"}],"functionName":{"name":"mstore","nativeSrc":"23967:6:11","nodeType":"YulIdentifier","src":"23967:6:11"},"nativeSrc":"23967:44:11","nodeType":"YulFunctionCall","src":"23967:44:11"},"nativeSrc":"23967:44:11","nodeType":"YulExpressionStatement","src":"23967:44:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24031:9:11","nodeType":"YulIdentifier","src":"24031:9:11"},{"kind":"number","nativeSrc":"24042:2:11","nodeType":"YulLiteral","src":"24042:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"24027:3:11","nodeType":"YulIdentifier","src":"24027:3:11"},"nativeSrc":"24027:18:11","nodeType":"YulFunctionCall","src":"24027:18:11"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"24064:6:11","nodeType":"YulIdentifier","src":"24064:6:11"},{"kind":"number","nativeSrc":"24072:2:11","nodeType":"YulLiteral","src":"24072:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24060:3:11","nodeType":"YulIdentifier","src":"24060:3:11"},"nativeSrc":"24060:15:11","nodeType":"YulFunctionCall","src":"24060:15:11"}],"functionName":{"name":"calldataload","nativeSrc":"24047:12:11","nodeType":"YulIdentifier","src":"24047:12:11"},"nativeSrc":"24047:29:11","nodeType":"YulFunctionCall","src":"24047:29:11"}],"functionName":{"name":"mstore","nativeSrc":"24020:6:11","nodeType":"YulIdentifier","src":"24020:6:11"},"nativeSrc":"24020:57:11","nodeType":"YulFunctionCall","src":"24020:57:11"},"nativeSrc":"24020:57:11","nodeType":"YulExpressionStatement","src":"24020:57:11"},{"nativeSrc":"24086:44:11","nodeType":"YulVariableDeclaration","src":"24086:44:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"24118:6:11","nodeType":"YulIdentifier","src":"24118:6:11"},{"kind":"number","nativeSrc":"24126:2:11","nodeType":"YulLiteral","src":"24126:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"24114:3:11","nodeType":"YulIdentifier","src":"24114:3:11"},"nativeSrc":"24114:15:11","nodeType":"YulFunctionCall","src":"24114:15:11"}],"functionName":{"name":"calldataload","nativeSrc":"24101:12:11","nodeType":"YulIdentifier","src":"24101:12:11"},"nativeSrc":"24101:29:11","nodeType":"YulFunctionCall","src":"24101:29:11"},"variables":[{"name":"value_2","nativeSrc":"24090:7:11","nodeType":"YulTypedName","src":"24090:7:11","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"24163:7:11","nodeType":"YulIdentifier","src":"24163:7:11"}],"functionName":{"name":"validator_revert_uint32","nativeSrc":"24139:23:11","nodeType":"YulIdentifier","src":"24139:23:11"},"nativeSrc":"24139:32:11","nodeType":"YulFunctionCall","src":"24139:32:11"},"nativeSrc":"24139:32:11","nodeType":"YulExpressionStatement","src":"24139:32:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24191:9:11","nodeType":"YulIdentifier","src":"24191:9:11"},{"kind":"number","nativeSrc":"24202:3:11","nodeType":"YulLiteral","src":"24202:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"24187:3:11","nodeType":"YulIdentifier","src":"24187:3:11"},"nativeSrc":"24187:19:11","nodeType":"YulFunctionCall","src":"24187:19:11"},{"arguments":[{"name":"value_2","nativeSrc":"24212:7:11","nodeType":"YulIdentifier","src":"24212:7:11"},{"kind":"number","nativeSrc":"24221:10:11","nodeType":"YulLiteral","src":"24221:10:11","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"24208:3:11","nodeType":"YulIdentifier","src":"24208:3:11"},"nativeSrc":"24208:24:11","nodeType":"YulFunctionCall","src":"24208:24:11"}],"functionName":{"name":"mstore","nativeSrc":"24180:6:11","nodeType":"YulIdentifier","src":"24180:6:11"},"nativeSrc":"24180:53:11","nodeType":"YulFunctionCall","src":"24180:53:11"},"nativeSrc":"24180:53:11","nodeType":"YulExpressionStatement","src":"24180:53:11"},{"nativeSrc":"24242:55:11","nodeType":"YulVariableDeclaration","src":"24242:55:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"24284:6:11","nodeType":"YulIdentifier","src":"24284:6:11"},{"kind":"number","nativeSrc":"24292:3:11","nodeType":"YulLiteral","src":"24292:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"24280:3:11","nodeType":"YulIdentifier","src":"24280:3:11"},"nativeSrc":"24280:16:11","nodeType":"YulFunctionCall","src":"24280:16:11"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"24262:17:11","nodeType":"YulIdentifier","src":"24262:17:11"},"nativeSrc":"24262:35:11","nodeType":"YulFunctionCall","src":"24262:35:11"},"variables":[{"name":"memberValue0","nativeSrc":"24246:12:11","nodeType":"YulTypedName","src":"24246:12:11","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nativeSrc":"24324:12:11","nodeType":"YulIdentifier","src":"24324:12:11"},{"arguments":[{"name":"headStart","nativeSrc":"24342:9:11","nodeType":"YulIdentifier","src":"24342:9:11"},{"kind":"number","nativeSrc":"24353:3:11","nodeType":"YulLiteral","src":"24353:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"24338:3:11","nodeType":"YulIdentifier","src":"24338:3:11"},"nativeSrc":"24338:19:11","nodeType":"YulFunctionCall","src":"24338:19:11"}],"functionName":{"name":"abi_encode_uint32","nativeSrc":"24306:17:11","nodeType":"YulIdentifier","src":"24306:17:11"},"nativeSrc":"24306:52:11","nodeType":"YulFunctionCall","src":"24306:52:11"},"nativeSrc":"24306:52:11","nodeType":"YulExpressionStatement","src":"24306:52:11"},{"nativeSrc":"24367:57:11","nodeType":"YulVariableDeclaration","src":"24367:57:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"24411:6:11","nodeType":"YulIdentifier","src":"24411:6:11"},{"kind":"number","nativeSrc":"24419:3:11","nodeType":"YulLiteral","src":"24419:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"24407:3:11","nodeType":"YulIdentifier","src":"24407:3:11"},"nativeSrc":"24407:16:11","nodeType":"YulFunctionCall","src":"24407:16:11"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"24389:17:11","nodeType":"YulIdentifier","src":"24389:17:11"},"nativeSrc":"24389:35:11","nodeType":"YulFunctionCall","src":"24389:35:11"},"variables":[{"name":"memberValue0_1","nativeSrc":"24371:14:11","nodeType":"YulTypedName","src":"24371:14:11","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nativeSrc":"24451:14:11","nodeType":"YulIdentifier","src":"24451:14:11"},{"arguments":[{"name":"headStart","nativeSrc":"24471:9:11","nodeType":"YulIdentifier","src":"24471:9:11"},{"kind":"number","nativeSrc":"24482:3:11","nodeType":"YulLiteral","src":"24482:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"24467:3:11","nodeType":"YulIdentifier","src":"24467:3:11"},"nativeSrc":"24467:19:11","nodeType":"YulFunctionCall","src":"24467:19:11"}],"functionName":{"name":"abi_encode_uint32","nativeSrc":"24433:17:11","nodeType":"YulIdentifier","src":"24433:17:11"},"nativeSrc":"24433:54:11","nodeType":"YulFunctionCall","src":"24433:54:11"},"nativeSrc":"24433:54:11","nodeType":"YulExpressionStatement","src":"24433:54:11"},{"nativeSrc":"24496:92:11","nodeType":"YulVariableDeclaration","src":"24496:92:11","value":{"arguments":[{"name":"value0","nativeSrc":"24563:6:11","nodeType":"YulIdentifier","src":"24563:6:11"},{"arguments":[{"name":"value0","nativeSrc":"24575:6:11","nodeType":"YulIdentifier","src":"24575:6:11"},{"kind":"number","nativeSrc":"24583:3:11","nodeType":"YulLiteral","src":"24583:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"24571:3:11","nodeType":"YulIdentifier","src":"24571:3:11"},"nativeSrc":"24571:16:11","nodeType":"YulFunctionCall","src":"24571:16:11"}],"functionName":{"name":"calldata_access_bytes_calldata","nativeSrc":"24532:30:11","nodeType":"YulIdentifier","src":"24532:30:11"},"nativeSrc":"24532:56:11","nodeType":"YulFunctionCall","src":"24532:56:11"},"variables":[{"name":"memberValue0_2","nativeSrc":"24500:14:11","nodeType":"YulTypedName","src":"24500:14:11","type":""},{"name":"memberValue1","nativeSrc":"24516:12:11","nodeType":"YulTypedName","src":"24516:12:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24608:9:11","nodeType":"YulIdentifier","src":"24608:9:11"},{"kind":"number","nativeSrc":"24619:4:11","nodeType":"YulLiteral","src":"24619:4:11","type":"","value":"0xe0"}],"functionName":{"name":"add","nativeSrc":"24604:3:11","nodeType":"YulIdentifier","src":"24604:3:11"},"nativeSrc":"24604:20:11","nodeType":"YulFunctionCall","src":"24604:20:11"},{"kind":"number","nativeSrc":"24626:4:11","nodeType":"YulLiteral","src":"24626:4:11","type":"","value":"0xe0"}],"functionName":{"name":"mstore","nativeSrc":"24597:6:11","nodeType":"YulIdentifier","src":"24597:6:11"},"nativeSrc":"24597:34:11","nodeType":"YulFunctionCall","src":"24597:34:11"},"nativeSrc":"24597:34:11","nodeType":"YulExpressionStatement","src":"24597:34:11"},{"nativeSrc":"24640:84:11","nodeType":"YulAssignment","src":"24640:84:11","value":{"arguments":[{"name":"memberValue0_2","nativeSrc":"24674:14:11","nodeType":"YulIdentifier","src":"24674:14:11"},{"name":"memberValue1","nativeSrc":"24690:12:11","nodeType":"YulIdentifier","src":"24690:12:11"},{"arguments":[{"name":"headStart","nativeSrc":"24708:9:11","nodeType":"YulIdentifier","src":"24708:9:11"},{"kind":"number","nativeSrc":"24719:3:11","nodeType":"YulLiteral","src":"24719:3:11","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"24704:3:11","nodeType":"YulIdentifier","src":"24704:3:11"},"nativeSrc":"24704:19:11","nodeType":"YulFunctionCall","src":"24704:19:11"}],"functionName":{"name":"abi_encode_bytes_calldata","nativeSrc":"24648:25:11","nodeType":"YulIdentifier","src":"24648:25:11"},"nativeSrc":"24648:76:11","nodeType":"YulFunctionCall","src":"24648:76:11"},"variableNames":[{"name":"tail","nativeSrc":"24640:4:11","nodeType":"YulIdentifier","src":"24640:4:11"}]}]},"name":"abi_encode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptr__to_t_struct$_CrossChainOrder_$3213_memory_ptr__fromStack_reversed","nativeSrc":"23492:1238:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23630:9:11","nodeType":"YulTypedName","src":"23630:9:11","type":""},{"name":"value0","nativeSrc":"23641:6:11","nodeType":"YulTypedName","src":"23641:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23652:4:11","nodeType":"YulTypedName","src":"23652:4:11","type":""}],"src":"23492:1238:11"},{"body":{"nativeSrc":"24909:167:11","nodeType":"YulBlock","src":"24909:167:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24926:9:11","nodeType":"YulIdentifier","src":"24926:9:11"},{"kind":"number","nativeSrc":"24937:2:11","nodeType":"YulLiteral","src":"24937:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"24919:6:11","nodeType":"YulIdentifier","src":"24919:6:11"},"nativeSrc":"24919:21:11","nodeType":"YulFunctionCall","src":"24919:21:11"},"nativeSrc":"24919:21:11","nodeType":"YulExpressionStatement","src":"24919:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24960:9:11","nodeType":"YulIdentifier","src":"24960:9:11"},{"kind":"number","nativeSrc":"24971:2:11","nodeType":"YulLiteral","src":"24971:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24956:3:11","nodeType":"YulIdentifier","src":"24956:3:11"},"nativeSrc":"24956:18:11","nodeType":"YulFunctionCall","src":"24956:18:11"},{"kind":"number","nativeSrc":"24976:2:11","nodeType":"YulLiteral","src":"24976:2:11","type":"","value":"17"}],"functionName":{"name":"mstore","nativeSrc":"24949:6:11","nodeType":"YulIdentifier","src":"24949:6:11"},"nativeSrc":"24949:30:11","nodeType":"YulFunctionCall","src":"24949:30:11"},"nativeSrc":"24949:30:11","nodeType":"YulExpressionStatement","src":"24949:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24999:9:11","nodeType":"YulIdentifier","src":"24999:9:11"},{"kind":"number","nativeSrc":"25010:2:11","nodeType":"YulLiteral","src":"25010:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24995:3:11","nodeType":"YulIdentifier","src":"24995:3:11"},"nativeSrc":"24995:18:11","nodeType":"YulFunctionCall","src":"24995:18:11"},{"hexValue":"6f72646572206e6f74206d617463686564","kind":"string","nativeSrc":"25015:19:11","nodeType":"YulLiteral","src":"25015:19:11","type":"","value":"order not matched"}],"functionName":{"name":"mstore","nativeSrc":"24988:6:11","nodeType":"YulIdentifier","src":"24988:6:11"},"nativeSrc":"24988:47:11","nodeType":"YulFunctionCall","src":"24988:47:11"},"nativeSrc":"24988:47:11","nodeType":"YulExpressionStatement","src":"24988:47:11"},{"nativeSrc":"25044:26:11","nodeType":"YulAssignment","src":"25044:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"25056:9:11","nodeType":"YulIdentifier","src":"25056:9:11"},{"kind":"number","nativeSrc":"25067:2:11","nodeType":"YulLiteral","src":"25067:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25052:3:11","nodeType":"YulIdentifier","src":"25052:3:11"},"nativeSrc":"25052:18:11","nodeType":"YulFunctionCall","src":"25052:18:11"},"variableNames":[{"name":"tail","nativeSrc":"25044:4:11","nodeType":"YulIdentifier","src":"25044:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_ace1e7b04e285a8da71b87d1f0d17ee85d7c8fe93489c587ad25f6d41806ffe9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"24735:341:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24886:9:11","nodeType":"YulTypedName","src":"24886:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24900:4:11","nodeType":"YulTypedName","src":"24900:4:11","type":""}],"src":"24735:341:11"},{"body":{"nativeSrc":"25255:167:11","nodeType":"YulBlock","src":"25255:167:11","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25272:9:11","nodeType":"YulIdentifier","src":"25272:9:11"},{"kind":"number","nativeSrc":"25283:2:11","nodeType":"YulLiteral","src":"25283:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"25265:6:11","nodeType":"YulIdentifier","src":"25265:6:11"},"nativeSrc":"25265:21:11","nodeType":"YulFunctionCall","src":"25265:21:11"},"nativeSrc":"25265:21:11","nodeType":"YulExpressionStatement","src":"25265:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25306:9:11","nodeType":"YulIdentifier","src":"25306:9:11"},{"kind":"number","nativeSrc":"25317:2:11","nodeType":"YulLiteral","src":"25317:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25302:3:11","nodeType":"YulIdentifier","src":"25302:3:11"},"nativeSrc":"25302:18:11","nodeType":"YulFunctionCall","src":"25302:18:11"},{"kind":"number","nativeSrc":"25322:2:11","nodeType":"YulLiteral","src":"25322:2:11","type":"","value":"17"}],"functionName":{"name":"mstore","nativeSrc":"25295:6:11","nodeType":"YulIdentifier","src":"25295:6:11"},"nativeSrc":"25295:30:11","nodeType":"YulFunctionCall","src":"25295:30:11"},"nativeSrc":"25295:30:11","nodeType":"YulExpressionStatement","src":"25295:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25345:9:11","nodeType":"YulIdentifier","src":"25345:9:11"},{"kind":"number","nativeSrc":"25356:2:11","nodeType":"YulLiteral","src":"25356:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25341:3:11","nodeType":"YulIdentifier","src":"25341:3:11"},"nativeSrc":"25341:18:11","nodeType":"YulFunctionCall","src":"25341:18:11"},{"hexValue":"6d61746368206e6f742065787069726564","kind":"string","nativeSrc":"25361:19:11","nodeType":"YulLiteral","src":"25361:19:11","type":"","value":"match not expired"}],"functionName":{"name":"mstore","nativeSrc":"25334:6:11","nodeType":"YulIdentifier","src":"25334:6:11"},"nativeSrc":"25334:47:11","nodeType":"YulFunctionCall","src":"25334:47:11"},"nativeSrc":"25334:47:11","nodeType":"YulExpressionStatement","src":"25334:47:11"},{"nativeSrc":"25390:26:11","nodeType":"YulAssignment","src":"25390:26:11","value":{"arguments":[{"name":"headStart","nativeSrc":"25402:9:11","nodeType":"YulIdentifier","src":"25402:9:11"},{"kind":"number","nativeSrc":"25413:2:11","nodeType":"YulLiteral","src":"25413:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25398:3:11","nodeType":"YulIdentifier","src":"25398:3:11"},"nativeSrc":"25398:18:11","nodeType":"YulFunctionCall","src":"25398:18:11"},"variableNames":[{"name":"tail","nativeSrc":"25390:4:11","nodeType":"YulIdentifier","src":"25390:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_61ed4d5304cf716d2536dd758c8ed2cbcdef9e23345cb86ca689fded1396e98c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25081:341:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25232:9:11","nodeType":"YulTypedName","src":"25232:9:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25246:4:11","nodeType":"YulTypedName","src":"25246:4:11","type":""}],"src":"25081:341:11"},{"body":{"nativeSrc":"25594:1067:11","nodeType":"YulBlock","src":"25594:1067:11","statements":[{"nativeSrc":"25604:12:11","nodeType":"YulVariableDeclaration","src":"25604:12:11","value":{"kind":"number","nativeSrc":"25614:2:11","nodeType":"YulLiteral","src":"25614:2:11","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"25608:2:11","nodeType":"YulTypedName","src":"25608:2:11","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25632:9:11","nodeType":"YulIdentifier","src":"25632:9:11"},{"kind":"number","nativeSrc":"25643:2:11","nodeType":"YulLiteral","src":"25643:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"25625:6:11","nodeType":"YulIdentifier","src":"25625:6:11"},"nativeSrc":"25625:21:11","nodeType":"YulFunctionCall","src":"25625:21:11"},"nativeSrc":"25625:21:11","nodeType":"YulExpressionStatement","src":"25625:21:11"},{"nativeSrc":"25655:29:11","nodeType":"YulVariableDeclaration","src":"25655:29:11","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"25673:3:11","nodeType":"YulLiteral","src":"25673:3:11","type":"","value":"160"},{"kind":"number","nativeSrc":"25678:1:11","nodeType":"YulLiteral","src":"25678:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"25669:3:11","nodeType":"YulIdentifier","src":"25669:3:11"},"nativeSrc":"25669:11:11","nodeType":"YulFunctionCall","src":"25669:11:11"},{"kind":"number","nativeSrc":"25682:1:11","nodeType":"YulLiteral","src":"25682:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"25665:3:11","nodeType":"YulIdentifier","src":"25665:3:11"},"nativeSrc":"25665:19:11","nodeType":"YulFunctionCall","src":"25665:19:11"},"variables":[{"name":"_2","nativeSrc":"25659:2:11","nodeType":"YulTypedName","src":"25659:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25704:9:11","nodeType":"YulIdentifier","src":"25704:9:11"},{"kind":"number","nativeSrc":"25715:2:11","nodeType":"YulLiteral","src":"25715:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25700:3:11","nodeType":"YulIdentifier","src":"25700:3:11"},"nativeSrc":"25700:18:11","nodeType":"YulFunctionCall","src":"25700:18:11"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"25730:6:11","nodeType":"YulIdentifier","src":"25730:6:11"}],"functionName":{"name":"mload","nativeSrc":"25724:5:11","nodeType":"YulIdentifier","src":"25724:5:11"},"nativeSrc":"25724:13:11","nodeType":"YulFunctionCall","src":"25724:13:11"},{"name":"_2","nativeSrc":"25739:2:11","nodeType":"YulIdentifier","src":"25739:2:11"}],"functionName":{"name":"and","nativeSrc":"25720:3:11","nodeType":"YulIdentifier","src":"25720:3:11"},"nativeSrc":"25720:22:11","nodeType":"YulFunctionCall","src":"25720:22:11"}],"functionName":{"name":"mstore","nativeSrc":"25693:6:11","nodeType":"YulIdentifier","src":"25693:6:11"},"nativeSrc":"25693:50:11","nodeType":"YulFunctionCall","src":"25693:50:11"},"nativeSrc":"25693:50:11","nodeType":"YulExpressionStatement","src":"25693:50:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25763:9:11","nodeType":"YulIdentifier","src":"25763:9:11"},{"kind":"number","nativeSrc":"25774:2:11","nodeType":"YulLiteral","src":"25774:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25759:3:11","nodeType":"YulIdentifier","src":"25759:3:11"},"nativeSrc":"25759:18:11","nodeType":"YulFunctionCall","src":"25759:18:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"25793:6:11","nodeType":"YulIdentifier","src":"25793:6:11"},{"kind":"number","nativeSrc":"25801:2:11","nodeType":"YulLiteral","src":"25801:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25789:3:11","nodeType":"YulIdentifier","src":"25789:3:11"},"nativeSrc":"25789:15:11","nodeType":"YulFunctionCall","src":"25789:15:11"}],"functionName":{"name":"mload","nativeSrc":"25783:5:11","nodeType":"YulIdentifier","src":"25783:5:11"},"nativeSrc":"25783:22:11","nodeType":"YulFunctionCall","src":"25783:22:11"},{"name":"_2","nativeSrc":"25807:2:11","nodeType":"YulIdentifier","src":"25807:2:11"}],"functionName":{"name":"and","nativeSrc":"25779:3:11","nodeType":"YulIdentifier","src":"25779:3:11"},"nativeSrc":"25779:31:11","nodeType":"YulFunctionCall","src":"25779:31:11"}],"functionName":{"name":"mstore","nativeSrc":"25752:6:11","nodeType":"YulIdentifier","src":"25752:6:11"},"nativeSrc":"25752:59:11","nodeType":"YulFunctionCall","src":"25752:59:11"},"nativeSrc":"25752:59:11","nodeType":"YulExpressionStatement","src":"25752:59:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25831:9:11","nodeType":"YulIdentifier","src":"25831:9:11"},{"kind":"number","nativeSrc":"25842:2:11","nodeType":"YulLiteral","src":"25842:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25827:3:11","nodeType":"YulIdentifier","src":"25827:3:11"},"nativeSrc":"25827:18:11","nodeType":"YulFunctionCall","src":"25827:18:11"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"25857:6:11","nodeType":"YulIdentifier","src":"25857:6:11"},{"kind":"number","nativeSrc":"25865:2:11","nodeType":"YulLiteral","src":"25865:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25853:3:11","nodeType":"YulIdentifier","src":"25853:3:11"},"nativeSrc":"25853:15:11","nodeType":"YulFunctionCall","src":"25853:15:11"}],"functionName":{"name":"mload","nativeSrc":"25847:5:11","nodeType":"YulIdentifier","src":"25847:5:11"},"nativeSrc":"25847:22:11","nodeType":"YulFunctionCall","src":"25847:22:11"}],"functionName":{"name":"mstore","nativeSrc":"25820:6:11","nodeType":"YulIdentifier","src":"25820:6:11"},"nativeSrc":"25820:50:11","nodeType":"YulFunctionCall","src":"25820:50:11"},"nativeSrc":"25820:50:11","nodeType":"YulExpressionStatement","src":"25820:50:11"},{"nativeSrc":"25879:42:11","nodeType":"YulVariableDeclaration","src":"25879:42:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"25909:6:11","nodeType":"YulIdentifier","src":"25909:6:11"},{"kind":"number","nativeSrc":"25917:2:11","nodeType":"YulLiteral","src":"25917:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25905:3:11","nodeType":"YulIdentifier","src":"25905:3:11"},"nativeSrc":"25905:15:11","nodeType":"YulFunctionCall","src":"25905:15:11"}],"functionName":{"name":"mload","nativeSrc":"25899:5:11","nodeType":"YulIdentifier","src":"25899:5:11"},"nativeSrc":"25899:22:11","nodeType":"YulFunctionCall","src":"25899:22:11"},"variables":[{"name":"memberValue0","nativeSrc":"25883:12:11","nodeType":"YulTypedName","src":"25883:12:11","type":""}]},{"nativeSrc":"25930:20:11","nodeType":"YulVariableDeclaration","src":"25930:20:11","value":{"kind":"number","nativeSrc":"25940:10:11","nodeType":"YulLiteral","src":"25940:10:11","type":"","value":"0xffffffff"},"variables":[{"name":"_3","nativeSrc":"25934:2:11","nodeType":"YulTypedName","src":"25934:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25970:9:11","nodeType":"YulIdentifier","src":"25970:9:11"},{"kind":"number","nativeSrc":"25981:3:11","nodeType":"YulLiteral","src":"25981:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"25966:3:11","nodeType":"YulIdentifier","src":"25966:3:11"},"nativeSrc":"25966:19:11","nodeType":"YulFunctionCall","src":"25966:19:11"},{"arguments":[{"name":"memberValue0","nativeSrc":"25991:12:11","nodeType":"YulIdentifier","src":"25991:12:11"},{"name":"_3","nativeSrc":"26005:2:11","nodeType":"YulIdentifier","src":"26005:2:11"}],"functionName":{"name":"and","nativeSrc":"25987:3:11","nodeType":"YulIdentifier","src":"25987:3:11"},"nativeSrc":"25987:21:11","nodeType":"YulFunctionCall","src":"25987:21:11"}],"functionName":{"name":"mstore","nativeSrc":"25959:6:11","nodeType":"YulIdentifier","src":"25959:6:11"},"nativeSrc":"25959:50:11","nodeType":"YulFunctionCall","src":"25959:50:11"},"nativeSrc":"25959:50:11","nodeType":"YulExpressionStatement","src":"25959:50:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26029:9:11","nodeType":"YulIdentifier","src":"26029:9:11"},{"kind":"number","nativeSrc":"26040:3:11","nodeType":"YulLiteral","src":"26040:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"26025:3:11","nodeType":"YulIdentifier","src":"26025:3:11"},"nativeSrc":"26025:19:11","nodeType":"YulFunctionCall","src":"26025:19:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"26060:6:11","nodeType":"YulIdentifier","src":"26060:6:11"},{"kind":"number","nativeSrc":"26068:3:11","nodeType":"YulLiteral","src":"26068:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"26056:3:11","nodeType":"YulIdentifier","src":"26056:3:11"},"nativeSrc":"26056:16:11","nodeType":"YulFunctionCall","src":"26056:16:11"}],"functionName":{"name":"mload","nativeSrc":"26050:5:11","nodeType":"YulIdentifier","src":"26050:5:11"},"nativeSrc":"26050:23:11","nodeType":"YulFunctionCall","src":"26050:23:11"},{"name":"_3","nativeSrc":"26075:2:11","nodeType":"YulIdentifier","src":"26075:2:11"}],"functionName":{"name":"and","nativeSrc":"26046:3:11","nodeType":"YulIdentifier","src":"26046:3:11"},"nativeSrc":"26046:32:11","nodeType":"YulFunctionCall","src":"26046:32:11"}],"functionName":{"name":"mstore","nativeSrc":"26018:6:11","nodeType":"YulIdentifier","src":"26018:6:11"},"nativeSrc":"26018:61:11","nodeType":"YulFunctionCall","src":"26018:61:11"},"nativeSrc":"26018:61:11","nodeType":"YulExpressionStatement","src":"26018:61:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26099:9:11","nodeType":"YulIdentifier","src":"26099:9:11"},{"kind":"number","nativeSrc":"26110:3:11","nodeType":"YulLiteral","src":"26110:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"26095:3:11","nodeType":"YulIdentifier","src":"26095:3:11"},"nativeSrc":"26095:19:11","nodeType":"YulFunctionCall","src":"26095:19:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"26130:6:11","nodeType":"YulIdentifier","src":"26130:6:11"},{"kind":"number","nativeSrc":"26138:3:11","nodeType":"YulLiteral","src":"26138:3:11","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"26126:3:11","nodeType":"YulIdentifier","src":"26126:3:11"},"nativeSrc":"26126:16:11","nodeType":"YulFunctionCall","src":"26126:16:11"}],"functionName":{"name":"mload","nativeSrc":"26120:5:11","nodeType":"YulIdentifier","src":"26120:5:11"},"nativeSrc":"26120:23:11","nodeType":"YulFunctionCall","src":"26120:23:11"},{"name":"_3","nativeSrc":"26145:2:11","nodeType":"YulIdentifier","src":"26145:2:11"}],"functionName":{"name":"and","nativeSrc":"26116:3:11","nodeType":"YulIdentifier","src":"26116:3:11"},"nativeSrc":"26116:32:11","nodeType":"YulFunctionCall","src":"26116:32:11"}],"functionName":{"name":"mstore","nativeSrc":"26088:6:11","nodeType":"YulIdentifier","src":"26088:6:11"},"nativeSrc":"26088:61:11","nodeType":"YulFunctionCall","src":"26088:61:11"},"nativeSrc":"26088:61:11","nodeType":"YulExpressionStatement","src":"26088:61:11"},{"nativeSrc":"26158:45:11","nodeType":"YulVariableDeclaration","src":"26158:45:11","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"26190:6:11","nodeType":"YulIdentifier","src":"26190:6:11"},{"kind":"number","nativeSrc":"26198:3:11","nodeType":"YulLiteral","src":"26198:3:11","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"26186:3:11","nodeType":"YulIdentifier","src":"26186:3:11"},"nativeSrc":"26186:16:11","nodeType":"YulFunctionCall","src":"26186:16:11"}],"functionName":{"name":"mload","nativeSrc":"26180:5:11","nodeType":"YulIdentifier","src":"26180:5:11"},"nativeSrc":"26180:23:11","nodeType":"YulFunctionCall","src":"26180:23:11"},"variables":[{"name":"memberValue0_1","nativeSrc":"26162:14:11","nodeType":"YulTypedName","src":"26162:14:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26223:9:11","nodeType":"YulIdentifier","src":"26223:9:11"},{"kind":"number","nativeSrc":"26234:4:11","nodeType":"YulLiteral","src":"26234:4:11","type":"","value":"0xe0"}],"functionName":{"name":"add","nativeSrc":"26219:3:11","nodeType":"YulIdentifier","src":"26219:3:11"},"nativeSrc":"26219:20:11","nodeType":"YulFunctionCall","src":"26219:20:11"},{"kind":"number","nativeSrc":"26241:4:11","nodeType":"YulLiteral","src":"26241:4:11","type":"","value":"0xe0"}],"functionName":{"name":"mstore","nativeSrc":"26212:6:11","nodeType":"YulIdentifier","src":"26212:6:11"},"nativeSrc":"26212:34:11","nodeType":"YulFunctionCall","src":"26212:34:11"},"nativeSrc":"26212:34:11","nodeType":"YulExpressionStatement","src":"26212:34:11"},{"nativeSrc":"26255:35:11","nodeType":"YulVariableDeclaration","src":"26255:35:11","value":{"arguments":[{"name":"memberValue0_1","nativeSrc":"26275:14:11","nodeType":"YulIdentifier","src":"26275:14:11"}],"functionName":{"name":"mload","nativeSrc":"26269:5:11","nodeType":"YulIdentifier","src":"26269:5:11"},"nativeSrc":"26269:21:11","nodeType":"YulFunctionCall","src":"26269:21:11"},"variables":[{"name":"length","nativeSrc":"26259:6:11","nodeType":"YulTypedName","src":"26259:6:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26310:9:11","nodeType":"YulIdentifier","src":"26310:9:11"},{"kind":"number","nativeSrc":"26321:3:11","nodeType":"YulLiteral","src":"26321:3:11","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"26306:3:11","nodeType":"YulIdentifier","src":"26306:3:11"},"nativeSrc":"26306:19:11","nodeType":"YulFunctionCall","src":"26306:19:11"},{"name":"length","nativeSrc":"26327:6:11","nodeType":"YulIdentifier","src":"26327:6:11"}],"functionName":{"name":"mstore","nativeSrc":"26299:6:11","nodeType":"YulIdentifier","src":"26299:6:11"},"nativeSrc":"26299:35:11","nodeType":"YulFunctionCall","src":"26299:35:11"},"nativeSrc":"26299:35:11","nodeType":"YulExpressionStatement","src":"26299:35:11"},{"nativeSrc":"26343:10:11","nodeType":"YulVariableDeclaration","src":"26343:10:11","value":{"kind":"number","nativeSrc":"26352:1:11","nodeType":"YulLiteral","src":"26352:1:11","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"26347:1:11","nodeType":"YulTypedName","src":"26347:1:11","type":""}]},{"body":{"nativeSrc":"26412:99:11","nodeType":"YulBlock","src":"26412:99:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26441:9:11","nodeType":"YulIdentifier","src":"26441:9:11"},{"name":"i","nativeSrc":"26452:1:11","nodeType":"YulIdentifier","src":"26452:1:11"}],"functionName":{"name":"add","nativeSrc":"26437:3:11","nodeType":"YulIdentifier","src":"26437:3:11"},"nativeSrc":"26437:17:11","nodeType":"YulFunctionCall","src":"26437:17:11"},{"kind":"number","nativeSrc":"26456:3:11","nodeType":"YulLiteral","src":"26456:3:11","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"26433:3:11","nodeType":"YulIdentifier","src":"26433:3:11"},"nativeSrc":"26433:27:11","nodeType":"YulFunctionCall","src":"26433:27:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0_1","nativeSrc":"26476:14:11","nodeType":"YulIdentifier","src":"26476:14:11"},{"name":"i","nativeSrc":"26492:1:11","nodeType":"YulIdentifier","src":"26492:1:11"}],"functionName":{"name":"add","nativeSrc":"26472:3:11","nodeType":"YulIdentifier","src":"26472:3:11"},"nativeSrc":"26472:22:11","nodeType":"YulFunctionCall","src":"26472:22:11"},{"name":"_1","nativeSrc":"26496:2:11","nodeType":"YulIdentifier","src":"26496:2:11"}],"functionName":{"name":"add","nativeSrc":"26468:3:11","nodeType":"YulIdentifier","src":"26468:3:11"},"nativeSrc":"26468:31:11","nodeType":"YulFunctionCall","src":"26468:31:11"}],"functionName":{"name":"mload","nativeSrc":"26462:5:11","nodeType":"YulIdentifier","src":"26462:5:11"},"nativeSrc":"26462:38:11","nodeType":"YulFunctionCall","src":"26462:38:11"}],"functionName":{"name":"mstore","nativeSrc":"26426:6:11","nodeType":"YulIdentifier","src":"26426:6:11"},"nativeSrc":"26426:75:11","nodeType":"YulFunctionCall","src":"26426:75:11"},"nativeSrc":"26426:75:11","nodeType":"YulExpressionStatement","src":"26426:75:11"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"26373:1:11","nodeType":"YulIdentifier","src":"26373:1:11"},{"name":"length","nativeSrc":"26376:6:11","nodeType":"YulIdentifier","src":"26376:6:11"}],"functionName":{"name":"lt","nativeSrc":"26370:2:11","nodeType":"YulIdentifier","src":"26370:2:11"},"nativeSrc":"26370:13:11","nodeType":"YulFunctionCall","src":"26370:13:11"},"nativeSrc":"26362:149:11","nodeType":"YulForLoop","post":{"nativeSrc":"26384:19:11","nodeType":"YulBlock","src":"26384:19:11","statements":[{"nativeSrc":"26386:15:11","nodeType":"YulAssignment","src":"26386:15:11","value":{"arguments":[{"name":"i","nativeSrc":"26395:1:11","nodeType":"YulIdentifier","src":"26395:1:11"},{"name":"_1","nativeSrc":"26398:2:11","nodeType":"YulIdentifier","src":"26398:2:11"}],"functionName":{"name":"add","nativeSrc":"26391:3:11","nodeType":"YulIdentifier","src":"26391:3:11"},"nativeSrc":"26391:10:11","nodeType":"YulFunctionCall","src":"26391:10:11"},"variableNames":[{"name":"i","nativeSrc":"26386:1:11","nodeType":"YulIdentifier","src":"26386:1:11"}]}]},"pre":{"nativeSrc":"26366:3:11","nodeType":"YulBlock","src":"26366:3:11","statements":[]},"src":"26362:149:11"},{"nativeSrc":"26520:13:11","nodeType":"YulVariableDeclaration","src":"26520:13:11","value":{"kind":"number","nativeSrc":"26530:3:11","nodeType":"YulLiteral","src":"26530:3:11","type":"","value":"288"},"variables":[{"name":"_4","nativeSrc":"26524:2:11","nodeType":"YulTypedName","src":"26524:2:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26557:9:11","nodeType":"YulIdentifier","src":"26557:9:11"},{"name":"length","nativeSrc":"26568:6:11","nodeType":"YulIdentifier","src":"26568:6:11"}],"functionName":{"name":"add","nativeSrc":"26553:3:11","nodeType":"YulIdentifier","src":"26553:3:11"},"nativeSrc":"26553:22:11","nodeType":"YulFunctionCall","src":"26553:22:11"},{"name":"_4","nativeSrc":"26577:2:11","nodeType":"YulIdentifier","src":"26577:2:11"}],"functionName":{"name":"add","nativeSrc":"26549:3:11","nodeType":"YulIdentifier","src":"26549:3:11"},"nativeSrc":"26549:31:11","nodeType":"YulFunctionCall","src":"26549:31:11"},{"kind":"number","nativeSrc":"26582:1:11","nodeType":"YulLiteral","src":"26582:1:11","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"26542:6:11","nodeType":"YulIdentifier","src":"26542:6:11"},"nativeSrc":"26542:42:11","nodeType":"YulFunctionCall","src":"26542:42:11"},"nativeSrc":"26542:42:11","nodeType":"YulExpressionStatement","src":"26542:42:11"},{"nativeSrc":"26593:62:11","nodeType":"YulAssignment","src":"26593:62:11","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26609:9:11","nodeType":"YulIdentifier","src":"26609:9:11"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"26628:6:11","nodeType":"YulIdentifier","src":"26628:6:11"},{"kind":"number","nativeSrc":"26636:2:11","nodeType":"YulLiteral","src":"26636:2:11","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"26624:3:11","nodeType":"YulIdentifier","src":"26624:3:11"},"nativeSrc":"26624:15:11","nodeType":"YulFunctionCall","src":"26624:15:11"},{"arguments":[{"kind":"number","nativeSrc":"26645:2:11","nodeType":"YulLiteral","src":"26645:2:11","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"26641:3:11","nodeType":"YulIdentifier","src":"26641:3:11"},"nativeSrc":"26641:7:11","nodeType":"YulFunctionCall","src":"26641:7:11"}],"functionName":{"name":"and","nativeSrc":"26620:3:11","nodeType":"YulIdentifier","src":"26620:3:11"},"nativeSrc":"26620:29:11","nodeType":"YulFunctionCall","src":"26620:29:11"}],"functionName":{"name":"add","nativeSrc":"26605:3:11","nodeType":"YulIdentifier","src":"26605:3:11"},"nativeSrc":"26605:45:11","nodeType":"YulFunctionCall","src":"26605:45:11"},{"name":"_4","nativeSrc":"26652:2:11","nodeType":"YulIdentifier","src":"26652:2:11"}],"functionName":{"name":"add","nativeSrc":"26601:3:11","nodeType":"YulIdentifier","src":"26601:3:11"},"nativeSrc":"26601:54:11","nodeType":"YulFunctionCall","src":"26601:54:11"},"variableNames":[{"name":"tail","nativeSrc":"26593:4:11","nodeType":"YulIdentifier","src":"26593:4:11"}]}]},"name":"abi_encode_tuple_t_struct$_CrossChainOrder_$3213_memory_ptr__to_t_struct$_CrossChainOrder_$3213_memory_ptr__fromStack_reversed","nativeSrc":"25427:1234:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25563:9:11","nodeType":"YulTypedName","src":"25563:9:11","type":""},{"name":"value0","nativeSrc":"25574:6:11","nodeType":"YulTypedName","src":"25574:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25585:4:11","nodeType":"YulTypedName","src":"25585:4:11","type":""}],"src":"25427:1234:11"},{"body":{"nativeSrc":"26698:95:11","nodeType":"YulBlock","src":"26698:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"26715:1:11","nodeType":"YulLiteral","src":"26715:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"26722:3:11","nodeType":"YulLiteral","src":"26722:3:11","type":"","value":"224"},{"kind":"number","nativeSrc":"26727:10:11","nodeType":"YulLiteral","src":"26727:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"26718:3:11","nodeType":"YulIdentifier","src":"26718:3:11"},"nativeSrc":"26718:20:11","nodeType":"YulFunctionCall","src":"26718:20:11"}],"functionName":{"name":"mstore","nativeSrc":"26708:6:11","nodeType":"YulIdentifier","src":"26708:6:11"},"nativeSrc":"26708:31:11","nodeType":"YulFunctionCall","src":"26708:31:11"},"nativeSrc":"26708:31:11","nodeType":"YulExpressionStatement","src":"26708:31:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"26755:1:11","nodeType":"YulLiteral","src":"26755:1:11","type":"","value":"4"},{"kind":"number","nativeSrc":"26758:4:11","nodeType":"YulLiteral","src":"26758:4:11","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"26748:6:11","nodeType":"YulIdentifier","src":"26748:6:11"},"nativeSrc":"26748:15:11","nodeType":"YulFunctionCall","src":"26748:15:11"},"nativeSrc":"26748:15:11","nodeType":"YulExpressionStatement","src":"26748:15:11"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"26779:1:11","nodeType":"YulLiteral","src":"26779:1:11","type":"","value":"0"},{"kind":"number","nativeSrc":"26782:4:11","nodeType":"YulLiteral","src":"26782:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"26772:6:11","nodeType":"YulIdentifier","src":"26772:6:11"},"nativeSrc":"26772:15:11","nodeType":"YulFunctionCall","src":"26772:15:11"},"nativeSrc":"26772:15:11","nodeType":"YulExpressionStatement","src":"26772:15:11"}]},"name":"panic_error_0x21","nativeSrc":"26666:127:11","nodeType":"YulFunctionDefinition","src":"26666:127:11"},{"body":{"nativeSrc":"26979:217:11","nodeType":"YulBlock","src":"26979:217:11","statements":[{"nativeSrc":"26989:27:11","nodeType":"YulAssignment","src":"26989:27:11","value":{"arguments":[{"name":"headStart","nativeSrc":"27001:9:11","nodeType":"YulIdentifier","src":"27001:9:11"},{"kind":"number","nativeSrc":"27012:3:11","nodeType":"YulLiteral","src":"27012:3:11","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"26997:3:11","nodeType":"YulIdentifier","src":"26997:3:11"},"nativeSrc":"26997:19:11","nodeType":"YulFunctionCall","src":"26997:19:11"},"variableNames":[{"name":"tail","nativeSrc":"26989:4:11","nodeType":"YulIdentifier","src":"26989:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"27032:9:11","nodeType":"YulIdentifier","src":"27032:9:11"},{"name":"value0","nativeSrc":"27043:6:11","nodeType":"YulIdentifier","src":"27043:6:11"}],"functionName":{"name":"mstore","nativeSrc":"27025:6:11","nodeType":"YulIdentifier","src":"27025:6:11"},"nativeSrc":"27025:25:11","nodeType":"YulFunctionCall","src":"27025:25:11"},"nativeSrc":"27025:25:11","nodeType":"YulExpressionStatement","src":"27025:25:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27070:9:11","nodeType":"YulIdentifier","src":"27070:9:11"},{"kind":"number","nativeSrc":"27081:2:11","nodeType":"YulLiteral","src":"27081:2:11","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27066:3:11","nodeType":"YulIdentifier","src":"27066:3:11"},"nativeSrc":"27066:18:11","nodeType":"YulFunctionCall","src":"27066:18:11"},{"arguments":[{"name":"value1","nativeSrc":"27090:6:11","nodeType":"YulIdentifier","src":"27090:6:11"},{"kind":"number","nativeSrc":"27098:4:11","nodeType":"YulLiteral","src":"27098:4:11","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"27086:3:11","nodeType":"YulIdentifier","src":"27086:3:11"},"nativeSrc":"27086:17:11","nodeType":"YulFunctionCall","src":"27086:17:11"}],"functionName":{"name":"mstore","nativeSrc":"27059:6:11","nodeType":"YulIdentifier","src":"27059:6:11"},"nativeSrc":"27059:45:11","nodeType":"YulFunctionCall","src":"27059:45:11"},"nativeSrc":"27059:45:11","nodeType":"YulExpressionStatement","src":"27059:45:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27124:9:11","nodeType":"YulIdentifier","src":"27124:9:11"},{"kind":"number","nativeSrc":"27135:2:11","nodeType":"YulLiteral","src":"27135:2:11","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27120:3:11","nodeType":"YulIdentifier","src":"27120:3:11"},"nativeSrc":"27120:18:11","nodeType":"YulFunctionCall","src":"27120:18:11"},{"name":"value2","nativeSrc":"27140:6:11","nodeType":"YulIdentifier","src":"27140:6:11"}],"functionName":{"name":"mstore","nativeSrc":"27113:6:11","nodeType":"YulIdentifier","src":"27113:6:11"},"nativeSrc":"27113:34:11","nodeType":"YulFunctionCall","src":"27113:34:11"},"nativeSrc":"27113:34:11","nodeType":"YulExpressionStatement","src":"27113:34:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27167:9:11","nodeType":"YulIdentifier","src":"27167:9:11"},{"kind":"number","nativeSrc":"27178:2:11","nodeType":"YulLiteral","src":"27178:2:11","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"27163:3:11","nodeType":"YulIdentifier","src":"27163:3:11"},"nativeSrc":"27163:18:11","nodeType":"YulFunctionCall","src":"27163:18:11"},{"name":"value3","nativeSrc":"27183:6:11","nodeType":"YulIdentifier","src":"27183:6:11"}],"functionName":{"name":"mstore","nativeSrc":"27156:6:11","nodeType":"YulIdentifier","src":"27156:6:11"},"nativeSrc":"27156:34:11","nodeType":"YulFunctionCall","src":"27156:34:11"},"nativeSrc":"27156:34:11","nodeType":"YulExpressionStatement","src":"27156:34:11"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"26798:398:11","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26924:9:11","nodeType":"YulTypedName","src":"26924:9:11","type":""},{"name":"value3","nativeSrc":"26935:6:11","nodeType":"YulTypedName","src":"26935:6:11","type":""},{"name":"value2","nativeSrc":"26943:6:11","nodeType":"YulTypedName","src":"26943:6:11","type":""},{"name":"value1","nativeSrc":"26951:6:11","nodeType":"YulTypedName","src":"26951:6:11","type":""},{"name":"value0","nativeSrc":"26959:6:11","nodeType":"YulTypedName","src":"26959:6:11","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26970:4:11","nodeType":"YulTypedName","src":"26970:4:11","type":""}],"src":"26798:398:11"}]},"contents":"{\n    { }\n    function abi_decode_struct_CrossChainOrder_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 224) { revert(0, 0) }\n        value := offset\n    }\n    function abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_struct_CrossChainOrder_calldata(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_struct_CrossChainOrder_calldata(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_struct_CrossChainOrder_calldata(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_uint32(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffff))\n    }\n    function abi_encode_array_struct_Input_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _2 := mload(srcPtr)\n            mstore(pos, and(mload(_2), sub(shl(160, 1), 1)))\n            mstore(add(pos, _1), mload(add(_2, _1)))\n            pos := add(pos, 0x40)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_array_struct_Output_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _2 := mload(srcPtr)\n            let _3 := sub(shl(160, 1), 1)\n            mstore(pos, and(mload(_2), _3))\n            mstore(add(pos, _1), mload(add(_2, _1)))\n            let _4 := 0x40\n            mstore(add(pos, _4), and(mload(add(_2, _4)), _3))\n            let _5 := 0x60\n            mstore(add(pos, _5), and(mload(add(_2, _5)), 0xffffffff))\n            pos := add(pos, 0x80)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr__to_t_struct$_ResolvedCrossChainOrder_$3248_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        abi_encode_address(mload(value0), add(headStart, 32))\n        let memberValue0 := mload(add(value0, 32))\n        abi_encode_address(memberValue0, add(headStart, 64))\n        mstore(add(headStart, 96), mload(add(value0, 64)))\n        let memberValue0_1 := mload(add(value0, 96))\n        abi_encode_uint32(memberValue0_1, add(headStart, 128))\n        let memberValue0_2 := mload(add(value0, 128))\n        abi_encode_uint32(memberValue0_2, add(headStart, 160))\n        let memberValue0_3 := mload(add(value0, 160))\n        abi_encode_uint32(memberValue0_3, add(headStart, 192))\n        let memberValue0_4 := mload(add(value0, 192))\n        let _1 := 0x0120\n        mstore(add(headStart, 224), _1)\n        let tail_1 := abi_encode_array_struct_Input_dyn(memberValue0_4, add(headStart, 320))\n        let memberValue0_5 := mload(add(value0, 224))\n        let _2 := not(31)\n        let _3 := 256\n        mstore(add(headStart, _3), add(sub(tail_1, headStart), _2))\n        let tail_2 := abi_encode_array_struct_Output_dyn(memberValue0_5, tail_1)\n        let memberValue0_6 := mload(add(value0, _3))\n        mstore(add(headStart, _1), add(sub(tail_2, headStart), _2))\n        tail := abi_encode_array_struct_Output_dyn(memberValue0_6, tail_2)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xe0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function validator_revert_uint32(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_uint32(value)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function convert_t_struct$_CrossChainOrder_$3213_calldata_ptr_to_t_struct$_CrossChainOrder_$3213_memory_ptr(value) -> converted\n    {\n        if slt(sub(calldatasize(), value), 0xe0) { revert(0, 0) }\n        let value_1 := allocate_memory()\n        mstore(value_1, abi_decode_address(value))\n        mstore(add(value_1, 32), abi_decode_address(add(value, 32)))\n        mstore(add(value_1, 64), calldataload(add(value, 64)))\n        mstore(add(value_1, 96), abi_decode_uint32(add(value, 96)))\n        mstore(add(value_1, 128), abi_decode_uint32(add(value, 128)))\n        mstore(add(value_1, 160), abi_decode_uint32(add(value, 160)))\n        let offset := calldataload(add(value, 192))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        mstore(add(value_1, 192), abi_decode_bytes(add(value, offset), calldatasize()))\n        converted := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f1edf9865f16641a39963e24f35f76ecdd70eea17fec13ad6c5b24c4e834368e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"order A doesn't exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_123c727286f0d9a1a0d09df42fade7a309bf152a374ee47b0ccc6d891021206e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"order B doesn't exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e0e949177673e9f9469e46c8ae3049453c34926e4685857495dac5707f5b2212__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"invalid fillDeadline A\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4b2a6d023298acd2b5802bb3023b5aa070bfec6d087d8da494bbe4444988dfa1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"invalid fillDeadline B\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_41930f0bc9780c93d2e73f4050f0ea98a23ca7d321e649e89fd452f2c05c2422__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"invalid initiateDeadline A\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b8c550279d114b340bb9c11ac21ef4ce617440fdfd628c2d0b20759e38868d08__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"invalid initiateDeadline B\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_d601796037cf370c0b2e35f1db1ed868476fb5bfaa1033509fefa177fa42ac5e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"input amounts mismatch\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_40a0cee58853198d8542bc2a4a4e21eb2e185d8c974ab5afa5d6a3b8ef76a161__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"destination chains mismatch\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fb945459f1ea11798f739f23fe4369bb80c608b965f9afe5e22273b75bc11aa3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"invalid swapper\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e358f80d0950f2cb5516a6006839c8bd21fda25e2e8da03ae1d7e884e2f7f463__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"invalid origin chain\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f68dea25b2121ef63f16cbf66fb1ce6a288f88167942e5cf0162311f9fdd2158__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"order is matched\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a2271675b9d54702be65073dac4017cbbc09dc6b96183137f4b1a06492bbf0e9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"settlement not supported\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_uint32(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_b283f66470cf7c2f0aef23a92d46510a6f1eeaf88649fbf9d7a2a2000f193b95__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"invalid fillDeadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_aac48e8ef1da4bf3b3f872975626dc66a9c0ab710743fa45b4916128c158ec38__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"invalid initiateDeadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71713bd5478b586cac708caace92720e83db31d1de15cf938f760684d5501e10__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"invalid nonce\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_03924fc90aefba9a192d3b85b327d4c7172ad1107e2c1e65b2790c92b092cdc0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"invalid originChainId\")\n        tail := add(headStart, 96)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_b601b48934a5e0ad22058b921e0e8f54236eeea2ad7a294b6399a5167ec92ad4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"insufficient input amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_26a676b15b71d69e34107575030101aa26f954c7dfedd11c91bef20b7eaa6a6e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"insufficient msg.value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c8d87f63b84b62e30747d02f72298fa13930e340255f9c84a9c9f504965b6f64__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"dest chain id must be different\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_139653279c350dbad7cac2e107facefd8c97c47e2cbefb2b7a62cb70e605a12e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"invalid dest chain id\")\n        tail := add(headStart, 96)\n    }\n    function update_storage_value_offsett_address_to_address(slot, value)\n    {\n        sstore(slot, or(and(sload(slot), shl(160, 0xffffffffffffffffffffffff)), and(value, sub(shl(160, 1), 1))))\n    }\n    function read_from_calldatat_uint32(ptr) -> returnValue\n    {\n        let value := calldataload(ptr)\n        validator_revert_uint32(value)\n        returnValue := value\n    }\n    function update_storage_value_offsett_uint32_to_uint32(slot, value)\n    {\n        let _1 := sload(slot)\n        sstore(slot, or(and(_1, not(0xffffffff0000000000000000)), and(shl(64, value), 0xffffffff0000000000000000)))\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_bytes_calldata_to_bytes(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function update_storage_value_offset_0t_struct$_CrossChainOrder_$3213_calldata_ptr_to_t_struct$_CrossChainOrder_$3213_storage(slot, value)\n    {\n        let value_1 := calldataload(value)\n        validator_revert_address(value_1)\n        update_storage_value_offsett_address_to_address(slot, value_1)\n        let value_2 := calldataload(add(value, 32))\n        validator_revert_address(value_2)\n        update_storage_value_offsett_address_to_address(add(slot, 1), value_2)\n        sstore(add(slot, 2), calldataload(add(value, 64)))\n        let memberSlot := add(slot, 3)\n        let value_3 := calldataload(add(value, 96))\n        validator_revert_uint32(value_3)\n        let _1 := sload(memberSlot)\n        let value_4 := calldataload(add(value, 128))\n        validator_revert_uint32(value_4)\n        sstore(memberSlot, or(or(and(_1, not(0xffffffffffffffff)), and(value_3, 0xffffffff)), and(shl(32, value_4), 0xffffffff00000000)))\n        update_storage_value_offsett_uint32_to_uint32(memberSlot, read_from_calldatat_uint32(add(value, 160)))\n        let memberValue, memberValue_1 := access_calldata_tail_t_bytes_calldata_ptr(value, add(value, 192))\n        copy_byte_array_to_storage_from_bytes_calldata_to_bytes(add(slot, 4), memberValue, memberValue_1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function calldata_access_bytes_calldata(base_ref, ptr) -> value, length\n    {\n        let rel_offset_of_tail := calldataload(ptr)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let value_1 := add(rel_offset_of_tail, base_ref)\n        length := calldataload(value_1)\n        value := add(value_1, 0x20)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_struct$_CrossChainOrder_$3213_calldata_ptr__to_t_struct$_CrossChainOrder_$3213_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let value := calldataload(value0)\n        validator_revert_address(value)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value, _1))\n        let value_1 := calldataload(add(value0, 32))\n        validator_revert_address(value_1)\n        mstore(add(headStart, 64), and(value_1, _1))\n        mstore(add(headStart, 96), calldataload(add(value0, 64)))\n        let value_2 := calldataload(add(value0, 96))\n        validator_revert_uint32(value_2)\n        mstore(add(headStart, 128), and(value_2, 0xffffffff))\n        let memberValue0 := abi_decode_uint32(add(value0, 128))\n        abi_encode_uint32(memberValue0, add(headStart, 160))\n        let memberValue0_1 := abi_decode_uint32(add(value0, 160))\n        abi_encode_uint32(memberValue0_1, add(headStart, 192))\n        let memberValue0_2, memberValue1 := calldata_access_bytes_calldata(value0, add(value0, 192))\n        mstore(add(headStart, 0xe0), 0xe0)\n        tail := abi_encode_bytes_calldata(memberValue0_2, memberValue1, add(headStart, 256))\n    }\n    function abi_encode_tuple_t_stringliteral_ace1e7b04e285a8da71b87d1f0d17ee85d7c8fe93489c587ad25f6d41806ffe9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"order not matched\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_61ed4d5304cf716d2536dd758c8ed2cbcdef9e23345cb86ca689fded1396e98c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"match not expired\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_CrossChainOrder_$3213_memory_ptr__to_t_struct$_CrossChainOrder_$3213_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, 32)\n        let _2 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(mload(value0), _2))\n        mstore(add(headStart, 64), and(mload(add(value0, 32)), _2))\n        mstore(add(headStart, 96), mload(add(value0, 64)))\n        let memberValue0 := mload(add(value0, 96))\n        let _3 := 0xffffffff\n        mstore(add(headStart, 128), and(memberValue0, _3))\n        mstore(add(headStart, 160), and(mload(add(value0, 128)), _3))\n        mstore(add(headStart, 192), and(mload(add(value0, 160)), _3))\n        let memberValue0_1 := mload(add(value0, 192))\n        mstore(add(headStart, 0xe0), 0xe0)\n        let length := mload(memberValue0_1)\n        mstore(add(headStart, 256), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 288), mload(add(add(memberValue0_1, i), _1)))\n        }\n        let _4 := 288\n        mstore(add(add(headStart, length), _4), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), _4)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061009c5760003560e01c8063962fc2a311610064578063962fc2a31461015357806397b2b09f14610166578063bf6d01d314610186578063ed2a2d64146101b3578063f2fde38b146101e9578063ffc374c91461020957600080fd5b80635d357deb146100a1578063715018a6146100d45780637fe3826e146100eb57806387a61cbd1461010b5780638da5cb5b1461012b575b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046115b5565b610229565b6040519081526020015b60405180910390f35b3480156100e057600080fd5b506100e9610242565b005b3480156100f757600080fd5b506100e96101063660046115f2565b610256565b34801561011757600080fd5b506100e9610126366004611614565b6107ef565b34801561013757600080fd5b506000546040516001600160a01b0390911681526020016100cb565b6100e9610161366004611676565b610b05565b34801561017257600080fd5b506100e9610181366004611730565b611015565b34801561019257600080fd5b506101a66101a136600461175c565b61104e565b6040516100cb919061187a565b3480156101bf57600080fd5b506100c16101ce366004611959565b6001600160a01b031660009081526006602052604090205490565b3480156101f557600080fd5b506100e9610204366004611959565b6110c8565b34801561021557600080fd5b506100e9610224366004611614565b611103565b600061023c61023783611a5f565b611213565b92915050565b61024a611243565b6102546000611270565b565b6000828152600460208181526040808420815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015463ffffffff8082166060850152640100000000820481166080850152600160401b9091041660a0830152918201805491929160c0840191906102dd90611b04565b80601f016020809104026020016040519081016040528092919081815260200182805461030990611b04565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b5050509190925250505060208101519091506001600160a01b03166103ba5760405162461bcd60e51b81526020600482015260156024820152741bdc99195c881048191bd95cdb89dd08195e1a5cdd605a1b60448201526064015b60405180910390fd5b6000828152600460208181526040808420815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015463ffffffff8082166060850152640100000000820481166080850152600160401b9091041660a0830152918201805491929160c08401919061044190611b04565b80601f016020809104026020016040519081016040528092919081815260200182805461046d90611b04565b80156104ba5780601f1061048f576101008083540402835291602001916104ba565b820191906000526020600020905b81548152906001019060200180831161049d57829003601f168201915b5050509190925250505060208101519091506001600160a01b03166105195760405162461bcd60e51b81526020600482015260156024820152741bdc99195c881088191bd95cdb89dd08195e1a5cdd605a1b60448201526064016103b1565b428260a0015163ffffffff161161056b5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642066696c6c446561646c696e65204160501b60448201526064016103b1565b428160a0015163ffffffff16116105bd5760405162461bcd60e51b815260206004820152601660248201527534b73b30b634b2103334b6362232b0b23634b732902160511b60448201526064016103b1565b42826080015163ffffffff16116106165760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420696e697469617465446561646c696e65204100000000000060448201526064016103b1565b42816080015163ffffffff161161066f5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420696e697469617465446561646c696e65204200000000000060448201526064016103b1565b60008260c001518060200190518101906106899190611b38565b905060008260c001518060200190518101906106a59190611b38565b90508082146106ef5760405162461bcd60e51b81526020600482015260166024820152750d2dce0eae840c2dadeeadce8e640dad2e6dac2e8c6d60531b60448201526064016103b1565b606083015160008781526005602052604090205463ffffffff9091161480156107315750606084015160008681526005602052604090205463ffffffff909116145b61077d5760405162461bcd60e51b815260206004820152601b60248201527f64657374696e6174696f6e20636861696e73206d69736d61746368000000000060448201526064016103b1565b60008681526007602090815260408083204290819055888452818420819055898452600883528184208990558884529281902089905551828152879189917f1aee23318ace74c1893db3e517937c0e6a32fb0332ea01c816ed4d1467d11c3e910160405180910390a350505050505050565b6107f76112c5565b6000818152600460208181526040808420815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015463ffffffff8082166060850152640100000000820481166080850152600160401b9091041660a0830152918201805491929160c08401919061087e90611b04565b80601f01602080910402602001604051908101604052809291908181526020018280546108aa90611b04565b80156108f75780601f106108cc576101008083540402835291602001916108f7565b820191906000526020600020905b8154815290600101906020018083116108da57829003601f168201915b50505050508152505090506109093390565b6001600160a01b031681602001516001600160a01b03161461095f5760405162461bcd60e51b815260206004820152600f60248201526e34b73b30b634b21039bbb0b83832b960891b60448201526064016103b1565b46816060015163ffffffff16146109af5760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b21037b934b3b4b71031b430b4b760611b60448201526064016103b1565b600082815260076020526040902054156109fe5760405162461bcd60e51b815260206004820152601060248201526f1bdc99195c881a5cc81b585d18da195960821b60448201526064016103b1565b60008160c00151806020019051810190610a189190611b38565b60208301516040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015610a55573d6000803e3d6000fd5b5060008381526005602090815260408083205460049283905290832080546001600160a01b031990811682556001820180549091169055600281018490556003810180546bffffffffffffffffffffffff1916905590929091610aba9083018261154f565b505060008481526005602052604081205560405184907ff2503063536670d4ae6671a02eaab3a0174b1d36d85146ce8bd76913eae1d49890600090a2505050610b0260018055565b50565b610b0d6112c5565b610b55610b1986611a5f565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112f392505050565b610b955760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b60448201526064016103b1565b60026000610ba66020880188611959565b6001600160a01b0316815260208101919091526040016000205460ff16610c0f5760405162461bcd60e51b815260206004820152601860248201527f736574746c656d656e74206e6f7420737570706f72746564000000000000000060448201526064016103b1565b42610c2060c0870160a08801611b51565b63ffffffff1611610c6a5760405162461bcd60e51b8152602060048201526014602482015273696e76616c69642066696c6c446561646c696e6560601b60448201526064016103b1565b42610c7b60a0870160808801611b51565b63ffffffff1611610cce5760405162461bcd60e51b815260206004820152601860248201527f696e76616c696420696e697469617465446561646c696e65000000000000000060448201526064016103b1565b3360009081526006602052604090819020549086013514610d215760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b60448201526064016103b1565b46610d326080870160608801611b51565b63ffffffff1614610d7d5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a59081bdc9a59da5b90da185a5b9259605a1b60448201526064016103b1565b33610d8e6040870160208801611959565b6001600160a01b031614610dd65760405162461bcd60e51b815260206004820152600f60248201526e34b73b30b634b21039bbb0b83832b960891b60448201526064016103b1565b6000610de560c0870187611b6e565b810190610df29190611614565b905060008111610e445760405162461bcd60e51b815260206004820152601960248201527f696e73756666696369656e7420696e70757420616d6f756e740000000000000060448201526064016103b1565b803414610e8c5760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206d73672e76616c756560501b60448201526064016103b1565b6000610e9a83850185611614565b9050468103610eeb5760405162461bcd60e51b815260206004820152601f60248201527f6465737420636861696e206964206d75737420626520646966666572656e740060448201526064016103b1565b8060036000610efd60208b018b611959565b6001600160a01b03166001600160a01b031681526020019081526020016000205414610f635760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590819195cdd0818da185a5b881a59605a1b60448201526064016103b1565b6000610f7161023789611a5f565b60008181526004602052604090209091508890610f8e8282611cf2565b5050600081815260056020908152604080832085905533835260069091528120805460019290610fbf908490611dd3565b90915550610fca9050565b807f2952d12adb64a657dc2f54e4263d91d1e436254a0bd4472a3c316eec49d37d0c89604051610ffa9190611e63565b60405180910390a250505061100e60018055565b5050505050565b61101d611243565b6001600160a01b039091166000908152600260209081526040808320805460ff191660011790556003909152902055565b6110c160405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016060815260200160608152602001606081525090565b9392505050565b6110d0611243565b6001600160a01b0381166110fa57604051631e4fbdf760e01b8152600060048201526024016103b1565b610b0281611270565b600081815260086020526040902054806111535760405162461bcd60e51b81526020600482015260116024820152701bdc99195c881b9bdd081b585d18da1959607a1b60448201526064016103b1565b60008281526007602052604090205461116e8161012c611dd3565b42116111b05760405162461bcd60e51b81526020600482015260116024820152701b585d18da081b9bdd08195e1c1a5c9959607a1b60448201526064016103b1565b60008381526007602090815260408083208390558483528083208390558583526008909152808220829055838252812055604051829084907f7e3d72398aa2625ef2e29633991f10f8fa8d91a2f165fd6a122f2862ab1cccdf90600090a3505050565b6000816040516020016112269190611f21565b604051602081830303815290604052805190602001209050919050565b6000546001600160a01b031633146102545760405163118cdaa760e01b81523360048201526024016103b1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b505050565b6002600154036112e857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b5050565b60003361133f8361133961130687611213565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90611350565b6001600160a01b0316149392505050565b600080600080611360868661137a565b92509250925061137082826113c7565b5090949350505050565b600080600083516041036113b45760208401516040850151606086015160001a6113a688828585611480565b9550955095505050506113c0565b50508151600091506002905b9250925092565b60008260038111156113db576113db611fd4565b036113e4575050565b60018260038111156113f8576113f8611fd4565b036114165760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561142a5761142a611fd4565b0361144b5760405163fce698f760e01b8152600481018290526024016103b1565b600382600381111561145f5761145f611fd4565b036112ef576040516335e2f38360e21b8152600481018290526024016103b1565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156114bb5750600091506003905082611545565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561150f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661153b57506000925060019150829050611545565b9250600091508190505b9450945094915050565b50805461155b90611b04565b6000825580601f1061156b575050565b601f016020900490600052602060002090810190610b0291905b808211156115995760008155600101611585565b5090565b600060e082840312156115af57600080fd5b50919050565b6000602082840312156115c757600080fd5b813567ffffffffffffffff8111156115de57600080fd5b6115ea8482850161159d565b949350505050565b6000806040838503121561160557600080fd5b50508035926020909101359150565b60006020828403121561162657600080fd5b5035919050565b60008083601f84011261163f57600080fd5b50813567ffffffffffffffff81111561165757600080fd5b60208301915083602082850101111561166f57600080fd5b9250929050565b60008060008060006060868803121561168e57600080fd5b853567ffffffffffffffff808211156116a657600080fd5b6116b289838a0161159d565b965060208801359150808211156116c857600080fd5b6116d489838a0161162d565b909650945060408801359150808211156116ed57600080fd5b506116fa8882890161162d565b969995985093965092949392505050565b6001600160a01b0381168114610b0257600080fd5b803561172b8161170b565b919050565b6000806040838503121561174357600080fd5b823561174e8161170b565b946020939093013593505050565b60008060006040848603121561177157600080fd5b833567ffffffffffffffff8082111561178957600080fd5b6117958783880161159d565b945060208601359150808211156117ab57600080fd5b506117b88682870161162d565b9497909650939450505050565b60008151808452602080850194506020840160005b8381101561180a57815180516001600160a01b0316885283015183880152604090960195908201906001016117da565b509495945050505050565b60008151808452602080850194506020840160005b8381101561180a57815180516001600160a01b03908116895284820151858a01526040808301519091169089015260609081015163ffffffff16908801526080909601959082019060010161182a565b602081526118946020820183516001600160a01b03169052565b600060208301516118b060408401826001600160a01b03169052565b506040830151606083015260608301516118d2608084018263ffffffff169052565b50608083015163ffffffff811660a08401525060a083015163ffffffff811660c08401525060c08301516101208060e08501526119136101408501836117c5565b915060e0850151601f196101008187860301818801526119338584611815565b90880151878203909201848801529350905061194f8382611815565b9695505050505050565b60006020828403121561196b57600080fd5b81356110c18161170b565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156119af576119af611976565b60405290565b63ffffffff81168114610b0257600080fd5b803561172b816119b5565b600082601f8301126119e357600080fd5b813567ffffffffffffffff808211156119fe576119fe611976565b604051601f8301601f19908116603f01168101908282118183101715611a2657611a26611976565b81604052838152866020858801011115611a3f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060e08236031215611a7157600080fd5b611a7961198c565b611a8283611720565b8152611a9060208401611720565b602082015260408301356040820152611aab606084016119c7565b6060820152611abc608084016119c7565b6080820152611acd60a084016119c7565b60a082015260c083013567ffffffffffffffff811115611aec57600080fd5b611af8368286016119d2565b60c08301525092915050565b600181811c90821680611b1857607f821691505b6020821081036115af57634e487b7160e01b600052602260045260246000fd5b600060208284031215611b4a57600080fd5b5051919050565b600060208284031215611b6357600080fd5b81356110c1816119b5565b6000808335601e19843603018112611b8557600080fd5b83018035915067ffffffffffffffff821115611ba057600080fd5b60200191503681900382131561166f57600080fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813561023c816119b5565b601f8211156112c0576000816000526020600020601f850160051c81016020861015611c0b5750805b601f850160051c820191505b81811015611c2a57828155600101611c17565b505050505050565b67ffffffffffffffff831115611c4a57611c4a611976565b611c5e83611c588354611b04565b83611be2565b6000601f841160018114611c925760008515611c7a5750838201355b600019600387901b1c1916600186901b17835561100e565b600083815260209020601f19861690835b82811015611cc35786850135825560209485019460019092019101611ca3565b5086821015611ce05760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135611cfd8161170b565b611d078183611bb5565b506020820135611d168161170b565b611d238160018401611bb5565b5060408201356002820155600381016060830135611d40816119b5565b81546080850135611d50816119b5565b67ffffffff000000008160201b1663ffffffff841667ffffffffffffffff19841617178455505050611db1611d8760a08501611bd5565b82546bffffffff0000000000000000191660409190911b6bffffffff000000000000000016178255565b50611dbf60c0830183611b6e565b611dcd818360048601611c32565b50505050565b8082018082111561023c57634e487b7160e01b600052601160045260246000fd5b6000808335601e19843603018112611e0b57600080fd5b830160208101925035905067ffffffffffffffff811115611e2b57600080fd5b80360382131561166f57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260008235611e748161170b565b6001600160a01b0390811660208481019190915284013590611e958261170b565b80821660408501525050604083013560608301526060830135611eb7816119b5565b63ffffffff8116608084015250611ed0608084016119c7565b63ffffffff811660a084015250611ee960a084016119c7565b63ffffffff811660c084015250611f0360c0840184611df4565b60e080850152611f1861010085018284611e3a565b95945050505050565b6000602080835260018060a01b038085511660208501528060208601511660408501525060408401516060840152606084015163ffffffff80821660808601528060808701511660a08601528060a08701511660c0860152505060c084015160e08085015280518061010086015260005b81811015611faf5782810184015186820161012001528301611f92565b506101209250600083828701015282601f19601f830116860101935050505092915050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ee4a8cd9f573951438a6da77f7b91c4fa2041a2f2b3d31a205371f738a3b382664736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x962FC2A3 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x962FC2A3 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x97B2B09F EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xBF6D01D3 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xED2A2D64 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xFFC374C9 EQ PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5D357DEB EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x7FE3826E EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x87A61CBD EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x242 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x15F2 JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCB JUMP JUMPDEST PUSH2 0xE9 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x1676 JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x181 CALLDATASIZE PUSH1 0x4 PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x1015 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x104E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x187A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x1959 JUMP JUMPDEST PUSH2 0x10C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x1103 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23C PUSH2 0x237 DUP4 PUSH2 0x1A5F JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x24A PUSH2 0x1243 JUMP JUMPDEST PUSH2 0x254 PUSH1 0x0 PUSH2 0x1270 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 PUSH2 0x2DD SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x309 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x356 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x32B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x356 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x339 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1BDC99195C881048191BD95CDB89DD08195E1A5CDD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 PUSH2 0x441 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x46D SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4BA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x48F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4BA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x49D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x519 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1BDC99195C881088191BD95CDB89DD08195E1A5CDD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP3 PUSH1 0xA0 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x696E76616C69642066696C6C446561646C696E652041 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP2 PUSH1 0xA0 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x5BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x34B73B30B634B2103334B6362232B0B23634B7329021 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP3 PUSH1 0x80 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420696E697469617465446561646C696E652041000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP DUP2 PUSH1 0x80 ADD MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420696E697469617465446561646C696E652042000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xC0 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x689 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0xC0 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6A5 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0xD2DCE0EAE840C2DADEEADCE8E640DAD2E6DAC2E8C6D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND EQ DUP1 ISZERO PUSH2 0x731 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND EQ JUMPDEST PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64657374696E6174696F6E20636861696E73206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 TIMESTAMP SWAP1 DUP2 SWAP1 SSTORE DUP9 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP10 DUP5 MSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP10 SWAP1 SSTORE DUP9 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP10 SWAP1 SSTORE MLOAD DUP3 DUP2 MSTORE DUP8 SWAP2 DUP10 SWAP2 PUSH32 0x1AEE23318ACE74C1893DB3E517937C0E6A32FB0332EA01C816ED4D1467D11C3E SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7F7 PUSH2 0x12C5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 PUSH2 0x87E SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8AA SWAP1 PUSH2 0x1B04 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8F7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8CC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8F7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8DA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP PUSH2 0x909 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x34B73B30B634B21039BBB0B83832B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CHAINID DUP2 PUSH1 0x60 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ PUSH2 0x9AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x34B73B30B634B21037B934B3B4B71031B430B4B7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x9FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x1BDC99195C881A5CC81B585D18DA1959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xC0 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA18 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x4 SWAP3 DUP4 SWAP1 MSTORE SWAP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH2 0xABA SWAP1 DUP4 ADD DUP3 PUSH2 0x154F JUMP JUMPDEST POP POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x40 MLOAD DUP5 SWAP1 PUSH32 0xF2503063536670D4AE6671A02EAAB3A0174B1D36D85146CE8BD76913EAE1D498 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP PUSH2 0xB02 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB0D PUSH2 0x12C5 JUMP JUMPDEST PUSH2 0xB55 PUSH2 0xB19 DUP7 PUSH2 0x1A5F JUMP JUMPDEST DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x12F3 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xB95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x696E76616C6964207369676E6174757265 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 PUSH2 0xBA6 PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC0F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574746C656D656E74206E6F7420737570706F727465640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP PUSH2 0xC20 PUSH1 0xC0 DUP8 ADD PUSH1 0xA0 DUP9 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND GT PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x696E76616C69642066696C6C446561646C696E65 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST TIMESTAMP PUSH2 0xC7B PUSH1 0xA0 DUP8 ADD PUSH1 0x80 DUP9 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND GT PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420696E697469617465446561646C696E650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP7 ADD CALLDATALOAD EQ PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x696E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CHAINID PUSH2 0xD32 PUSH1 0x80 DUP8 ADD PUSH1 0x60 DUP9 ADD PUSH2 0x1B51 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND EQ PUSH2 0xD7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1A5B9D985B1A59081BDC9A59DA5B90DA185A5B9259 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST CALLER PUSH2 0xD8E PUSH1 0x40 DUP8 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x34B73B30B634B21039BBB0B83832B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE5 PUSH1 0xC0 DUP8 ADD DUP8 PUSH2 0x1B6E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xDF2 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xE44 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E7420696E70757420616D6F756E7400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST DUP1 CALLVALUE EQ PUSH2 0xE8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x696E73756666696369656E74206D73672E76616C7565 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9A DUP4 DUP6 ADD DUP6 PUSH2 0x1614 JUMP JUMPDEST SWAP1 POP CHAINID DUP2 SUB PUSH2 0xEEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465737420636861696E206964206D75737420626520646966666572656E7400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0xEFD PUSH1 0x20 DUP12 ADD DUP12 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ PUSH2 0xF63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1A5B9D985B1A590819195CDD0818DA185A5B881A59 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF71 PUSH2 0x237 DUP10 PUSH2 0x1A5F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP9 SWAP1 PUSH2 0xF8E DUP3 DUP3 PUSH2 0x1CF2 JUMP JUMPDEST POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE CALLER DUP4 MSTORE PUSH1 0x6 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xFBF SWAP1 DUP5 SWAP1 PUSH2 0x1DD3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xFCA SWAP1 POP JUMP JUMPDEST DUP1 PUSH32 0x2952D12ADB64A657DC2F54E4263D91D1E436254A0BD4472A3C316EEC49D37D0C DUP10 PUSH1 0x40 MLOAD PUSH2 0xFFA SWAP2 SWAP1 PUSH2 0x1E63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP PUSH2 0x100E PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x101D PUSH2 0x1243 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0x10C1 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x10D0 PUSH2 0x1243 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10FA JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH2 0xB02 DUP2 PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1153 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1BDC99195C881B9BDD081B585D18DA1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x116E DUP2 PUSH2 0x12C PUSH2 0x1DD3 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x11B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1B585D18DA081B9BDD08195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP5 DUP4 MSTORE DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP6 DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE DUP4 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 DUP5 SWAP1 PUSH32 0x7E3D72398AA2625EF2E29633991F10F8FA8D91A2F165FD6A122F2862AB1CCCDF SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1226 SWAP2 SWAP1 PUSH2 0x1F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x254 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x12E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x133F DUP4 PUSH2 0x1339 PUSH2 0x1306 DUP8 PUSH2 0x1213 JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1350 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1360 DUP7 DUP7 PUSH2 0x137A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1370 DUP3 DUP3 PUSH2 0x13C7 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 MLOAD PUSH1 0x41 SUB PUSH2 0x13B4 JUMPI PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x13A6 DUP9 DUP3 DUP6 DUP6 PUSH2 0x1480 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x13C0 JUMP JUMPDEST POP POP DUP2 MLOAD PUSH1 0x0 SWAP2 POP PUSH1 0x2 SWAP1 JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x13DB JUMPI PUSH2 0x13DB PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x13E4 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x13F8 JUMPI PUSH2 0x13F8 PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x1416 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x142A JUMPI PUSH2 0x142A PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x144B JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x145F JUMPI PUSH2 0x145F PUSH2 0x1FD4 JUMP JUMPDEST SUB PUSH2 0x12EF JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0x14BB JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0x1545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x150F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x153B JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0x1545 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x155B SWAP1 PUSH2 0x1B04 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x156B JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB02 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1599 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1585 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15EA DUP5 DUP3 DUP6 ADD PUSH2 0x159D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x163F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x166F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x168E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16B2 DUP10 DUP4 DUP11 ADD PUSH2 0x159D JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D4 DUP10 DUP4 DUP11 ADD PUSH2 0x162D JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x16ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16FA DUP9 DUP3 DUP10 ADD PUSH2 0x162D JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x172B DUP2 PUSH2 0x170B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1743 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x174E DUP2 PUSH2 0x170B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1771 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1795 DUP8 DUP4 DUP9 ADD PUSH2 0x159D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B8 DUP7 DUP3 DUP8 ADD PUSH2 0x162D JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x180A JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 MSTORE DUP4 ADD MLOAD DUP4 DUP9 ADD MSTORE PUSH1 0x40 SWAP1 SWAP7 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x17DA JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x180A JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP10 MSTORE DUP5 DUP3 ADD MLOAD DUP6 DUP11 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP10 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP9 ADD MSTORE PUSH1 0x80 SWAP1 SWAP7 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x182A JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x1894 PUSH1 0x20 DUP3 ADD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x18B0 PUSH1 0x40 DUP5 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x18D2 PUSH1 0x80 DUP5 ADD DUP3 PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x120 DUP1 PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x1913 PUSH2 0x140 DUP6 ADD DUP4 PUSH2 0x17C5 JUMP JUMPDEST SWAP2 POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x1F NOT PUSH2 0x100 DUP2 DUP8 DUP7 SUB ADD DUP2 DUP9 ADD MSTORE PUSH2 0x1933 DUP6 DUP5 PUSH2 0x1815 JUMP JUMPDEST SWAP1 DUP9 ADD MLOAD DUP8 DUP3 SUB SWAP1 SWAP3 ADD DUP5 DUP9 ADD MSTORE SWAP4 POP SWAP1 POP PUSH2 0x194F DUP4 DUP3 PUSH2 0x1815 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10C1 DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19AF JUMPI PUSH2 0x19AF PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x172B DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19FE JUMPI PUSH2 0x19FE PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1A26 JUMPI PUSH2 0x1A26 PUSH2 0x1976 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x1A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 CALLDATASIZE SUB SLT ISZERO PUSH2 0x1A71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A79 PUSH2 0x198C JUMP JUMPDEST PUSH2 0x1A82 DUP4 PUSH2 0x1720 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1A90 PUSH1 0x20 DUP5 ADD PUSH2 0x1720 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1AAB PUSH1 0x60 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1ABC PUSH1 0x80 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x1ACD PUSH1 0xA0 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF8 CALLDATASIZE DUP3 DUP7 ADD PUSH2 0x19D2 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1B18 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x15AF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10C1 DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1B85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x166F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0x23C DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x12C0 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1C0B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C2A JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1C17 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1C4A JUMPI PUSH2 0x1C4A PUSH2 0x1976 JUMP JUMPDEST PUSH2 0x1C5E DUP4 PUSH2 0x1C58 DUP4 SLOAD PUSH2 0x1B04 JUMP JUMPDEST DUP4 PUSH2 0x1BE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1C92 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x1C7A JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x100E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1CC3 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1CA3 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x1CE0 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CFD DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1D07 DUP2 DUP4 PUSH2 0x1BB5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x1D16 DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1D23 DUP2 PUSH1 0x1 DUP5 ADD PUSH2 0x1BB5 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH2 0x1D40 DUP2 PUSH2 0x19B5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x1D50 DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH8 0xFFFFFFFF00000000 DUP2 PUSH1 0x20 SHL AND PUSH4 0xFFFFFFFF DUP5 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP5 AND OR OR DUP5 SSTORE POP POP POP PUSH2 0x1DB1 PUSH2 0x1D87 PUSH1 0xA0 DUP6 ADD PUSH2 0x1BD5 JUMP JUMPDEST DUP3 SLOAD PUSH12 0xFFFFFFFF0000000000000000 NOT AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFF0000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST POP PUSH2 0x1DBF PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x1DCD DUP2 DUP4 PUSH1 0x4 DUP7 ADD PUSH2 0x1C32 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x23C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x166F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x1E74 DUP2 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 ADD CALLDATALOAD SWAP1 PUSH2 0x1E95 DUP3 PUSH2 0x170B JUMP JUMPDEST DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH2 0x1EB7 DUP2 PUSH2 0x19B5 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH2 0x1ED0 PUSH1 0x80 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE POP PUSH2 0x1EE9 PUSH1 0xA0 DUP5 ADD PUSH2 0x19C7 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE POP PUSH2 0x1F03 PUSH1 0xC0 DUP5 ADD DUP5 PUSH2 0x1DF4 JUMP JUMPDEST PUSH1 0xE0 DUP1 DUP6 ADD MSTORE PUSH2 0x1F18 PUSH2 0x100 DUP6 ADD DUP3 DUP5 PUSH2 0x1E3A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP6 MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE DUP1 PUSH1 0x20 DUP7 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x80 DUP7 ADD MSTORE DUP1 PUSH1 0x80 DUP8 ADD MLOAD AND PUSH1 0xA0 DUP7 ADD MSTORE DUP1 PUSH1 0xA0 DUP8 ADD MLOAD AND PUSH1 0xC0 DUP7 ADD MSTORE POP POP PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xE0 DUP1 DUP6 ADD MSTORE DUP1 MLOAD DUP1 PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1FAF JUMPI DUP3 DUP2 ADD DUP5 ADD MLOAD DUP7 DUP3 ADD PUSH2 0x120 ADD MSTORE DUP4 ADD PUSH2 0x1F92 JUMP JUMPDEST POP PUSH2 0x120 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP8 ADD ADD MSTORE DUP3 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP7 ADD ADD SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0x4A DUP13 0xD9 CREATE2 PUSH20 0x951438A6DA77F7B91C4FA2041A2F2B3D31A20537 0x1F PUSH20 0x8A3B382664736F6C634300081600330000000000 ","sourceMap":"623:8196:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;952:131;;;;;;;;;;-1:-1:-1;952:131:9;;;;;:::i;:::-;;:::i;:::-;;;706:25:11;;;694:2;679:18;952:131:9;;;;;;;;2293:101:0;;;;;;;;;;;;;:::i;:::-;;6481:1498:9;;;;;;;;;;-1:-1:-1;6481:1498:9;;;;;:::i;:::-;;:::i;4368:655::-;;;;;;;;;;-1:-1:-1;4368:655:9;;;;;:::i;:::-;;:::i;1638:85:0:-;;;;;;;;;;-1:-1:-1;1684:7:0;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:0;;;1435:51:11;;1423:2;1408:18;1638:85:0;1289:203:11;2948:1414:9;;;;;;:::i;:::-;;:::i;1644:224::-;;;;;;;;;;-1:-1:-1;1644:224:9;;;;;:::i;:::-;;:::i;8678:139::-;;;;;;;;;;-1:-1:-1;8678:139:9;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5029:101::-;;;;;;;;;;-1:-1:-1;5029:101:9;;;;;:::i;:::-;-1:-1:-1;;;;;5109:14:9;5083:7;5109:14;;;:8;:14;;;;;;;5029:101;2543:215:0;;;;;;;;;;-1:-1:-1;2543:215:0;;;;;:::i;:::-;;:::i;7985:646:9:-;;;;;;;;;;-1:-1:-1;7985:646:9;;;;;:::i;:::-;;:::i;952:131::-;1033:7;1059:17;;1070:5;1059:17;:::i;:::-;:10;:17::i;:::-;1052:24;952:131;-1:-1:-1;;952:131:9:o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;6481:1498:9:-;6561:29;6593:19;;;:7;:19;;;;;;;;6561:51;;;;;;;;;-1:-1:-1;;;;;6561:51:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6561:51:9;;;;;;;;;;;;;;;6593:19;6561:51;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6561:51:9;;;;-1:-1:-1;;;6630:14:9;;;;6561:51;;-1:-1:-1;;;;;;6630:28:9;6622:62;;;;-1:-1:-1;;;6622:62:9;;10265:2:11;6622:62:9;;;10247:21:11;10304:2;10284:18;;;10277:30;-1:-1:-1;;;10323:18:11;;;10316:51;10384:18;;6622:62:9;;;;;;;;;6694:29;6726:19;;;:7;:19;;;;;;;;6694:51;;;;;;;;;-1:-1:-1;;;;;6694:51:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6694:51:9;;;;;;;;;;;;;;;6726:19;6694:51;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6694:51:9;;;;-1:-1:-1;;;6763:14:9;;;;6694:51;;-1:-1:-1;;;;;;6763:28:9;6755:62;;;;-1:-1:-1;;;6755:62:9;;10615:2:11;6755:62:9;;;10597:21:11;10654:2;10634:18;;;10627:30;-1:-1:-1;;;10673:18:11;;;10666:51;10734:18;;6755:62:9;10413:345:11;6755:62:9;6858:15;6836:6;:19;;;:37;;;6828:72;;;;-1:-1:-1;;;6828:72:9;;10965:2:11;6828:72:9;;;10947:21:11;11004:2;10984:18;;;10977:30;-1:-1:-1;;;11023:18:11;;;11016:52;11085:18;;6828:72:9;10763:346:11;6828:72:9;6940:15;6918:6;:19;;;:37;;;6910:72;;;;-1:-1:-1;;;6910:72:9;;11316:2:11;6910:72:9;;;11298:21:11;11355:2;11335:18;;;11328:30;-1:-1:-1;;;11374:18:11;;;11367:52;11436:18;;6910:72:9;11114:346:11;6910:72:9;7026:15;7000:6;:23;;;:41;;;6992:80;;;;-1:-1:-1;;;6992:80:9;;11667:2:11;6992:80:9;;;11649:21:11;11706:2;11686:18;;;11679:30;11745:28;11725:18;;;11718:56;11791:18;;6992:80:9;11465:350:11;6992:80:9;7116:15;7090:6;:23;;;:41;;;7082:80;;;;-1:-1:-1;;;7082:80:9;;12022:2:11;7082:80:9;;;12004:21:11;12061:2;12041:18;;;12034:30;12100:28;12080:18;;;12073:56;12146:18;;7082:80:9;11820:350:11;7082:80:9;7174:20;7209:6;:16;;;7198:39;;;;;;;;;;;;:::i;:::-;7173:64;;7248:20;7283:6;:16;;;7272:39;;;;;;;;;;;;:::i;:::-;7247:64;;7345:12;7329;:28;7321:63;;;;-1:-1:-1;;;7321:63:9;;12566:2:11;7321:63:9;;;12548:21:11;12605:2;12585:18;;;12578:30;-1:-1:-1;;;12624:18:11;;;12617:52;12686:18;;7321:63:9;12364:346:11;7321:63:9;7443:20;;;;7416:23;;;;:11;:23;;;;;;:47;;;;;:110;;;;-1:-1:-1;7506:20:9;;;;7479:23;;;;:11;:23;;;;;;:47;;;;;7416:110;7395:184;;;;-1:-1:-1;;;7395:184:9;;12917:2:11;7395:184:9;;;12899:21:11;12956:2;12936:18;;;12929:30;12995:29;12975:18;;;12968:57;13042:18;;7395:184:9;12715:351:11;7395:184:9;7590:22;7640:28;;;:16;:28;;;;;;;;7615:15;7640:45;;;;7695:28;;;;;;:45;;;7750:26;;;:14;:26;;;;;:39;;;7799:26;;;;;;;:39;;;7919:53;706:25:11;;;7695:28:9;;7640;;7919:53;;679:18:11;7919:53:9;;;;;;;6551:1428;;;;;6481:1498;;:::o;4368:655::-;2356:21:3;:19;:21::i;:::-;4435:28:9::1;4466:13:::0;;;:7:::1;:13;::::0;;;;;;;4435:44;;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;;;4435:44:9;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;4435:44:9;;::::1;;::::0;;;;;;::::1;::::0;;;;4466:13;4435:44;;;;;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;4514:12;735:10:2::0;;656:96;4514:12:9::1;-1:-1:-1::0;;;;;4497:29:9::1;:5;:13;;;-1:-1:-1::0;;;;;4497:29:9::1;;4489:57;;;::::0;-1:-1:-1;;;4489:57:9;;13273:2:11;4489:57:9::1;::::0;::::1;13255:21:11::0;13312:2;13292:18;;;13285:30;-1:-1:-1;;;13331:18:11;;;13324:45;13386:18;;4489:57:9::1;13071:339:11::0;4489:57:9::1;4587:13;4564:5;:19;;;:36;;;4556:69;;;::::0;-1:-1:-1;;;4556:69:9;;13617:2:11;4556:69:9::1;::::0;::::1;13599:21:11::0;13656:2;13636:18;;;13629:30;-1:-1:-1;;;13675:18:11;;;13668:50;13735:18;;4556:69:9::1;13415:344:11::0;4556:69:9::1;4643:22;::::0;;;:16:::1;:22;::::0;;;;;:27;4635:56:::1;;;::::0;-1:-1:-1;;;4635:56:9;;13966:2:11;4635:56:9::1;::::0;::::1;13948:21:11::0;14005:2;13985:18;;;13978:30;-1:-1:-1;;;14024:18:11;;;14017:46;14080:18;;4635:56:9::1;13764:340:11::0;4635:56:9::1;4703:19;4737:5;:15;;;4726:38;;;;;;;;;;;;:::i;:::-;4782:13;::::0;::::1;::::0;4774:44:::1;::::0;4702:62;;-1:-1:-1;;;;;;4774:31:9::1;::::0;:44;::::1;;;::::0;4702:62;;4774:44:::1;::::0;;;4702:62;4774:31;:44;::::1;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;4829:19:9::1;4851:17:::0;;;:11:::1;:17;::::0;;;;;;;;4885:7:::1;:13:::0;;;;;;;4878:20;;-1:-1:-1;;;;;;4878:20:9;;::::1;::::0;;;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;4878:20:9;;;4851:17;;4885:13;;4878:20:::1;::::0;;::::1;4829:19:::0;4878:20:::1;:::i;:::-;-1:-1:-1::0;;4915:17:9::1;::::0;;;:11:::1;:17;::::0;;;;4908:24;4998:18:::1;::::0;5011:4;;4998:18:::1;::::0;;;::::1;4425:598;;;2398:20:3::0;1713:1;2924:21;;2744:208;2398:20;4368:655:9;:::o;2948:1414::-;2356:21:3;:19;:21::i;:::-;3099:34:9::1;;3116:5:::0;3099:34:::1;:::i;:::-;3123:9;;3099:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;3099:16:9::1;::::0;-1:-1:-1;;;3099:34:9:i:1;:::-;3091:64;;;::::0;-1:-1:-1;;;3091:64:9;;14311:2:11;3091:64:9::1;::::0;::::1;14293:21:11::0;14350:2;14330:18;;;14323:30;-1:-1:-1;;;14369:18:11;;;14362:47;14426:18;;3091:64:9::1;14109:341:11::0;3091:64:9::1;3173:22;:48;3196:24;;::::0;::::1;:5:::0;:24:::1;:::i;:::-;-1:-1:-1::0;;;;;3173:48:9::1;::::0;;::::1;::::0;::::1;::::0;;;;;;-1:-1:-1;3173:48:9;;::::1;;3165:85;;;::::0;-1:-1:-1;;;3165:85:9;;14657:2:11;3165:85:9::1;::::0;::::1;14639:21:11::0;14696:2;14676:18;;;14669:30;14735:26;14715:18;;;14708:54;14779:18;;3165:85:9::1;14455:348:11::0;3165:85:9::1;3289:15;3268:18;::::0;;;::::1;::::0;::::1;;:::i;:::-;:36;;;3260:69;;;::::0;-1:-1:-1;;;3260:69:9;;15260:2:11;3260:69:9::1;::::0;::::1;15242:21:11::0;15299:2;15279:18;;;15272:30;-1:-1:-1;;;15318:18:11;;;15311:50;15378:18;;3260:69:9::1;15058:344:11::0;3260:69:9::1;3372:15;3347:22;::::0;;;::::1;::::0;::::1;;:::i;:::-;:40;;;3339:77;;;::::0;-1:-1:-1;;;3339:77:9;;15609:2:11;3339:77:9::1;::::0;::::1;15591:21:11::0;15648:2;15628:18;;;15621:30;15687:26;15667:18;;;15660:54;15731:18;;3339:77:9::1;15407:348:11::0;3339:77:9::1;735:10:2::0;3449:22:9::1;::::0;;;:8:::1;:22;::::0;;;;;;;3434:11;;::::1;;:37;3426:63;;;::::0;-1:-1:-1;;;3426:63:9;;15962:2:11;3426:63:9::1;::::0;::::1;15944:21:11::0;16001:2;15981:18;;;15974:30;-1:-1:-1;;;16020:18:11;;;16013:43;16073:18;;3426:63:9::1;15760:337:11::0;3426:63:9::1;3530:13;3507:19;::::0;;;::::1;::::0;::::1;;:::i;:::-;:36;;;3499:70;;;::::0;-1:-1:-1;;;3499:70:9;;16304:2:11;3499:70:9::1;::::0;::::1;16286:21:11::0;16343:2;16323:18;;;16316:30;-1:-1:-1;;;16362:18:11;;;16355:51;16423:18;;3499:70:9::1;16102:345:11::0;3499:70:9::1;735:10:2::0;3587:13:9::1;::::0;;;::::1;::::0;::::1;;:::i;:::-;-1:-1:-1::0;;;;;3587:29:9::1;;3579:57;;;::::0;-1:-1:-1;;;3579:57:9;;13273:2:11;3579:57:9::1;::::0;::::1;13255:21:11::0;13312:2;13292:18;;;13285:30;-1:-1:-1;;;13331:18:11;;;13324:45;13386:18;;3579:57:9::1;13071:339:11::0;3579:57:9::1;3648:19;3682:15;;::::0;::::1;:5:::0;:15:::1;:::i;:::-;3671:38;;;;;;;:::i;:::-;3647:62;;3741:1;3727:11;:15;3719:53;;;::::0;-1:-1:-1;;;3719:53:9;;17365:2:11;3719:53:9::1;::::0;::::1;17347:21:11::0;17404:2;17384:18;;;17377:30;17443:27;17423:18;;;17416:55;17488:18;;3719:53:9::1;17163:349:11::0;3719:53:9::1;3803:11;3790:9;:24;3782:59;;;::::0;-1:-1:-1;;;3782:59:9;;17719:2:11;3782:59:9::1;::::0;::::1;17701:21:11::0;17758:2;17738:18;;;17731:30;-1:-1:-1;;;17777:18:11;;;17770:52;17839:18;;3782:59:9::1;17517:346:11::0;3782:59:9::1;3853:19;3876:33;::::0;;::::1;3887:10:::0;3876:33:::1;:::i;:::-;3852:57;;3942:13;3927:11;:28:::0;3919:72:::1;;;::::0;-1:-1:-1;;;3919:72:9;;18070:2:11;3919:72:9::1;::::0;::::1;18052:21:11::0;18109:2;18089:18;;;18082:30;18148:33;18128:18;;;18121:61;18199:18;;3919:72:9::1;17868:355:11::0;3919:72:9::1;4059:11:::0;4009:20:::1;:46;4030:24;;::::0;::::1;:5:::0;:24:::1;:::i;:::-;-1:-1:-1::0;;;;;4009:46:9::1;-1:-1:-1::0;;;;;4009:46:9::1;;;;;;;;;;;;;:61;4001:95;;;::::0;-1:-1:-1;;;4001:95:9;;18430:2:11;4001:95:9::1;::::0;::::1;18412:21:11::0;18469:2;18449:18;;;18442:30;-1:-1:-1;;;18488:18:11;;;18481:51;18549:18;;4001:95:9::1;18228:345:11::0;4001:95:9::1;4107:17;4127;;4138:5:::0;4127:17:::1;:::i;:::-;4154:18;::::0;;;:7:::1;:18;::::0;;;;4107:37;;-1:-1:-1;4175:5:9;;4154:26:::1;4175:5:::0;4154:18;:26:::1;:::i;:::-;-1:-1:-1::0;;4190:22:9::1;::::0;;;:11:::1;:22;::::0;;;;;;;:36;;;735:10:2;4237:22:9;;:8:::1;:22:::0;;;;;:27;;4263:1:::1;::::0;4190:22;4237:27:::1;::::0;4263:1;;4237:27:::1;:::i;:::-;::::0;;;-1:-1:-1;4275:35:9::1;::::0;-1:-1:-1;2359:133:9;4275:35:::1;4338:9;4325:30;4349:5;4325:30;;;;;;:::i;:::-;;;;;;;;3081:1281;;;2398:20:3::0;1713:1;2924:21;;2744:208;2398:20;2948:1414:9;;;;;:::o;1644:224::-;1531:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1752:42:9;;::::1;;::::0;;;:22:::1;:42;::::0;;;;;;;:49;;-1:-1:-1;;1752:49:9::1;1797:4;1752:49;::::0;;1811:20:::1;:40:::0;;;;;:50;1644:224::o;8678:139::-;8777:30;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8777:30:9;8678:139;;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;1435:51:11::0;1408:18;;2672:31:0::1;1289:203:11::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;7985:646:9:-:0;8052:24;8079:25;;;:14;:25;;;;;;;8114:60;;;;-1:-1:-1;;;8114:60:9;;24937:2:11;8114:60:9;;;24919:21:11;24976:2;24956:18;;;24949:30;-1:-1:-1;;;24995:18:11;;;24988:47;25052:18;;8114:60:9;24735:341:11;8114:60:9;8185:22;8210:27;;;:16;:27;;;;;;8273:26;8210:27;8290:9;8273:26;:::i;:::-;8255:15;:44;8247:74;;;;-1:-1:-1;;;8247:74:9;;25283:2:11;8247:74:9;;;25265:21:11;25322:2;25302:18;;;25295:30;-1:-1:-1;;;25341:18:11;;;25334:47;25398:18;;8247:74:9;25081:341:11;8247:74:9;8339:27;;;;:16;:27;;;;;;;;8332:34;;;8383;;;;;;8376:41;;;8434:25;;;:14;:25;;;;;;8427:32;;;8476;;;;;8469:39;8581:43;;8607:16;;8596:9;;8581:43;;;;;8042:589;;7985:646;:::o;1089:134::-;1162:7;1209:5;1198:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;1188:28;;;;;;1181:35;;1089:134;;;:::o;1796:162:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:2;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:2;1901:40:0;;;1435:51:11;1408:18;;1901:40:0;1289:203:11;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;5476:156:9:-;;;;:::o;2431:307:3:-;1755:1;2558:7;;:18;2554:86;;2599:30;;-1:-1:-1;;;2599:30:3;;;;;;;;;;;2554:86;1755:1;2714:7;:17;2431:307::o;2359:133:9:-;;;:::o;1229:228::-;1332:4;735:10:2;1355:79:9;1424:9;1355:51;:17;1366:5;1355:10;:17::i;:::-;1403:34:6;1298:14;1390:48;;;1499:4;1492:25;;;;1597:4;1581:21;;;1222:460;1355:51:9;:68;;:79::i;:::-;-1:-1:-1;;;;;1355:95:9;;;1229:228;-1:-1:-1;;;1229:228:9:o;3702:255:5:-;3780:7;3800:17;3819:18;3839:16;3859:27;3870:4;3876:9;3859:10;:27::i;:::-;3799:87;;;;;;3896:28;3908:5;3915:8;3896:11;:28::i;:::-;-1:-1:-1;3941:9:5;;3702:255;-1:-1:-1;;;;3702:255:5:o;2129:766::-;2210:7;2219:12;2233:7;2256:9;:16;2276:2;2256:22;2252:637;;2592:4;2577:20;;2571:27;2641:4;2626:20;;2620:27;2698:4;2683:20;;2677:27;2294:9;2669:36;2739:25;2750:4;2669:36;2571:27;2620;2739:10;:25::i;:::-;2732:32;;;;;;;;;;;2252:637;-1:-1:-1;;2860:16:5;;2811:1;;-1:-1:-1;2815:35:5;;2252:637;2129:766;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:5;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:5;;;;;706:25:11;;;679:18;;7550:46:5;560:177:11;7479:243:5;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:5;;;;;706:25:11;;;679:18;;7679:32:5;560:177:11;5140:1530:5;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:5;;-1:-1:-1;6301:30:5;;-1:-1:-1;6333:1:5;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;27025:25:11;;;27098:4;27086:17;;27066:18;;;27059:45;;;;27120:18;;;27113:34;;;27163:18;;;27156:34;;;6457:24:5;;26997:19:11;;6457:24:5;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:5;;-1:-1:-1;;6457:24:5;;;-1:-1:-1;;;;;;;6495:20:5;;6491:113;;-1:-1:-1;6547:1:5;;-1:-1:-1;6551:29:5;;-1:-1:-1;6547:1:5;;-1:-1:-1;6531:62:5;;6491:113;6622:6;-1:-1:-1;6630:20:5;;-1:-1:-1;6630:20:5;;-1:-1:-1;5140:1530:5;;;;;;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:164:11:-;82:5;127:3;118:6;113:3;109:16;105:26;102:46;;;144:1;141;134:12;102:46;-1:-1:-1;166:6:11;14:164;-1:-1:-1;14:164:11:o;183:372::-;277:6;330:2;318:9;309:7;305:23;301:32;298:52;;;346:1;343;336:12;298:52;386:9;373:23;419:18;411:6;408:30;405:50;;;451:1;448;441:12;405:50;474:75;541:7;532:6;521:9;517:22;474:75;:::i;:::-;464:85;183:372;-1:-1:-1;;;;183:372:11:o;742:248::-;810:6;818;871:2;859:9;850:7;846:23;842:32;839:52;;;887:1;884;877:12;839:52;-1:-1:-1;;910:23:11;;;980:2;965:18;;;952:32;;-1:-1:-1;742:248:11:o;995:180::-;1054:6;1107:2;1095:9;1086:7;1082:23;1078:32;1075:52;;;1123:1;1120;1113:12;1075:52;-1:-1:-1;1146:23:11;;995:180;-1:-1:-1;995:180:11:o;1497:347::-;1548:8;1558:6;1612:3;1605:4;1597:6;1593:17;1589:27;1579:55;;1630:1;1627;1620:12;1579:55;-1:-1:-1;1653:20:11;;1696:18;1685:30;;1682:50;;;1728:1;1725;1718:12;1682:50;1765:4;1757:6;1753:17;1741:29;;1817:3;1810:4;1801:6;1793;1789:19;1785:30;1782:39;1779:59;;;1834:1;1831;1824:12;1779:59;1497:347;;;;;:::o;1849:967::-;1983:6;1991;1999;2007;2015;2068:2;2056:9;2047:7;2043:23;2039:32;2036:52;;;2084:1;2081;2074:12;2036:52;2124:9;2111:23;2153:18;2194:2;2186:6;2183:14;2180:34;;;2210:1;2207;2200:12;2180:34;2233:75;2300:7;2291:6;2280:9;2276:22;2233:75;:::i;:::-;2223:85;;2361:2;2350:9;2346:18;2333:32;2317:48;;2390:2;2380:8;2377:16;2374:36;;;2406:1;2403;2396:12;2374:36;2445:60;2497:7;2486:8;2475:9;2471:24;2445:60;:::i;:::-;2524:8;;-1:-1:-1;2419:86:11;-1:-1:-1;2612:2:11;2597:18;;2584:32;;-1:-1:-1;2628:16:11;;;2625:36;;;2657:1;2654;2647:12;2625:36;;2696:60;2748:7;2737:8;2726:9;2722:24;2696:60;:::i;:::-;1849:967;;;;-1:-1:-1;1849:967:11;;-1:-1:-1;2775:8:11;;2670:86;1849:967;-1:-1:-1;;;1849:967:11:o;2821:131::-;-1:-1:-1;;;;;2896:31:11;;2886:42;;2876:70;;2942:1;2939;2932:12;2957:134;3025:20;;3054:31;3025:20;3054:31;:::i;:::-;2957:134;;;:::o;3096:315::-;3164:6;3172;3225:2;3213:9;3204:7;3200:23;3196:32;3193:52;;;3241:1;3238;3231:12;3193:52;3280:9;3267:23;3299:31;3324:5;3299:31;:::i;:::-;3349:5;3401:2;3386:18;;;;3373:32;;-1:-1:-1;;;3096:315:11:o;3416:680::-;3530:6;3538;3546;3599:2;3587:9;3578:7;3574:23;3570:32;3567:52;;;3615:1;3612;3605:12;3567:52;3655:9;3642:23;3684:18;3725:2;3717:6;3714:14;3711:34;;;3741:1;3738;3731:12;3711:34;3764:75;3831:7;3822:6;3811:9;3807:22;3764:75;:::i;:::-;3754:85;;3892:2;3881:9;3877:18;3864:32;3848:48;;3921:2;3911:8;3908:16;3905:36;;;3937:1;3934;3927:12;3905:36;;3976:60;4028:7;4017:8;4006:9;4002:24;3976:60;:::i;:::-;3416:680;;4055:8;;-1:-1:-1;3950:86:11;;-1:-1:-1;;;;3416:680:11:o;4200:557::-;4258:3;4296:5;4290:12;4323:6;4318:3;4311:19;4349:4;4378;4373:3;4369:14;4362:21;;4417:4;4410:5;4406:16;4440:1;4450:282;4464:6;4461:1;4458:13;4450:282;;;4523:13;;4565:9;;-1:-1:-1;;;;;4561:35:11;4549:48;;4637:11;;4631:18;4617:12;;;4610:40;4679:4;4670:14;;;;4707:15;;;;4593:1;4479:9;4450:282;;;-1:-1:-1;4748:3:11;;4200:557;-1:-1:-1;;;;;4200:557:11:o;4762:769::-;4821:3;4859:5;4853:12;4886:6;4881:3;4874:19;4912:4;4941;4936:3;4932:14;4925:21;;4980:4;4973:5;4969:16;5003:1;5013:493;5027:6;5024:1;5021:13;5013:493;;;5086:13;;5170:9;;-1:-1:-1;;;;;5166:18:11;;;5154:31;;5225:11;;;5219:18;5205:12;;;5198:40;5261:4;5309:11;;;5303:18;5299:27;;;5285:12;;;5278:49;5350:4;5398:11;;;5392:18;5412:10;5388:35;5374:12;;;5367:57;5453:4;5444:14;;;;5481:15;;;;5139:1;5042:9;5013:493;;5536:1462;5747:2;5736:9;5729:21;5759:53;5808:2;5797:9;5793:18;5784:6;5778:13;-1:-1:-1;;;;;1246:31:11;1234:44;;1180:104;5759:53;5710:4;5859:2;5851:6;5847:15;5841:22;5872:52;5920:2;5909:9;5905:18;5891:12;-1:-1:-1;;;;;1246:31:11;1234:44;;1180:104;5872:52;;5978:2;5970:6;5966:15;5960:22;5955:2;5944:9;5940:18;5933:50;6032:2;6024:6;6020:15;6014:22;6045:54;6094:3;6083:9;6079:19;6063:14;4177:10;4166:22;4154:35;;4101:94;6045:54;-1:-1:-1;6148:3:11;6136:16;;6130:23;4177:10;4166:22;;6211:3;6196:19;;4154:35;-1:-1:-1;6265:3:11;6253:16;;6247:23;4177:10;4166:22;;6328:3;6313:19;;4154:35;6279:54;6382:3;6374:6;6370:16;6364:23;6406:6;6449:2;6443:3;6432:9;6428:19;6421:31;6475:70;6540:3;6529:9;6525:19;6509:14;6475:70;:::i;:::-;6461:84;;6594:3;6586:6;6582:16;6576:23;6622:2;6618:7;6644:3;6711:2;6699:9;6691:6;6687:22;6683:31;6678:2;6667:9;6663:18;6656:59;6738:58;6789:6;6773:14;6738:58;:::i;:::-;6833:15;;;6827:22;6889;;;6885:31;;;6865:18;;;6858:59;6724:72;-1:-1:-1;6827:22:11;-1:-1:-1;6934:58:11;6724:72;6827:22;6934:58;:::i;:::-;6926:66;5536:1462;-1:-1:-1;;;;;;5536:1462:11:o;7003:247::-;7062:6;7115:2;7103:9;7094:7;7090:23;7086:32;7083:52;;;7131:1;7128;7121:12;7083:52;7170:9;7157:23;7189:31;7214:5;7189:31;:::i;7437:127::-;7498:10;7493:3;7489:20;7486:1;7479:31;7529:4;7526:1;7519:15;7553:4;7550:1;7543:15;7569:248;7636:2;7630:9;7678:4;7666:17;;7713:18;7698:34;;7734:22;;;7695:62;7692:88;;;7760:18;;:::i;:::-;7796:2;7789:22;7569:248;:::o;7822:121::-;7907:10;7900:5;7896:22;7889:5;7886:33;7876:61;;7933:1;7930;7923:12;7948:132;8015:20;;8044:30;8015:20;8044:30;:::i;8085:718::-;8127:5;8180:3;8173:4;8165:6;8161:17;8157:27;8147:55;;8198:1;8195;8188:12;8147:55;8234:6;8221:20;8260:18;8297:2;8293;8290:10;8287:36;;;8303:18;;:::i;:::-;8378:2;8372:9;8346:2;8432:13;;-1:-1:-1;;8428:22:11;;;8452:2;8424:31;8420:40;8408:53;;;8476:18;;;8496:22;;;8473:46;8470:72;;;8522:18;;:::i;:::-;8562:10;8558:2;8551:22;8597:2;8589:6;8582:18;8643:3;8636:4;8631:2;8623:6;8619:15;8615:26;8612:35;8609:55;;;8660:1;8657;8650:12;8609:55;8724:2;8717:4;8709:6;8705:17;8698:4;8690:6;8686:17;8673:54;8771:1;8764:4;8759:2;8751:6;8747:15;8743:26;8736:37;8791:6;8782:15;;;;;;8085:718;;;;:::o;8808:865::-;8926:9;8985:4;8977:5;8961:14;8957:26;8953:37;8950:57;;;9003:1;9000;8993:12;8950:57;9031:17;;:::i;:::-;9073:25;9092:5;9073:25;:::i;:::-;9064:7;9057:42;9133:34;9163:2;9156:5;9152:14;9133:34;:::i;:::-;9128:2;9119:7;9115:16;9108:60;9226:2;9219:5;9215:14;9202:28;9197:2;9188:7;9184:16;9177:54;9265:33;9294:2;9287:5;9283:14;9265:33;:::i;:::-;9260:2;9251:7;9247:16;9240:59;9334:34;9363:3;9356:5;9352:15;9334:34;:::i;:::-;9328:3;9319:7;9315:17;9308:61;9404:34;9433:3;9426:5;9422:15;9404:34;:::i;:::-;9398:3;9389:7;9385:17;9378:61;9486:3;9479:5;9475:15;9462:29;9514:18;9506:6;9503:30;9500:50;;;9546:1;9543;9536:12;9500:50;9585:52;9622:14;9613:6;9606:5;9602:18;9585:52;:::i;:::-;9579:3;9566:17;;9559:79;-1:-1:-1;9570:7:11;8808:865;-1:-1:-1;;8808:865:11:o;9678:380::-;9757:1;9753:12;;;;9800;;;9821:61;;9875:4;9867:6;9863:17;9853:27;;9821:61;9928:2;9920:6;9917:14;9897:18;9894:38;9891:161;;9974:10;9969:3;9965:20;9962:1;9955:31;10009:4;10006:1;9999:15;10037:4;10034:1;10027:15;12175:184;12245:6;12298:2;12286:9;12277:7;12273:23;12269:32;12266:52;;;12314:1;12311;12304:12;12266:52;-1:-1:-1;12337:16:11;;12175:184;-1:-1:-1;12175:184:11:o;14808:245::-;14866:6;14919:2;14907:9;14898:7;14894:23;14890:32;14887:52;;;14935:1;14932;14925:12;14887:52;14974:9;14961:23;14993:30;15017:5;14993:30;:::i;16452:521::-;16529:4;16535:6;16595:11;16582:25;16689:2;16685:7;16674:8;16658:14;16654:29;16650:43;16630:18;16626:68;16616:96;;16708:1;16705;16698:12;16616:96;16735:33;;16787:20;;;-1:-1:-1;16830:18:11;16819:30;;16816:50;;;16862:1;16859;16852:12;16816:50;16895:4;16883:17;;-1:-1:-1;16926:14:11;16922:27;;;16912:38;;16909:58;;;16963:1;16960;16953:12;18578:195;18682:11;;-1:-1:-1;;;;;;18678:54:11;-1:-1:-1;;;;;18734:31:11;;;;18675:91;;;;18662:105;;18578:195::o;18778:174::-;18822:11;18874:3;18861:17;18887:30;18911:5;18887:30;:::i;19312:542::-;19413:2;19408:3;19405:11;19402:446;;;19449:1;19473:5;19470:1;19463:16;19517:4;19514:1;19504:18;19587:2;19575:10;19571:19;19568:1;19564:27;19558:4;19554:38;19623:4;19611:10;19608:20;19605:47;;;-1:-1:-1;19646:4:11;19605:47;19701:2;19696:3;19692:12;19689:1;19685:20;19679:4;19675:31;19665:41;;19756:82;19774:2;19767:5;19764:13;19756:82;;;19819:17;;;19800:1;19789:13;19756:82;;;19760:3;;;19312:542;;;:::o;20030:1186::-;20136:18;20131:3;20128:27;20125:53;;;20158:18;;:::i;:::-;20187:93;20276:3;20236:38;20268:4;20262:11;20236:38;:::i;:::-;20230:4;20187:93;:::i;:::-;20306:1;20331:2;20326:3;20323:11;20348:1;20343:615;;;;21002:1;21019:3;21016:93;;;-1:-1:-1;21075:19:11;;;21062:33;21016:93;-1:-1:-1;;19987:1:11;19983:11;;;19979:24;19975:29;19965:40;20011:1;20007:11;;;19962:57;21122:78;;20316:894;;20343:615;19259:1;19252:14;;;19296:4;19283:18;;-1:-1:-1;;20379:17:11;;;20479:9;20501:229;20515:7;20512:1;20509:14;20501:229;;;20604:19;;;20591:33;20576:49;;20711:4;20696:20;;;;20664:1;20652:14;;;;20531:12;20501:229;;;20505:3;20758;20749:7;20746:16;20743:159;;;20882:1;20878:6;20872:3;20866;20863:1;20859:11;20855:21;20851:34;20847:39;20834:9;20829:3;20825:19;20812:33;20808:79;20800:6;20793:95;20743:159;;;20945:1;20939:3;20936:1;20932:11;20928:19;20922:4;20915:33;20316:894;;20030:1186;;;:::o;21221:1263::-;21402:5;21389:19;21417:33;21442:7;21417:33;:::i;:::-;21459:62;21513:7;21507:4;21459:62;:::i;:::-;;21569:2;21562:5;21558:14;21545:28;21582:33;21607:7;21582:33;:::i;:::-;21624:70;21686:7;21682:1;21676:4;21672:12;21624:70;:::i;:::-;;21748:2;21741:5;21737:14;21724:28;21720:1;21714:4;21710:12;21703:50;21790:1;21784:4;21780:12;21840:2;21833:5;21829:14;21816:28;21853:32;21877:7;21853:32;:::i;:::-;21910:10;21904:17;21969:3;21962:5;21958:15;21945:29;21983:32;22007:7;21983:32;:::i;:::-;22132:18;22122:7;22118:2;22114:16;22110:41;22096:10;22087:7;22083:24;22061:18;22057:23;22053:2;22049:32;22046:62;22043:109;22031:10;22024:129;;;;22162:102;22220:43;22258:3;22251:5;22247:15;22220:43;:::i;:::-;19049:11;;-1:-1:-1;;19085:40:11;19135:2;19131:14;;;;19147:26;19127:47;19082:93;19069:107;;18957:225;22162:102;;22307:65;22367:3;22360:5;22356:15;22349:5;22307:65;:::i;:::-;22381:97;22464:13;22451:11;22447:1;22441:4;22437:12;22381:97;:::i;:::-;;;21221:1263;;:::o;22489:222::-;22554:9;;;22575:10;;;22572:133;;;22627:10;22622:3;22618:20;22615:1;22608:31;22662:4;22659:1;22652:15;22690:4;22687:1;22680:15;22716:500;22774:5;22781:6;22841:3;22828:17;22927:2;22923:7;22912:8;22896:14;22892:29;22888:43;22868:18;22864:68;22854:96;;22946:1;22943;22936:12;22854:96;22974:33;;23078:4;23065:18;;;-1:-1:-1;23026:21:11;;-1:-1:-1;23106:18:11;23095:30;;23092:50;;;23138:1;23135;23128:12;23092:50;23185:6;23169:14;23165:27;23158:5;23154:39;23151:59;;;23206:1;23203;23196:12;23221:266;23309:6;23304:3;23297:19;23361:6;23354:5;23347:4;23342:3;23338:14;23325:43;-1:-1:-1;23413:1:11;23388:16;;;23406:4;23384:27;;;23377:38;;;;23469:2;23448:15;;;-1:-1:-1;;23444:29:11;23435:39;;;23431:50;;23221:266::o;23492:1238::-;23689:2;23678:9;23671:21;23652:4;23727:6;23714:20;23743:31;23768:5;23743:31;:::i;:::-;-1:-1:-1;;;;;23848:14:11;;;23843:2;23828:18;;;23821:42;;;;23900:15;;23887:29;;23925:33;23887:29;23925:33;:::i;:::-;24007:2;23998:7;23994:16;23989:2;23978:9;23974:18;23967:44;;;24072:2;24064:6;24060:15;24047:29;24042:2;24031:9;24027:18;24020:57;24126:2;24118:6;24114:15;24101:29;24139:32;24163:7;24139:32;:::i;:::-;24221:10;24212:7;24208:24;24202:3;24191:9;24187:19;24180:53;;24262:35;24292:3;24284:6;24280:16;24262:35;:::i;:::-;4177:10;4166:22;;24353:3;24338:19;;4154:35;24306:52;24389:35;24419:3;24411:6;24407:16;24389:35;:::i;:::-;4177:10;4166:22;;24482:3;24467:19;;4154:35;24433:54;24532:56;24583:3;24575:6;24571:16;24563:6;24532:56;:::i;:::-;24626:4;24619;24608:9;24604:20;24597:34;24648:76;24719:3;24708:9;24704:19;24690:12;24674:14;24648:76;:::i;:::-;24640:84;23492:1238;-1:-1:-1;;;;;23492:1238:11:o;25427:1234::-;25585:4;25614:2;25643;25632:9;25625:21;25682:1;25678;25673:3;25669:11;25665:19;25739:2;25730:6;25724:13;25720:22;25715:2;25704:9;25700:18;25693:50;25807:2;25801;25793:6;25789:15;25783:22;25779:31;25774:2;25763:9;25759:18;25752:59;;25865:2;25857:6;25853:15;25847:22;25842:2;25831:9;25827:18;25820:50;25917:2;25909:6;25905:15;25899:22;25940:10;26005:2;25991:12;25987:21;25981:3;25970:9;25966:19;25959:50;26075:2;26068:3;26060:6;26056:16;26050:23;26046:32;26040:3;26029:9;26025:19;26018:61;26145:2;26138:3;26130:6;26126:16;26120:23;26116:32;26110:3;26099:9;26095:19;26088:61;;;26198:3;26190:6;26186:16;26180:23;26241:4;26234;26223:9;26219:20;26212:34;26275:14;26269:21;26327:6;26321:3;26310:9;26306:19;26299:35;26352:1;26362:149;26376:6;26373:1;26370:13;26362:149;;;26472:22;;;26468:31;;26462:38;26437:17;;;26456:3;26433:27;26426:75;26391:10;;26362:149;;;26366:3;26530;26520:13;;26582:1;26577:2;26568:6;26557:9;26553:22;26549:31;26542:42;26652:2;26645;26641:7;26636:2;26628:6;26624:15;26620:29;26609:9;26605:45;26601:54;26593:62;;;;;25427:1234;;;;:::o;26666:127::-;26727:10;26722:3;26718:20;26715:1;26708:31;26758:4;26755:1;26748:15;26782:4;26779:1;26772:15"},"gasEstimates":{"creation":{"codeDepositCost":"1644800","executionCost":"49691","totalCost":"1694491"},"external":{"computeOrderHash((address,address,uint256,uint32,uint32,uint32,bytes))":"infinite","deleteOrder(bytes32)":"infinite","destroyExpiredMatch(bytes32)":"26592","initiate((address,address,uint256,uint32,uint32,uint32,bytes),bytes,bytes)":"infinite","matchOrders(bytes32,bytes32)":"infinite","nonceOf(address)":"2586","owner()":"2390","renounceOwnership()":"infinite","resolve((address,address,uint256,uint32,uint32,uint32,bytes),bytes)":"infinite","transferOwnership(address)":"infinite","whitelistSettlementContract(address,uint256)":"48983"},"internal":{"_broadcastMatch(bytes32,bytes32,uint256)":"15","_broadcastOrder(struct CrossChainOrder calldata,uint256)":"infinite","_broadcastOrderDelete(bytes32,uint256)":"13","_broadcastUnmatch(bytes32,bytes32)":"infinite","_deleteLzOrder(bytes32)":"infinite","_hashOrder(struct CrossChainOrder memory)":"infinite","_initiateLzOrder(struct CrossChainOrder memory)":"infinite","_matchOrdersLz(bytes32,bytes32,uint256)":"infinite","_unmatchOrdersLz(bytes32,bytes32)":"infinite","_verifySignature(struct CrossChainOrder memory,bytes memory)":"infinite"}},"methodIdentifiers":{"computeOrderHash((address,address,uint256,uint32,uint32,uint32,bytes))":"5d357deb","deleteOrder(bytes32)":"87a61cbd","destroyExpiredMatch(bytes32)":"ffc374c9","initiate((address,address,uint256,uint32,uint32,uint32,bytes),bytes,bytes)":"962fc2a3","matchOrders(bytes32,bytes32)":"7fe3826e","nonceOf(address)":"ed2a2d64","owner()":"8da5cb5b","renounceOwnership()":"715018a6","resolve((address,address,uint256,uint32,uint32,uint32,bytes),bytes)":"bf6d01d3","transferOwnership(address)":"f2fde38b","whitelistSettlementContract(address,uint256)":"97b2b09f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHashA\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHashB\",\"type\":\"bytes32\"}],\"name\":\"MatchDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct CrossChainOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHashA\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHashB\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrdersMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"}],\"internalType\":\"struct CrossChainOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"computeOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"deleteOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"destroyExpiredMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"}],\"internalType\":\"struct CrossChainOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"fillerData\",\"type\":\"bytes\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHashA\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"orderHashB\",\"type\":\"bytes32\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"}],\"internalType\":\"struct CrossChainOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"fillerData\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Input[]\",\"name\":\"swapperInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"swapperOutputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"fillerOutputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ResolvedCrossChainOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"whitelistSettlementContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeOrderHash((address,address,uint256,uint32,uint32,uint32,bytes))\":{\"notice\":\" Order Hashing\"},\"constructor\":{\"notice\":\" Constructor\"},\"resolve((address,address,uint256,uint32,uint32,uint32,bytes),bytes)\":{\"notice\":\" Order Resolving\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SettlementContract.sol\":\"SettlementContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SettlementContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ISettlementContract, CrossChainOrder, ResolvedCrossChainOrder} from \\\"./interfaces/IERC7683.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract SettlementContract is\\n    ISettlementContract,\\n    Context,\\n    Ownable,\\n    ReentrancyGuard\\n{\\n    using ECDSA for bytes32;\\n    using MessageHashUtils for bytes32;\\n    using Address for address;\\n\\n    ///\\n    /// Constructor\\n    ///\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    ///\\n    /// Order Hashing\\n    ///\\n\\n    function computeOrderHash(CrossChainOrder calldata order) external pure returns (bytes32) {\\n        return _hashOrder(order);\\n    }\\n\\n    function _hashOrder(CrossChainOrder memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(order));\\n    }\\n\\n    function _verifySignature(CrossChainOrder memory order, bytes memory signature) internal view returns (bool) {\\n        return _hashOrder(order)\\n        .toEthSignedMessageHash()\\n        .recover(signature) == _msgSender();\\n    }\\n\\n    ///\\n    /// Whitelisted Settlement Contracts\\n    ///\\n\\n    mapping(address => bool) internal _isSettlementSupported;\\n    mapping(address => uint) internal _settlementToChainId;\\n\\n    function whitelistSettlementContract(address settlementContract, uint chainId) external onlyOwner {\\n        _isSettlementSupported[settlementContract] = true;\\n        _settlementToChainId[settlementContract] = chainId;\\n    }\\n\\n    ///\\n    /// Order Registration\\n    ///\\n\\n    mapping(bytes32 => CrossChainOrder) internal _orders;\\n    mapping(bytes32 => uint256) internal _destChains;\\n    mapping(address => uint256) internal _nonceOf;\\n\\n    event OrderCreated(bytes32 indexed orderHash, CrossChainOrder order);\\n    event OrderDeleted(bytes32 indexed orderHash);\\n\\n    function _broadcastOrder(CrossChainOrder calldata order, uint256 destChainId) internal {\\n        // todo: Implement LayerZero sending logic\\n    }\\n\\n    function _broadcastOrderDelete(bytes32 hash, uint256 destChainId) internal {\\n        // todo: Implement LayerZero sending logic\\n    }\\n\\n    function _initiateLzOrder(CrossChainOrder memory order) internal {\\n        bytes32 orderHash = _hashOrder(order);\\n        _orders[orderHash] = order;\\n        _destChains[orderHash] = block.chainid;\\n        emit OrderCreated(orderHash, order);\\n    }\\n\\n    function _deleteLzOrder(bytes32 hash) internal {\\n        delete _orders[hash];\\n        delete _destChains[hash];\\n        delete _matchTimestamps[hash];\\n        emit OrderDeleted(hash);\\n    }\\n\\n    function initiate(CrossChainOrder calldata order, bytes calldata signature, bytes calldata fillerData) external payable nonReentrant {\\n        require(_verifySignature(order, signature), \\\"invalid signature\\\");\\n        require(_isSettlementSupported[order.settlementContract], \\\"settlement not supported\\\");\\n        require(order.fillDeadline > block.timestamp, \\\"invalid fillDeadline\\\");\\n        require(order.initiateDeadline > block.timestamp, \\\"invalid initiateDeadline\\\");\\n        require(order.nonce == _nonceOf[_msgSender()], \\\"invalid nonce\\\");\\n        require(order.originChainId == block.chainid, \\\"invalid originChainId\\\");\\n        require(order.swapper == _msgSender(), \\\"invalid swapper\\\");\\n\\n        (uint256 inputAmount) = abi.decode(order.orderData, (uint256));\\n        require(inputAmount > 0, \\\"insufficient input amount\\\");\\n        require(msg.value == inputAmount, \\\"insufficient msg.value\\\");\\n\\n        (uint256 destChainId) = abi.decode(fillerData, (uint256));\\n        require(destChainId != block.chainid, \\\"dest chain id must be different\\\");\\n        require(_settlementToChainId[order.settlementContract] == destChainId, \\\"invalid dest chain id\\\");\\n\\n        bytes32 orderHash = _hashOrder(order);\\n        _orders[orderHash] = order;\\n        _destChains[orderHash] = destChainId;\\n\\n        _nonceOf[_msgSender()] += 1;\\n\\n        _broadcastOrder(order, destChainId);\\n        emit OrderCreated(orderHash, order);\\n    }\\n\\n    function deleteOrder(bytes32 hash) external nonReentrant {\\n        CrossChainOrder memory order = _orders[hash];\\n        require(order.swapper == _msgSender(), \\\"invalid swapper\\\");\\n        require(order.originChainId == block.chainid, \\\"invalid origin chain\\\");\\n        require(_matchTimestamps[hash] == 0, \\\"order is matched\\\");\\n\\n        (uint256 inputAmount) = abi.decode(order.orderData, (uint256));\\n        payable(order.swapper).transfer(inputAmount);\\n\\n        uint256 destChainId = _destChains[hash];\\n        delete _orders[hash];\\n        delete _destChains[hash];\\n\\n        _broadcastOrderDelete(hash, destChainId);\\n        emit OrderDeleted(hash);\\n    }\\n\\n    function nonceOf(address user) external view returns (uint256) {\\n        return _nonceOf[user];\\n    }\\n\\n    ///\\n    /// Order Matching\\n    ///\\n\\n    mapping(bytes32 => uint256) internal _matchTimestamps;\\n    mapping(bytes32 => bytes32) internal _matchedOrders;\\n\\n    event OrdersMatched(bytes32 indexed orderHashA, bytes32 indexed orderHashB, uint256 timestamp);\\n    event MatchDestroyed(bytes32 indexed orderHashA, bytes32 indexed orderHashB);\\n\\n    function _broadcastMatch(bytes32 orderHashA, bytes32 orderHashB, uint256 matchTimestamp) internal {\\n        // todo: Implement LayerZero sending logic\\n    }\\n\\n    function _broadcastUnmatch(bytes32 orderHashA, bytes32 orderHashB) internal {\\n        // todo: Implement LayerZero sending logic\\n    }\\n\\n    function _matchOrdersLz(bytes32 orderHashA, bytes32 orderHashB, uint256 matchTimestamp) internal {\\n        _matchTimestamps[orderHashA] = matchTimestamp;\\n        _matchTimestamps[orderHashB] = matchTimestamp;\\n        _matchedOrders[orderHashA] = orderHashB;\\n        _matchedOrders[orderHashB] = orderHashA;\\n        emit OrdersMatched(orderHashA, orderHashB, matchTimestamp);\\n    }\\n\\n    function _unmatchOrdersLz(bytes32 orderHashA, bytes32 orderHashB) internal {\\n        delete _matchTimestamps[orderHashA];\\n        delete _matchTimestamps[orderHashB];\\n        delete _matchedOrders[orderHashA];\\n        delete _matchedOrders[orderHashB];\\n        emit MatchDestroyed(orderHashA, orderHashB);\\n    }\\n\\n    function matchOrders(bytes32 orderHashA, bytes32 orderHashB) external {\\n        CrossChainOrder memory orderA = _orders[orderHashA];\\n        require(orderA.swapper != address(0), \\\"order A doesn't exist\\\");\\n        CrossChainOrder memory orderB = _orders[orderHashB];\\n        require(orderB.swapper != address(0), \\\"order B doesn't exist\\\");\\n\\n        require(orderA.fillDeadline > block.timestamp, \\\"invalid fillDeadline A\\\");\\n        require(orderB.fillDeadline > block.timestamp, \\\"invalid fillDeadline B\\\");\\n        require(orderA.initiateDeadline > block.timestamp, \\\"invalid initiateDeadline A\\\");\\n        require(orderB.initiateDeadline > block.timestamp, \\\"invalid initiateDeadline B\\\");\\n\\n        (uint256 inputAmountA) = abi.decode(orderA.orderData, (uint256));\\n        (uint256 inputAmountB) = abi.decode(orderB.orderData, (uint256));\\n        require(inputAmountA == inputAmountB, \\\"input amounts mismatch\\\");\\n\\n        require(\\n            _destChains[orderHashA] == orderB.originChainId &&\\n            _destChains[orderHashB] == orderA.originChainId,\\n            \\\"destination chains mismatch\\\"\\n        );\\n\\n        uint256 matchTimestamp = block.timestamp;\\n        _matchTimestamps[orderHashA] = matchTimestamp;\\n        _matchTimestamps[orderHashB] = matchTimestamp;\\n        _matchedOrders[orderHashA] = orderHashB;\\n        _matchedOrders[orderHashB] = orderHashA;\\n\\n        _broadcastMatch(orderHashA, orderHashB, matchTimestamp);\\n        emit OrdersMatched(orderHashA, orderHashB, matchTimestamp);\\n    }\\n\\n    function destroyExpiredMatch(bytes32 orderHash) external {\\n        bytes32 matchedOrderHash = _matchedOrders[orderHash];\\n        require(matchedOrderHash != bytes32(0), \\\"order not matched\\\");\\n\\n        uint256 matchTimestamp = _matchTimestamps[orderHash];\\n        require(block.timestamp > matchTimestamp + 5 minutes, \\\"match not expired\\\");\\n\\n        delete _matchTimestamps[orderHash];\\n        delete _matchTimestamps[matchedOrderHash];\\n        delete _matchedOrders[orderHash];\\n        delete _matchedOrders[matchedOrderHash];\\n\\n        _broadcastUnmatch(orderHash, matchedOrderHash);\\n\\n        emit MatchDestroyed(orderHash, matchedOrderHash);\\n    }\\n\\n    ///\\n    /// Order Resolving\\n    ///\\n\\n    function resolve(CrossChainOrder calldata order, bytes calldata fillerData) external view returns (ResolvedCrossChainOrder memory) {\\n\\n    }\\n}\",\"keccak256\":\"0x870996ceb68d9bacadf673790967557db0a47eddec46a8f9ddea6c9a6089ccf6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC7683.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title CrossChainOrder type\\n/// @notice Standard order struct to be signed by swappers, disseminated to fillers, and submitted to settlement contracts\\nstruct CrossChainOrder {\\n\\t/// @dev The contract address that the order is meant to be settled by.\\n\\t/// Fillers send this order to this contract address on the origin chain\\n\\taddress settlementContract;\\n\\t/// @dev The address of the user who is initiating the swap,\\n\\t/// whose input tokens will be taken and escrowed\\n\\taddress swapper;\\n\\t/// @dev Nonce to be used as replay protection for the order\\n\\tuint256 nonce;\\n\\t/// @dev The chainId of the origin chain\\n\\tuint32 originChainId;\\n\\t/// @dev The timestamp by which the order must be initiated\\n\\tuint32 initiateDeadline;\\n\\t/// @dev The timestamp by which the order must be filled on the destination chain\\n\\tuint32 fillDeadline;\\n\\t/// @dev Arbitrary implementation-specific data\\n\\t/// Can be used to define tokens, amounts, destination chains, fees, settlement parameters,\\n\\t/// or any other order-type specific information\\n\\tbytes orderData;\\n}\\n\\n/// @title ResolvedCrossChainOrder type\\n/// @notice An implementation-generic representation of an order\\n/// @dev Defines all requirements for filling an order by unbundling the implementation-specific orderData.\\n/// @dev Intended to improve integration generalization by allowing fillers to compute the exact input and output information of any order\\nstruct ResolvedCrossChainOrder {\\n\\t/// @dev The contract address that the order is meant to be settled by.\\n\\taddress settlementContract;\\n\\t/// @dev The address of the user who is initiating the swap\\n\\taddress swapper;\\n\\t/// @dev Nonce to be used as replay protection for the order\\n\\tuint256 nonce;\\n\\t/// @dev The chainId of the origin chain\\n\\tuint32 originChainId;\\n\\t/// @dev The timestamp by which the order must be initiated\\n\\tuint32 initiateDeadline;\\n\\t/// @dev The timestamp by which the order must be filled on the destination chain(s)\\n\\tuint32 fillDeadline;\\n\\n\\t/// @dev The inputs to be taken from the swapper as part of order initiation\\n\\tInput[] swapperInputs;\\n\\t/// @dev The outputs to be given to the swapper as part of order fulfillment\\n\\tOutput[] swapperOutputs;\\n\\t/// @dev The outputs to be given to the filler as part of order settlement\\n\\tOutput[] fillerOutputs;\\n}\\n\\n/// @notice Tokens sent by the swapper as inputs to the order\\nstruct Input {\\n\\t/// @dev The address of the ERC20 token on the origin chain\\n\\taddress token;\\n\\t/// @dev The amount of the token to be sent\\n\\tuint256 amount;\\n}\\n\\n/// @notice Tokens that must be receive for a valid order fulfillment\\nstruct Output {\\n\\t/// @dev The address of the ERC20 token on the destination chain\\n\\t/// @dev address(0) used as a sentinel for the native token\\n\\taddress token;\\n\\t/// @dev The amount of the token to be sent\\n\\tuint256 amount;\\n\\t/// @dev The address to receive the output tokens\\n\\taddress recipient;\\n\\t/// @dev The destination chain for this output\\n\\tuint32 chainId;\\n}\\n\\n\\n/// @title ISettlementContract\\n/// @notice Standard interface for settlement contracts\\ninterface ISettlementContract {\\n    function initiate(CrossChainOrder calldata order, bytes calldata signature, bytes calldata fillerData) external payable;\\n\\n    function resolve(CrossChainOrder calldata order, bytes calldata fillerData) external view returns (ResolvedCrossChainOrder memory);\\n}\\n\",\"keccak256\":\"0x57158706f63593c01faf03da83edd81b9793b8537bac7f5e8ffd541a04d094b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":441,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":2437,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_isSettlementSupported","offset":0,"slot":"2","type":"t_mapping(t_address,t_bool)"},{"astId":2441,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_settlementToChainId","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2469,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_orders","offset":0,"slot":"4","type":"t_mapping(t_bytes32,t_struct(CrossChainOrder)3213_storage)"},{"astId":2473,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_destChains","offset":0,"slot":"5","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":2477,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_nonceOf","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":2830,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_matchTimestamps","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":2834,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"_matchedOrders","offset":0,"slot":"8","type":"t_mapping(t_bytes32,t_bytes32)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bytes32)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_mapping(t_bytes32,t_struct(CrossChainOrder)3213_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct CrossChainOrder)","numberOfBytes":"32","value":"t_struct(CrossChainOrder)3213_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(CrossChainOrder)3213_storage":{"encoding":"inplace","label":"struct CrossChainOrder","members":[{"astId":3194,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"settlementContract","offset":0,"slot":"0","type":"t_address"},{"astId":3197,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"swapper","offset":0,"slot":"1","type":"t_address"},{"astId":3200,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"nonce","offset":0,"slot":"2","type":"t_uint256"},{"astId":3203,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"originChainId","offset":0,"slot":"3","type":"t_uint32"},{"astId":3206,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"initiateDeadline","offset":4,"slot":"3","type":"t_uint32"},{"astId":3209,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"fillDeadline","offset":8,"slot":"3","type":"t_uint32"},{"astId":3212,"contract":"contracts/SettlementContract.sol:SettlementContract","label":"orderData","offset":0,"slot":"4","type":"t_bytes_storage"}],"numberOfBytes":"160"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"userdoc":{"kind":"user","methods":{"computeOrderHash((address,address,uint256,uint32,uint32,uint32,bytes))":{"notice":" Order Hashing"},"constructor":{"notice":" Constructor"},"resolve((address,address,uint256,uint32,uint32,uint32,bytes),bytes)":{"notice":" Order Resolving"}},"version":1}}},"contracts/interfaces/IERC7683.sol":{"ISettlementContract":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"bytes","name":"orderData","type":"bytes"}],"internalType":"struct CrossChainOrder","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"fillerData","type":"bytes"}],"name":"initiate","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"bytes","name":"orderData","type":"bytes"}],"internalType":"struct CrossChainOrder","name":"order","type":"tuple"},{"internalType":"bytes","name":"fillerData","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"address","name":"settlementContract","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"initiateDeadline","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Input[]","name":"swapperInputs","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"chainId","type":"uint32"}],"internalType":"struct Output[]","name":"swapperOutputs","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"chainId","type":"uint32"}],"internalType":"struct Output[]","name":"fillerOutputs","type":"tuple[]"}],"internalType":"struct ResolvedCrossChainOrder","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"ISettlementContract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"initiate((address,address,uint256,uint32,uint32,uint32,bytes),bytes,bytes)":"962fc2a3","resolve((address,address,uint256,uint32,uint32,uint32,bytes),bytes)":"bf6d01d3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"}],\"internalType\":\"struct CrossChainOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"fillerData\",\"type\":\"bytes\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"}],\"internalType\":\"struct CrossChainOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"fillerData\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initiateDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Input[]\",\"name\":\"swapperInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"swapperOutputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"fillerOutputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ResolvedCrossChainOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"ISettlementContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Standard interface for settlement contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC7683.sol\":\"ISettlementContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC7683.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title CrossChainOrder type\\n/// @notice Standard order struct to be signed by swappers, disseminated to fillers, and submitted to settlement contracts\\nstruct CrossChainOrder {\\n\\t/// @dev The contract address that the order is meant to be settled by.\\n\\t/// Fillers send this order to this contract address on the origin chain\\n\\taddress settlementContract;\\n\\t/// @dev The address of the user who is initiating the swap,\\n\\t/// whose input tokens will be taken and escrowed\\n\\taddress swapper;\\n\\t/// @dev Nonce to be used as replay protection for the order\\n\\tuint256 nonce;\\n\\t/// @dev The chainId of the origin chain\\n\\tuint32 originChainId;\\n\\t/// @dev The timestamp by which the order must be initiated\\n\\tuint32 initiateDeadline;\\n\\t/// @dev The timestamp by which the order must be filled on the destination chain\\n\\tuint32 fillDeadline;\\n\\t/// @dev Arbitrary implementation-specific data\\n\\t/// Can be used to define tokens, amounts, destination chains, fees, settlement parameters,\\n\\t/// or any other order-type specific information\\n\\tbytes orderData;\\n}\\n\\n/// @title ResolvedCrossChainOrder type\\n/// @notice An implementation-generic representation of an order\\n/// @dev Defines all requirements for filling an order by unbundling the implementation-specific orderData.\\n/// @dev Intended to improve integration generalization by allowing fillers to compute the exact input and output information of any order\\nstruct ResolvedCrossChainOrder {\\n\\t/// @dev The contract address that the order is meant to be settled by.\\n\\taddress settlementContract;\\n\\t/// @dev The address of the user who is initiating the swap\\n\\taddress swapper;\\n\\t/// @dev Nonce to be used as replay protection for the order\\n\\tuint256 nonce;\\n\\t/// @dev The chainId of the origin chain\\n\\tuint32 originChainId;\\n\\t/// @dev The timestamp by which the order must be initiated\\n\\tuint32 initiateDeadline;\\n\\t/// @dev The timestamp by which the order must be filled on the destination chain(s)\\n\\tuint32 fillDeadline;\\n\\n\\t/// @dev The inputs to be taken from the swapper as part of order initiation\\n\\tInput[] swapperInputs;\\n\\t/// @dev The outputs to be given to the swapper as part of order fulfillment\\n\\tOutput[] swapperOutputs;\\n\\t/// @dev The outputs to be given to the filler as part of order settlement\\n\\tOutput[] fillerOutputs;\\n}\\n\\n/// @notice Tokens sent by the swapper as inputs to the order\\nstruct Input {\\n\\t/// @dev The address of the ERC20 token on the origin chain\\n\\taddress token;\\n\\t/// @dev The amount of the token to be sent\\n\\tuint256 amount;\\n}\\n\\n/// @notice Tokens that must be receive for a valid order fulfillment\\nstruct Output {\\n\\t/// @dev The address of the ERC20 token on the destination chain\\n\\t/// @dev address(0) used as a sentinel for the native token\\n\\taddress token;\\n\\t/// @dev The amount of the token to be sent\\n\\tuint256 amount;\\n\\t/// @dev The address to receive the output tokens\\n\\taddress recipient;\\n\\t/// @dev The destination chain for this output\\n\\tuint32 chainId;\\n}\\n\\n\\n/// @title ISettlementContract\\n/// @notice Standard interface for settlement contracts\\ninterface ISettlementContract {\\n    function initiate(CrossChainOrder calldata order, bytes calldata signature, bytes calldata fillerData) external payable;\\n\\n    function resolve(CrossChainOrder calldata order, bytes calldata fillerData) external view returns (ResolvedCrossChainOrder memory);\\n}\\n\",\"keccak256\":\"0x57158706f63593c01faf03da83edd81b9793b8537bac7f5e8ffd541a04d094b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Standard interface for settlement contracts","version":1}}}}}}